{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Contains the REST API documentation of the User-friendly Deep Learning (UFDL) framework . The documentation available here is to be considered work in progress and can change at any given time as the project evolves. All requests and responses are JSON, unless stated otherwise.","title":"Home"},{"location":"audio_classification/","text":"Audio classification is used to assign categories to audio samples at certain timestamps (for a specified duration), e.g., whether the sample represents a particular song bird. Use-cases # The following use-cases must be covered. Create dataset # requires: name of dataset project it belongs to (optional; default is all project) users allowed to manage it (optional; default is only user creating it) license (default: proprietary, ie all rights reserved) optional tag(s) Delete dataset # requires: name of dataset List datasets # requires: filters for tags, license, ... List images in dataset # requires: name of dataset to list Modify dataset # Sub use-cases: Add sound file # requires: name of dataset to add to one or more annotations, for each: start timestamp duration category Delete sound file # Automatically removes any associated categories. requires: name of dataset to remove from name of sound file(s) to remove Add annotations # requires: name of dataset to add to name of sound(s) to add to the annotations to add, for each annotation: start timestamp duration label Delete annotations # requires: name of dataset to remove from name of sound file(s) to remove from Change license # requires: name of dataset to update license Tag dataset # requires: name of dataset to tag tag(s) Download # Download sound file # requires: name of dataset name of sound file Download annotations # requires: name of dataset annotation format Download dataset # Downloads the complete dataset as ZIP file. requires: name of dataset annotation format","title":"Audio classification"},{"location":"audio_classification/#use-cases","text":"The following use-cases must be covered.","title":"Use-cases"},{"location":"audio_classification/#create-dataset","text":"requires: name of dataset project it belongs to (optional; default is all project) users allowed to manage it (optional; default is only user creating it) license (default: proprietary, ie all rights reserved) optional tag(s)","title":"Create dataset"},{"location":"audio_classification/#delete-dataset","text":"requires: name of dataset","title":"Delete dataset"},{"location":"audio_classification/#list-datasets","text":"requires: filters for tags, license, ...","title":"List datasets"},{"location":"audio_classification/#list-images-in-dataset","text":"requires: name of dataset to list","title":"List images in dataset"},{"location":"audio_classification/#modify-dataset","text":"Sub use-cases:","title":"Modify dataset"},{"location":"audio_classification/#add-sound-file","text":"requires: name of dataset to add to one or more annotations, for each: start timestamp duration category","title":"Add sound file"},{"location":"audio_classification/#delete-sound-file","text":"Automatically removes any associated categories. requires: name of dataset to remove from name of sound file(s) to remove","title":"Delete sound file"},{"location":"audio_classification/#add-annotations","text":"requires: name of dataset to add to name of sound(s) to add to the annotations to add, for each annotation: start timestamp duration label","title":"Add annotations"},{"location":"audio_classification/#delete-annotations","text":"requires: name of dataset to remove from name of sound file(s) to remove from","title":"Delete annotations"},{"location":"audio_classification/#change-license","text":"requires: name of dataset to update license","title":"Change license"},{"location":"audio_classification/#tag-dataset","text":"requires: name of dataset to tag tag(s)","title":"Tag dataset"},{"location":"audio_classification/#download","text":"","title":"Download"},{"location":"audio_classification/#download-sound-file","text":"requires: name of dataset name of sound file","title":"Download sound file"},{"location":"audio_classification/#download-annotations","text":"requires: name of dataset annotation format","title":"Download annotations"},{"location":"audio_classification/#download-dataset","text":"Downloads the complete dataset as ZIP file. requires: name of dataset annotation format","title":"Download dataset"},{"location":"authentication/","text":"Authentication is done via JSON Web Tokens (JWT) . Actions # Obtain # POST: /v1/auth/obtain Body: username password Response: access: str (JWT token for accessing API) refresh: str (JWT token to refresh access token) Refresh # POST: /v1/auth/refresh Body: refresh: str (the JWT refresh token) Response: access: str (JWT token for accessing API) API calls # Subsequent API calls must include the access token in the Authorization HTTP header as follows: Bearer <JWT access token>","title":"Authentication"},{"location":"authentication/#actions","text":"","title":"Actions"},{"location":"authentication/#obtain","text":"POST: /v1/auth/obtain Body: username password Response: access: str (JWT token for accessing API) refresh: str (JWT token to refresh access token)","title":"Obtain"},{"location":"authentication/#refresh","text":"POST: /v1/auth/refresh Body: refresh: str (the JWT refresh token) Response: access: str (JWT token for accessing API)","title":"Refresh"},{"location":"authentication/#api-calls","text":"Subsequent API calls must include the access token in the Authorization HTTP header as follows: Bearer <JWT access token>","title":"API calls"},{"location":"cuda/","text":"Based on the NVIDIA driver installed on a system only certain versions of CUDA inside docker images will work. Links # CUDA/Driver version Fields # pk: int (primary key of CUDA instance) version: str (10.0) full_version: str (10.0.130) min_driver_version: str (410.48) Actions # List # Lists the CUDA versions registered with the backend. Method # POST URL # /v1/cuda/list Body (optional) # filter specification Permissions # user is authenticated Response # array of pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Create # Adds a new CUDA version to the backend. Method # POST URL # /v1/cuda/create Body # version: str full_version: str min_driver_version: str Permissions # user is an admin Response # pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Retrieve # Retrieves the details about a specific CUDA version. Method # GET URL # /v1/cuda/{PK} Parameters # PK : int (primary key of CUDA version) Permissions # user is authenticated Response # pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Update # Updates the details of a specific CUDA version. Method # PUT URL # /v1/cuda/{PK} Parameters # PK : int (primary key of CUDA version) Body # version: str full_version: str min_driver_version: str Permissions # user is an admin Response # pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Partial Update # Updates a sub-set of details about a particular CUDA version. METHOD # PATCH URL # /v1/cuda/{PK} Parameters # PK : int (primary key of CUDA version) Body # version (optional): str full_version (optional): str min_driver_version (optional): str Permissions # user is an admin Response # pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Destroy # Removes a CUDA version from the backend. Method # DELETE URL # /v1/cuda/{PK} Parameters # PK : int (primary key of CUDA version) Permissions # user is an admin","title":"CUDA"},{"location":"cuda/#links","text":"CUDA/Driver version","title":"Links"},{"location":"cuda/#fields","text":"pk: int (primary key of CUDA instance) version: str (10.0) full_version: str (10.0.130) min_driver_version: str (410.48)","title":"Fields"},{"location":"cuda/#actions","text":"","title":"Actions"},{"location":"cuda/#list","text":"Lists the CUDA versions registered with the backend.","title":"List"},{"location":"cuda/#method","text":"POST","title":"Method"},{"location":"cuda/#url","text":"/v1/cuda/list","title":"URL"},{"location":"cuda/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"cuda/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"cuda/#response","text":"array of pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#create","text":"Adds a new CUDA version to the backend.","title":"Create"},{"location":"cuda/#method_1","text":"POST","title":"Method"},{"location":"cuda/#url_1","text":"/v1/cuda/create","title":"URL"},{"location":"cuda/#body","text":"version: str full_version: str min_driver_version: str","title":"Body"},{"location":"cuda/#permissions_1","text":"user is an admin","title":"Permissions"},{"location":"cuda/#response_1","text":"pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#retrieve","text":"Retrieves the details about a specific CUDA version.","title":"Retrieve"},{"location":"cuda/#method_2","text":"GET","title":"Method"},{"location":"cuda/#url_2","text":"/v1/cuda/{PK}","title":"URL"},{"location":"cuda/#parameters","text":"PK : int (primary key of CUDA version)","title":"Parameters"},{"location":"cuda/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"cuda/#response_2","text":"pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#update","text":"Updates the details of a specific CUDA version.","title":"Update"},{"location":"cuda/#method_3","text":"PUT","title":"Method"},{"location":"cuda/#url_3","text":"/v1/cuda/{PK}","title":"URL"},{"location":"cuda/#parameters_1","text":"PK : int (primary key of CUDA version)","title":"Parameters"},{"location":"cuda/#body_1","text":"version: str full_version: str min_driver_version: str","title":"Body"},{"location":"cuda/#permissions_3","text":"user is an admin","title":"Permissions"},{"location":"cuda/#response_3","text":"pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#partial-update","text":"Updates a sub-set of details about a particular CUDA version.","title":"Partial Update"},{"location":"cuda/#method_4","text":"PATCH","title":"METHOD"},{"location":"cuda/#url_4","text":"/v1/cuda/{PK}","title":"URL"},{"location":"cuda/#parameters_2","text":"PK : int (primary key of CUDA version)","title":"Parameters"},{"location":"cuda/#body_2","text":"version (optional): str full_version (optional): str min_driver_version (optional): str","title":"Body"},{"location":"cuda/#permissions_4","text":"user is an admin","title":"Permissions"},{"location":"cuda/#response_4","text":"pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#destroy","text":"Removes a CUDA version from the backend.","title":"Destroy"},{"location":"cuda/#method_5","text":"DELETE","title":"Method"},{"location":"cuda/#url_5","text":"/v1/cuda/{PK}","title":"URL"},{"location":"cuda/#parameters_3","text":"PK : int (primary key of CUDA version)","title":"Parameters"},{"location":"cuda/#permissions_5","text":"user is an admin","title":"Permissions"},{"location":"datasets/","text":"Core dataset operations. Fields # Available fields: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str) Actions # List # POST: /v1/datasets/list Body (optional): filter specification Response: array of name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str) Load # GET: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Response: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str) Add # POST: /v1/datasets/create Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str) Update # PUT: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str) Partial update # PATCH: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Any of the following fields in the body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str) Clear # DELETE: /v1/datasets/{PK}/clear Parameters: PK: int (primary key of dataset) Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str) Notes: Removes meta-data and annotations from a dataset Delete # DELETE: /v1/datasets/{PK}[/hard] Parameters: PK: int (primary key of dataset) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate # DELETE: /v1/datasets/{PK}/reinstate Parameters: PK: int (primary key of dataset) Notes: Undeletes a previously soft-deleted dataset Copy # POST: /v1/datasets/{PK}/copy Parameters: PK: int (primary key of dataset) Body: new_name: str Merge # POST: /v1/datasets/{PK}/merge/{SOURCE_PK} Parameters: PK: int (primary key of dataset) SOURCE_PK: int (primary key of the dataset to merge into PK) Body: delete: bool hard: bool (optional, default: false) Add file # POST: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Byte array attachment is the binary content of the file. Get file # GET: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Returned byte array is the binary content of the file. Delete file # DELETE: /v1/datasets/{PK}/files/{NAME} Parameters: PK: the primary key of the dataset NAME: the name of the file to delete Set meta-data # POST: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Body: metadata: str (free form text meta-data) Get meta-data (for file) # GET: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returned string is the meta-data for the file. Get meta-data (for dataset) # GET: /v1/datasets/{PK}/metadata Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returns JSON with filename - meta-data string association.","title":"Core dataset"},{"location":"datasets/#fields","text":"Available fields: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str)","title":"Fields"},{"location":"datasets/#actions","text":"","title":"Actions"},{"location":"datasets/#list","text":"POST: /v1/datasets/list Body (optional): filter specification Response: array of name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str)","title":"List"},{"location":"datasets/#load","text":"GET: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Response: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str)","title":"Load"},{"location":"datasets/#add","text":"POST: /v1/datasets/create Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str)","title":"Add"},{"location":"datasets/#update","text":"PUT: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str)","title":"Update"},{"location":"datasets/#partial-update","text":"PATCH: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Any of the following fields in the body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str)","title":"Partial update"},{"location":"datasets/#clear","text":"DELETE: /v1/datasets/{PK}/clear Parameters: PK: int (primary key of dataset) Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files (object): file name (str): cache ID (str) Notes: Removes meta-data and annotations from a dataset","title":"Clear"},{"location":"datasets/#delete","text":"DELETE: /v1/datasets/{PK}[/hard] Parameters: PK: int (primary key of dataset) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"datasets/#reinstate","text":"DELETE: /v1/datasets/{PK}/reinstate Parameters: PK: int (primary key of dataset) Notes: Undeletes a previously soft-deleted dataset","title":"Reinstate"},{"location":"datasets/#copy","text":"POST: /v1/datasets/{PK}/copy Parameters: PK: int (primary key of dataset) Body: new_name: str","title":"Copy"},{"location":"datasets/#merge","text":"POST: /v1/datasets/{PK}/merge/{SOURCE_PK} Parameters: PK: int (primary key of dataset) SOURCE_PK: int (primary key of the dataset to merge into PK) Body: delete: bool hard: bool (optional, default: false)","title":"Merge"},{"location":"datasets/#add-file","text":"POST: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Byte array attachment is the binary content of the file.","title":"Add file"},{"location":"datasets/#get-file","text":"GET: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Returned byte array is the binary content of the file.","title":"Get file"},{"location":"datasets/#delete-file","text":"DELETE: /v1/datasets/{PK}/files/{NAME} Parameters: PK: the primary key of the dataset NAME: the name of the file to delete","title":"Delete file"},{"location":"datasets/#set-meta-data","text":"POST: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Body: metadata: str (free form text meta-data)","title":"Set meta-data"},{"location":"datasets/#get-meta-data-for-file","text":"GET: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returned string is the meta-data for the file.","title":"Get meta-data (for file)"},{"location":"datasets/#get-meta-data-for-dataset","text":"GET: /v1/datasets/{PK}/metadata Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returns JSON with filename - meta-data string association.","title":"Get meta-data (for dataset)"},{"location":"docker_images/","text":"Manages the docker images used by the worker nodes. Fields # pk: int (primary key of the Docker image) name: str version: str url: str registry_url: str (URL) registry_username: str or null (null if registry doesn't require login) registry_password: str or null (null if registry doesn't require login) cuda_version: JSON representation of the Docker image's CUDA version framework: JSON representation of the Docker image's framework domain: str (name of the domain the Docker image operates in) tasks: array of str (names of job-contracts that the Docker image can be used with e.g. Train/Predict/...) min_hardware_generation: JSON representation of the Docker image's minimum required hardware generation or null cpu: bool (works on CPU only?) licence: str (name of the Docker image's license ) Actions # List # Lists the Docker images present on the server. Method # POST URL # /v1/docker/list Permissions # user is authenticated Body (optional) # filter specification Response # A JSON array of objects containing each Docker image's fields Create # Creates a new Docker image. Method # POST URL # /v1/docker/create Body # name: str version: str url: str registry_url: str (URL) registry_username: str or null (null if registry doesn't require login) registry_password: str or null (null if registry doesn't require login) cuda_version: str ( CUDA version-string ) framework: int ( framework primary-key ) domain: str (name of the domain the Docker image operates in) tasks: array of str (names of job-contracts that the Docker image can be used with e.g. Train/Predict/...) min_hardware_generation: ( minimum required hardware generation-string ) or null cpu: bool (works on CPU only?) licence: str (name of the Docker image's license ) Permissions # user is admin Response # A JSON object containing the newly-created Docker image's fields Retrieve # Gets the information about a specific Docker image. Method # GET URL # /v1/docker/{PK} Parameters # PK : int (primary key of Docker image) Permissions # user is authenticated Response # A JSON object containing the Docker image's fields Update # Updates a specific Docker image. Method # PUT URL # /v1/docker/{PK} Parameters # PK : int (primary key of Docker image) Body # JSON object containing: name: str version: str url: str registry_url: str (URL) registry_username: str or null (null if registry doesn't require login) registry_password: str or null (null if registry doesn't require login) cuda_version: str ( CUDA version-string ) framework: int ( framework primary-key ) domain: str (name of the domain the Docker image operates in) tasks: array of str (names of job-contracts that the Docker image can be used with e.g. Train/Predict/...) min_hardware_generation: ( minimum required hardware generation-string ) or null cpu: bool (works on CPU only?) licence: str (name of the Docker image's license ) Permissions # user is admin Response # A JSON object containing the updated job's fields Partial Update # Updates a specific Docker image. Method # PATCH URL # /v1/docker/{PK} Parameters # PK : int (primary key of Docker image) Body # JSON object containing: name (optional): str version (optional): str url (optional): str registry_url (optional): str (URL) registry_username (optional): str or null (null if registry doesn't require login) registry_password (optional): str or null (null if registry doesn't require login) cuda_version (optional): str ( CUDA version-string ) framework (optional): int ( framework primary-key ) domain (optional): str (name of the domain the Docker image operates in) tasks (optional): array of str (names of job-contracts that the Docker image can be used with e.g. Train/Predict/...) min_hardware_generation (optional): ( minimum required hardware generation-string ) or null cpu (optional): bool (works on CPU only?) licence (optional): str (name of the Docker image's license ) Permissions # user is admin Response # A JSON object containing the updated Docker image's fields Destroy # Attempts to delete a Docker image from the server. The Docker image will only be deleted if no references are held to it by other models on the server. Method # DELETE URL # /v1/docker/{PK} Parameters # PK : int (primary key of job) Permissions # user is admin","title":"Docker images"},{"location":"docker_images/#fields","text":"pk: int (primary key of the Docker image) name: str version: str url: str registry_url: str (URL) registry_username: str or null (null if registry doesn't require login) registry_password: str or null (null if registry doesn't require login) cuda_version: JSON representation of the Docker image's CUDA version framework: JSON representation of the Docker image's framework domain: str (name of the domain the Docker image operates in) tasks: array of str (names of job-contracts that the Docker image can be used with e.g. Train/Predict/...) min_hardware_generation: JSON representation of the Docker image's minimum required hardware generation or null cpu: bool (works on CPU only?) licence: str (name of the Docker image's license )","title":"Fields"},{"location":"docker_images/#actions","text":"","title":"Actions"},{"location":"docker_images/#list","text":"Lists the Docker images present on the server.","title":"List"},{"location":"docker_images/#method","text":"POST","title":"Method"},{"location":"docker_images/#url","text":"/v1/docker/list","title":"URL"},{"location":"docker_images/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"docker_images/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"docker_images/#response","text":"A JSON array of objects containing each Docker image's fields","title":"Response"},{"location":"docker_images/#create","text":"Creates a new Docker image.","title":"Create"},{"location":"docker_images/#method_1","text":"POST","title":"Method"},{"location":"docker_images/#url_1","text":"/v1/docker/create","title":"URL"},{"location":"docker_images/#body","text":"name: str version: str url: str registry_url: str (URL) registry_username: str or null (null if registry doesn't require login) registry_password: str or null (null if registry doesn't require login) cuda_version: str ( CUDA version-string ) framework: int ( framework primary-key ) domain: str (name of the domain the Docker image operates in) tasks: array of str (names of job-contracts that the Docker image can be used with e.g. Train/Predict/...) min_hardware_generation: ( minimum required hardware generation-string ) or null cpu: bool (works on CPU only?) licence: str (name of the Docker image's license )","title":"Body"},{"location":"docker_images/#permissions_1","text":"user is admin","title":"Permissions"},{"location":"docker_images/#response_1","text":"A JSON object containing the newly-created Docker image's fields","title":"Response"},{"location":"docker_images/#retrieve","text":"Gets the information about a specific Docker image.","title":"Retrieve"},{"location":"docker_images/#method_2","text":"GET","title":"Method"},{"location":"docker_images/#url_2","text":"/v1/docker/{PK}","title":"URL"},{"location":"docker_images/#parameters","text":"PK : int (primary key of Docker image)","title":"Parameters"},{"location":"docker_images/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"docker_images/#response_2","text":"A JSON object containing the Docker image's fields","title":"Response"},{"location":"docker_images/#update","text":"Updates a specific Docker image.","title":"Update"},{"location":"docker_images/#method_3","text":"PUT","title":"Method"},{"location":"docker_images/#url_3","text":"/v1/docker/{PK}","title":"URL"},{"location":"docker_images/#parameters_1","text":"PK : int (primary key of Docker image)","title":"Parameters"},{"location":"docker_images/#body_1","text":"JSON object containing: name: str version: str url: str registry_url: str (URL) registry_username: str or null (null if registry doesn't require login) registry_password: str or null (null if registry doesn't require login) cuda_version: str ( CUDA version-string ) framework: int ( framework primary-key ) domain: str (name of the domain the Docker image operates in) tasks: array of str (names of job-contracts that the Docker image can be used with e.g. Train/Predict/...) min_hardware_generation: ( minimum required hardware generation-string ) or null cpu: bool (works on CPU only?) licence: str (name of the Docker image's license )","title":"Body"},{"location":"docker_images/#permissions_3","text":"user is admin","title":"Permissions"},{"location":"docker_images/#response_3","text":"A JSON object containing the updated job's fields","title":"Response"},{"location":"docker_images/#partial-update","text":"Updates a specific Docker image.","title":"Partial Update"},{"location":"docker_images/#method_4","text":"PATCH","title":"Method"},{"location":"docker_images/#url_4","text":"/v1/docker/{PK}","title":"URL"},{"location":"docker_images/#parameters_2","text":"PK : int (primary key of Docker image)","title":"Parameters"},{"location":"docker_images/#body_2","text":"JSON object containing: name (optional): str version (optional): str url (optional): str registry_url (optional): str (URL) registry_username (optional): str or null (null if registry doesn't require login) registry_password (optional): str or null (null if registry doesn't require login) cuda_version (optional): str ( CUDA version-string ) framework (optional): int ( framework primary-key ) domain (optional): str (name of the domain the Docker image operates in) tasks (optional): array of str (names of job-contracts that the Docker image can be used with e.g. Train/Predict/...) min_hardware_generation (optional): ( minimum required hardware generation-string ) or null cpu (optional): bool (works on CPU only?) licence (optional): str (name of the Docker image's license )","title":"Body"},{"location":"docker_images/#permissions_4","text":"user is admin","title":"Permissions"},{"location":"docker_images/#response_4","text":"A JSON object containing the updated Docker image's fields","title":"Response"},{"location":"docker_images/#destroy","text":"Attempts to delete a Docker image from the server. The Docker image will only be deleted if no references are held to it by other models on the server.","title":"Destroy"},{"location":"docker_images/#method_5","text":"DELETE","title":"Method"},{"location":"docker_images/#url_5","text":"/v1/docker/{PK}","title":"URL"},{"location":"docker_images/#parameters_3","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"docker_images/#permissions_5","text":"user is admin","title":"Permissions"},{"location":"domains/","text":"Centralized table with domains. Domains are automatically added to the database, depending on the available modules in the backend. Fields # pk: int name: str (2-letter short-code for the domain e.g. \"od\") description: str (Long-format name for the domain e.g. \"Object Detection\") Actions # List # Lists the domains present on the server. Method # POST URL # /v1/domains/list Permissions # user is authenticated Body (optional) # filter specification Response # A JSON array of objects containing each domain's fields Retrieve # Gets the information about a specific domain. Method # GET URL # /v1/domains/{PK} Parameters # PK : int (primary key of the domain) Permissions # user is authenticated Response # A JSON object containing the domain's fields","title":"Domains"},{"location":"domains/#fields","text":"pk: int name: str (2-letter short-code for the domain e.g. \"od\") description: str (Long-format name for the domain e.g. \"Object Detection\")","title":"Fields"},{"location":"domains/#actions","text":"","title":"Actions"},{"location":"domains/#list","text":"Lists the domains present on the server.","title":"List"},{"location":"domains/#method","text":"POST","title":"Method"},{"location":"domains/#url","text":"/v1/domains/list","title":"URL"},{"location":"domains/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"domains/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"domains/#response","text":"A JSON array of objects containing each domain's fields","title":"Response"},{"location":"domains/#retrieve","text":"Gets the information about a specific domain.","title":"Retrieve"},{"location":"domains/#method_1","text":"GET","title":"Method"},{"location":"domains/#url_1","text":"/v1/domains/{PK}","title":"URL"},{"location":"domains/#parameters","text":"PK : int (primary key of the domain)","title":"Parameters"},{"location":"domains/#permissions_1","text":"user is authenticated","title":"Permissions"},{"location":"domains/#response_1","text":"A JSON object containing the domain's fields","title":"Response"},{"location":"filtering/","text":"The API supports generic filtering, which is applied to the database backend. Whilst very flexible, this also requires the knowledge of the underlying database field names. Top-level # { \"expressions\": [ ... expressions ... ], \"order_by\": [ ... orderings ... ], \"include_inactive\": true/false } expressions is an array of expressions which filter the list. Each is applied in order, further filtering the result of the previous expressions. order_by is a list of orderings, in order of precedence. include_inactive is optional, and defaults to false if omitted. Otherwise it determines whether soft-deleted objects are included in the result. Expressions # The following expressions ( type ) are available: or - can contain and(s) and other expressions sub_expressions - the sub-expressions to combine via logical OR and - cannot contain or(s) but other expressions sub_expressions - the sub-expressions to combine via logical AND exact - for exact matching of bool/int/float/str field: str - the field to work on value: bool/int/float/str - the value to match case_insensitive: bool - for strings only invert: bool - whether invert the matching, i.e., logical NOT contains - for sub-string matching field: str - the field to work on sub_string: str - the sub-string to look for case_insensitive: bool - whether to ignore case when searching for the sub-string invert: bool - whether invert the matching, i.e., logical NOT is_null - checks for NULL values field: str - the field to work on invert: bool - whether invert the matching, i.e., logical NOT compare field: str - the field to work on operator: str - the comparison to perform (<, >, >=, <=) value: int/float/str - the value to compare against invert: bool - whether invert the comparison, i.e., logical NOT Order by # { \"field\": \"my_field\", \"ascending\": true/false, \"nulls_first\": true/false } field : str - the field to enforce the ordering on ascending : bool - ascending or (if false) descending nulls_first : bool (optional) - whether nulls are listed first or last, uses database default if omitted Example # The following filter searches for anyone with rob in their name (Robert, Robbie, etc.) who is not exactly 2m tall, unless their name is Robert, in which case they must be exactly 1.75m tall. Ignores the case of the names. Returns people in order of tallest to shortest, then alphabetically if their height is the same, and then by some mysterious third field for people with the same height and name. { \"expressions\": [ { \"sub_expressions\": [ { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"type\": \"exact\" }, { \"field\": \"height\", \"value\": 1.75, \"type\": \"exact\" } ], \"type\": \"and\" }, { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"invert\": true, \"type\": \"exact\" }, { \"field\": \"name\", \"sub_string\": \"rob\", \"case_insensitive\": true, \"type\": \"contains\" }, { \"field\": \"height\", \"value\": 2.0, \"invert\": true, \"type\": \"exact\" } ], \"type\": \"and\" } ], \"type\": \"or\" } ], \"order_by\": [ { \"field\": \"height\", \"ascending\": false }, { \"field\": \"name\" }, { \"field\": \"other\", \"nulls_first\": true } ], \"include_inactive\": false }","title":"Filtering"},{"location":"filtering/#top-level","text":"{ \"expressions\": [ ... expressions ... ], \"order_by\": [ ... orderings ... ], \"include_inactive\": true/false } expressions is an array of expressions which filter the list. Each is applied in order, further filtering the result of the previous expressions. order_by is a list of orderings, in order of precedence. include_inactive is optional, and defaults to false if omitted. Otherwise it determines whether soft-deleted objects are included in the result.","title":"Top-level"},{"location":"filtering/#expressions","text":"The following expressions ( type ) are available: or - can contain and(s) and other expressions sub_expressions - the sub-expressions to combine via logical OR and - cannot contain or(s) but other expressions sub_expressions - the sub-expressions to combine via logical AND exact - for exact matching of bool/int/float/str field: str - the field to work on value: bool/int/float/str - the value to match case_insensitive: bool - for strings only invert: bool - whether invert the matching, i.e., logical NOT contains - for sub-string matching field: str - the field to work on sub_string: str - the sub-string to look for case_insensitive: bool - whether to ignore case when searching for the sub-string invert: bool - whether invert the matching, i.e., logical NOT is_null - checks for NULL values field: str - the field to work on invert: bool - whether invert the matching, i.e., logical NOT compare field: str - the field to work on operator: str - the comparison to perform (<, >, >=, <=) value: int/float/str - the value to compare against invert: bool - whether invert the comparison, i.e., logical NOT","title":"Expressions"},{"location":"filtering/#order-by","text":"{ \"field\": \"my_field\", \"ascending\": true/false, \"nulls_first\": true/false } field : str - the field to enforce the ordering on ascending : bool - ascending or (if false) descending nulls_first : bool (optional) - whether nulls are listed first or last, uses database default if omitted","title":"Order by"},{"location":"filtering/#example","text":"The following filter searches for anyone with rob in their name (Robert, Robbie, etc.) who is not exactly 2m tall, unless their name is Robert, in which case they must be exactly 1.75m tall. Ignores the case of the names. Returns people in order of tallest to shortest, then alphabetically if their height is the same, and then by some mysterious third field for people with the same height and name. { \"expressions\": [ { \"sub_expressions\": [ { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"type\": \"exact\" }, { \"field\": \"height\", \"value\": 1.75, \"type\": \"exact\" } ], \"type\": \"and\" }, { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"invert\": true, \"type\": \"exact\" }, { \"field\": \"name\", \"sub_string\": \"rob\", \"case_insensitive\": true, \"type\": \"contains\" }, { \"field\": \"height\", \"value\": 2.0, \"invert\": true, \"type\": \"exact\" } ], \"type\": \"and\" } ], \"type\": \"or\" } ], \"order_by\": [ { \"field\": \"height\", \"ascending\": false }, { \"field\": \"name\" }, { \"field\": \"other\", \"nulls_first\": true } ], \"include_inactive\": false }","title":"Example"},{"location":"frameworks/","text":"Centralized table with frameworks and their versions (e.g., PyTorch 1.2). Fields # pk: int name: str version: str Actions # List # Lists the frameworks registered with the server. Method # POST URL # /v1/frameworks/list Body (optional) # filter specification Permissions # user is authenticated Response # array of pk: int (primary key of framework) name: str version: str Create # Adds a new framework to the server. Method # POST URL # /v1/frameworks/create Body # name: str version: str Permissions # user is an admin Response # pk: int (primary key of framework) name: str version: str Retrieve # Gets the information about a framework. Method # GET URL # /v1/frameworks/{PK} Parameters # PK : int (primary key of framework) Permissions # user is authenticated Response # pk: int (primary key of framework) name: str version: str Update # Modifies the details of a framework. Method # PUT URL # /v1/frameworks/{PK} Parameters # PK : int (primary key of framework) Body # name: str version: str Permissions # user is an admin Response # pk: int (primary key of framework) name: str version: str Partial update # Modifies a subset of the details of a framework. Method # PATCH URL # /v1/frameworks/{PK} Parameters # PK : int (primary key of framework) Body # name (optional): str version (optional): str Permissions # user is an admin Response # pk: int (primary key of framework) name: str version: str Destroy # Removes a framework from the server. Method # DELETE URL # /v1/frameworks/{PK} Parameters # PK : int (primary key of framework) Permissions # user is an admin","title":"Frameworks"},{"location":"frameworks/#fields","text":"pk: int name: str version: str","title":"Fields"},{"location":"frameworks/#actions","text":"","title":"Actions"},{"location":"frameworks/#list","text":"Lists the frameworks registered with the server.","title":"List"},{"location":"frameworks/#method","text":"POST","title":"Method"},{"location":"frameworks/#url","text":"/v1/frameworks/list","title":"URL"},{"location":"frameworks/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"frameworks/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"frameworks/#response","text":"array of pk: int (primary key of framework) name: str version: str","title":"Response"},{"location":"frameworks/#create","text":"Adds a new framework to the server.","title":"Create"},{"location":"frameworks/#method_1","text":"POST","title":"Method"},{"location":"frameworks/#url_1","text":"/v1/frameworks/create","title":"URL"},{"location":"frameworks/#body","text":"name: str version: str","title":"Body"},{"location":"frameworks/#permissions_1","text":"user is an admin","title":"Permissions"},{"location":"frameworks/#response_1","text":"pk: int (primary key of framework) name: str version: str","title":"Response"},{"location":"frameworks/#retrieve","text":"Gets the information about a framework.","title":"Retrieve"},{"location":"frameworks/#method_2","text":"GET","title":"Method"},{"location":"frameworks/#url_2","text":"/v1/frameworks/{PK}","title":"URL"},{"location":"frameworks/#parameters","text":"PK : int (primary key of framework)","title":"Parameters"},{"location":"frameworks/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"frameworks/#response_2","text":"pk: int (primary key of framework) name: str version: str","title":"Response"},{"location":"frameworks/#update","text":"Modifies the details of a framework.","title":"Update"},{"location":"frameworks/#method_3","text":"PUT","title":"Method"},{"location":"frameworks/#url_3","text":"/v1/frameworks/{PK}","title":"URL"},{"location":"frameworks/#parameters_1","text":"PK : int (primary key of framework)","title":"Parameters"},{"location":"frameworks/#body_1","text":"name: str version: str","title":"Body"},{"location":"frameworks/#permissions_3","text":"user is an admin","title":"Permissions"},{"location":"frameworks/#response_3","text":"pk: int (primary key of framework) name: str version: str","title":"Response"},{"location":"frameworks/#partial-update","text":"Modifies a subset of the details of a framework.","title":"Partial update"},{"location":"frameworks/#method_4","text":"PATCH","title":"Method"},{"location":"frameworks/#url_4","text":"/v1/frameworks/{PK}","title":"URL"},{"location":"frameworks/#parameters_2","text":"PK : int (primary key of framework)","title":"Parameters"},{"location":"frameworks/#body_2","text":"name (optional): str version (optional): str","title":"Body"},{"location":"frameworks/#permissions_4","text":"user is an admin","title":"Permissions"},{"location":"frameworks/#response_4","text":"pk: int (primary key of framework) name: str version: str","title":"Response"},{"location":"frameworks/#destroy","text":"Removes a framework from the server.","title":"Destroy"},{"location":"frameworks/#method_5","text":"DELETE","title":"Method"},{"location":"frameworks/#url_5","text":"/v1/frameworks/{PK}","title":"URL"},{"location":"frameworks/#parameters_3","text":"PK : int (primary key of framework)","title":"Parameters"},{"location":"frameworks/#permissions_5","text":"user is an admin","title":"Permissions"},{"location":"hardware/","text":"For defining the graphics card hardware generations. Links # CUDA/Hardware Fields # pk: int (primary key of hardware specification) generation: str min_compute_capability: float (inclusive) max_compute_capability: float (exclusive) Actions # List # Method # POST URL # /v1/hardware/list Body (optional) # filter specification Permissions # user is authenticated Response # array of pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Create # Method # POST URL # /v1/hardware/create Body # generation: str min_compute_capability: float (incl) max_compute_capability: float (excl) Permissions # user is an admin Response # pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Retrieve # Method # GET URL # /v1/hardware/{PK} Parameters # PK : int (primary key of hardware) Permissions # user is authenticated Response # pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Update # Method # PUT URL # /v1/hardware/{PK} Parameters # PK : int (primary key of hardware) Body # generation: str min_compute_capability: float max_compute_capability: float Permissions # user is an admin Response # pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Partial update # Method # PATCH URL # /v1/hardware/{PK} Parameters # PK : int (primary key of hardware) Body # generation (optional): str min_compute_capability (optional): float max_compute_capability (optional): float Permissions # user is an admin Response # pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Destroy # Method # DELETE URL # /v1/hardware/{PK} Parameters # PK : int (primary key of hardware) Permissions # user is an admin Get Hardware Generation # Method # GET URL # /v1/hardware/get-hardware-generation/{COMPUTE} Parameters # COMPUTE : float Permissions # user is authenticated Response # pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Hardware"},{"location":"hardware/#links","text":"CUDA/Hardware","title":"Links"},{"location":"hardware/#fields","text":"pk: int (primary key of hardware specification) generation: str min_compute_capability: float (inclusive) max_compute_capability: float (exclusive)","title":"Fields"},{"location":"hardware/#actions","text":"","title":"Actions"},{"location":"hardware/#list","text":"","title":"List"},{"location":"hardware/#method","text":"POST","title":"Method"},{"location":"hardware/#url","text":"/v1/hardware/list","title":"URL"},{"location":"hardware/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"hardware/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"hardware/#response","text":"array of pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#create","text":"","title":"Create"},{"location":"hardware/#method_1","text":"POST","title":"Method"},{"location":"hardware/#url_1","text":"/v1/hardware/create","title":"URL"},{"location":"hardware/#body","text":"generation: str min_compute_capability: float (incl) max_compute_capability: float (excl)","title":"Body"},{"location":"hardware/#permissions_1","text":"user is an admin","title":"Permissions"},{"location":"hardware/#response_1","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#retrieve","text":"","title":"Retrieve"},{"location":"hardware/#method_2","text":"GET","title":"Method"},{"location":"hardware/#url_2","text":"/v1/hardware/{PK}","title":"URL"},{"location":"hardware/#parameters","text":"PK : int (primary key of hardware)","title":"Parameters"},{"location":"hardware/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"hardware/#response_2","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#update","text":"","title":"Update"},{"location":"hardware/#method_3","text":"PUT","title":"Method"},{"location":"hardware/#url_3","text":"/v1/hardware/{PK}","title":"URL"},{"location":"hardware/#parameters_1","text":"PK : int (primary key of hardware)","title":"Parameters"},{"location":"hardware/#body_1","text":"generation: str min_compute_capability: float max_compute_capability: float","title":"Body"},{"location":"hardware/#permissions_3","text":"user is an admin","title":"Permissions"},{"location":"hardware/#response_3","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#partial-update","text":"","title":"Partial update"},{"location":"hardware/#method_4","text":"PATCH","title":"Method"},{"location":"hardware/#url_4","text":"/v1/hardware/{PK}","title":"URL"},{"location":"hardware/#parameters_2","text":"PK : int (primary key of hardware)","title":"Parameters"},{"location":"hardware/#body_2","text":"generation (optional): str min_compute_capability (optional): float max_compute_capability (optional): float","title":"Body"},{"location":"hardware/#permissions_4","text":"user is an admin","title":"Permissions"},{"location":"hardware/#response_4","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#destroy","text":"","title":"Destroy"},{"location":"hardware/#method_5","text":"DELETE","title":"Method"},{"location":"hardware/#url_5","text":"/v1/hardware/{PK}","title":"URL"},{"location":"hardware/#parameters_3","text":"PK : int (primary key of hardware)","title":"Parameters"},{"location":"hardware/#permissions_5","text":"user is an admin","title":"Permissions"},{"location":"hardware/#get-hardware-generation","text":"","title":"Get Hardware Generation"},{"location":"hardware/#method_6","text":"GET","title":"Method"},{"location":"hardware/#url_6","text":"/v1/hardware/get-hardware-generation/{COMPUTE}","title":"URL"},{"location":"hardware/#parameters_4","text":"COMPUTE : float","title":"Parameters"},{"location":"hardware/#permissions_6","text":"user is authenticated","title":"Permissions"},{"location":"hardware/#response_5","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"image_classification/","text":"Additional image classification dataset operations. For core dataset operations, see here . URL # Uses /v1/classify/datasets/ instead of /v1/datasets/ , also for the core operations. Actions # Add categories # PATCH: /v1/classify/datasets/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images Get categories # GET: /v1/classify/datasets/{PK}/categories Parameters: PK: int (primary key of dataset) Response: for each image name an array of category strings Remove categories # PATCH: /v1/classify/datasets/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"remove\" images: array of image names categories: array of category strings to remove from all specified images","title":"Image classification"},{"location":"image_classification/#url","text":"Uses /v1/classify/datasets/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"image_classification/#actions","text":"","title":"Actions"},{"location":"image_classification/#add-categories","text":"PATCH: /v1/classify/datasets/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images","title":"Add categories"},{"location":"image_classification/#get-categories","text":"GET: /v1/classify/datasets/{PK}/categories Parameters: PK: int (primary key of dataset) Response: for each image name an array of category strings","title":"Get categories"},{"location":"image_classification/#remove-categories","text":"PATCH: /v1/classify/datasets/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"remove\" images: array of image names categories: array of category strings to remove from all specified images","title":"Remove categories"},{"location":"image_segmentation/","text":"Additional image segmentation dataset operations. For core dataset operations, see here . NB: labels = layer names URL # Uses /v1/segments/datasets/ instead of /v1/datasets/ , also for the core operations. Actions # Set labels # Must be invoked after creating a new dataset to allow the upload of layer masks. POST: /v1/segments/datasets/{PK}/labels Parameters: PK: int (primary key of dataset) Body: labels: array of labels Get labels # GET: /v1/segments/datasets/{PK}/labels Parameters: PK: int (primary key of dataset) Response: array of labels Set layer # Uploads a layer mask for an image. POST: /v1/segments/datasets/{PK}/layers/{image}/{label} Parameters: PK: int (primary key of dataset) image: the name of the image to upload the mask for label: the name of the layer Body: the layer mask as file attachment Get layer # Downloads a layer mask of an image (may not exist). GET: /v1/segments/datasets/{PK}/layers/{image}/{label} Parameters: PK: int (primary key of dataset) image: the name of the image to upload the mask for label: the name of the layer Response: byte array representing the mask file (0-length if layer not present)","title":"Image segmentation"},{"location":"image_segmentation/#url","text":"Uses /v1/segments/datasets/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"image_segmentation/#actions","text":"","title":"Actions"},{"location":"image_segmentation/#set-labels","text":"Must be invoked after creating a new dataset to allow the upload of layer masks. POST: /v1/segments/datasets/{PK}/labels Parameters: PK: int (primary key of dataset) Body: labels: array of labels","title":"Set labels"},{"location":"image_segmentation/#get-labels","text":"GET: /v1/segments/datasets/{PK}/labels Parameters: PK: int (primary key of dataset) Response: array of labels","title":"Get labels"},{"location":"image_segmentation/#set-layer","text":"Uploads a layer mask for an image. POST: /v1/segments/datasets/{PK}/layers/{image}/{label} Parameters: PK: int (primary key of dataset) image: the name of the image to upload the mask for label: the name of the layer Body: the layer mask as file attachment","title":"Set layer"},{"location":"image_segmentation/#get-layer","text":"Downloads a layer mask of an image (may not exist). GET: /v1/segments/datasets/{PK}/layers/{image}/{label} Parameters: PK: int (primary key of dataset) image: the name of the image to upload the mask for label: the name of the layer Response: byte array representing the mask file (0-length if layer not present)","title":"Get layer"},{"location":"inputs/","text":"Manages the inputs of a job-template. Fields # pk: int (primary key of input) template: job template ID name: str types: str options: str help: str Actions # None #","title":"Inputs"},{"location":"inputs/#fields","text":"pk: int (primary key of input) template: job template ID name: str types: str options: str help: str","title":"Fields"},{"location":"inputs/#actions","text":"","title":"Actions"},{"location":"inputs/#none","text":"","title":"None"},{"location":"job_contracts/","text":"Manages the job contracts. Job-contracts are a specification of a generic interface that a job-template can fulfill. This allows the server to group/search job-templates that perform similar functions. A contract can be parametrised by a set of types, and specifies which inputs a job-template must take (including their types), and which outputs it must produce (again, including type), to meet the contract. The types of the inputs/outputs can be specified generically, so a job-template can say that it fulfills a contract in relation to the type-parametrisation of the contract. E.g. A training contract which trains a model on a dataset: contract Train<Domain, Framework> { execute(dataset: PK<Dataset<Domain>>) -> Model<Domain, Framework>; } This contract specifies how job-templates that are designed to train models should appear. A job-template can train a model in a particular domain , using a particular framework , and in order to do so, must be passed the primary-key of a dataset in the given domain , and must produce a model for the given domain/framework . Job-templates which meet this contract can also take in additional parameters, and produce additional outputs, but this contract specifies the minimum requirements necessary to qualify the job-template as training a model . Similar to job-types , job-contracts are specified as Python classes. The information kept by the server is meta-data about where to find the Python class that defines the contract. Fields # pk: int (primary key of job contract) name: str (the name used to refer to the contract on the server) pkg: str (the Python package exporting the job-contract's class definition) cls: str (the fully-qualified path to the class which implements the job-contract as exported from pkg ) Actions # List # Lists the job contracts registered with the server. Method # POST URL # /v1/job-contracts/list Body (optional) # filter specification Permissions # user is authenticated Response # A JSON array of objects containing each job-contract's fields Create # Creates a new job contract. Method # POST URL # /v1/job-contracts/create Body # name: str (the name used to refer to the contract on the server) pkg: str (the Python package exporting the job-contract's class definition) cls: str (the fully-qualified path to the class which implements the job-contract as exported from pkg ) Permissions # user is an admin Response # A JSON object containing the newly-created job-contract's fields Retrieve # Gets the representation of a job contract. Method # GET URL # /v1/job-contracts/{PK} Parameters # PK : int (primary key of job contract) Permissions # user is authenticated Response # A JSON object containing the job-contract's fields Update # Updates the fields of the job contract. Method # PUT URL # /v1/job-contracts/{PK} Parameters # PK : int (primary key of job contract) Body # name: str (the name used to refer to the contract on the server) pkg: str (the Python package exporting the job-contract's class definition) cls: str (the fully-qualified path to the class which implements the job-contract as exported from pkg ) Permissions # user is an admin Response # A JSON object containing the updated job-contract's fields Partial Update # Updates a selection of fields on the job contract. Method # PATCH URL # /v1/job-contracts/{PK} Parameters # PK : int (primary key of job contract) Body # name (optional): str (the name used to refer to the contract on the server) pkg (optional): str (the Python package exporting the job-contract's class definition) cls (optional): str (the fully-qualified path to the class which implements the job-contract as exported from pkg ) Permissions # user is an admin Response # A JSON object containing the updated job-contract's fields Destroy # Attempts to delete a job-contract from the system. Only succeeds if no other models are referencing the job contract. Method # DELETE URL # /v1/job-contracts/{PK} Parameters # PK : int (primary key of job contract) Permissions # user is an admin","title":"Job contracts"},{"location":"job_contracts/#fields","text":"pk: int (primary key of job contract) name: str (the name used to refer to the contract on the server) pkg: str (the Python package exporting the job-contract's class definition) cls: str (the fully-qualified path to the class which implements the job-contract as exported from pkg )","title":"Fields"},{"location":"job_contracts/#actions","text":"","title":"Actions"},{"location":"job_contracts/#list","text":"Lists the job contracts registered with the server.","title":"List"},{"location":"job_contracts/#method","text":"POST","title":"Method"},{"location":"job_contracts/#url","text":"/v1/job-contracts/list","title":"URL"},{"location":"job_contracts/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"job_contracts/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"job_contracts/#response","text":"A JSON array of objects containing each job-contract's fields","title":"Response"},{"location":"job_contracts/#create","text":"Creates a new job contract.","title":"Create"},{"location":"job_contracts/#method_1","text":"POST","title":"Method"},{"location":"job_contracts/#url_1","text":"/v1/job-contracts/create","title":"URL"},{"location":"job_contracts/#body","text":"name: str (the name used to refer to the contract on the server) pkg: str (the Python package exporting the job-contract's class definition) cls: str (the fully-qualified path to the class which implements the job-contract as exported from pkg )","title":"Body"},{"location":"job_contracts/#permissions_1","text":"user is an admin","title":"Permissions"},{"location":"job_contracts/#response_1","text":"A JSON object containing the newly-created job-contract's fields","title":"Response"},{"location":"job_contracts/#retrieve","text":"Gets the representation of a job contract.","title":"Retrieve"},{"location":"job_contracts/#method_2","text":"GET","title":"Method"},{"location":"job_contracts/#url_2","text":"/v1/job-contracts/{PK}","title":"URL"},{"location":"job_contracts/#parameters","text":"PK : int (primary key of job contract)","title":"Parameters"},{"location":"job_contracts/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"job_contracts/#response_2","text":"A JSON object containing the job-contract's fields","title":"Response"},{"location":"job_contracts/#update","text":"Updates the fields of the job contract.","title":"Update"},{"location":"job_contracts/#method_3","text":"PUT","title":"Method"},{"location":"job_contracts/#url_3","text":"/v1/job-contracts/{PK}","title":"URL"},{"location":"job_contracts/#parameters_1","text":"PK : int (primary key of job contract)","title":"Parameters"},{"location":"job_contracts/#body_1","text":"name: str (the name used to refer to the contract on the server) pkg: str (the Python package exporting the job-contract's class definition) cls: str (the fully-qualified path to the class which implements the job-contract as exported from pkg )","title":"Body"},{"location":"job_contracts/#permissions_3","text":"user is an admin","title":"Permissions"},{"location":"job_contracts/#response_3","text":"A JSON object containing the updated job-contract's fields","title":"Response"},{"location":"job_contracts/#partial-update","text":"Updates a selection of fields on the job contract.","title":"Partial Update"},{"location":"job_contracts/#method_4","text":"PATCH","title":"Method"},{"location":"job_contracts/#url_4","text":"/v1/job-contracts/{PK}","title":"URL"},{"location":"job_contracts/#parameters_2","text":"PK : int (primary key of job contract)","title":"Parameters"},{"location":"job_contracts/#body_2","text":"name (optional): str (the name used to refer to the contract on the server) pkg (optional): str (the Python package exporting the job-contract's class definition) cls (optional): str (the fully-qualified path to the class which implements the job-contract as exported from pkg )","title":"Body"},{"location":"job_contracts/#permissions_4","text":"user is an admin","title":"Permissions"},{"location":"job_contracts/#response_4","text":"A JSON object containing the updated job-contract's fields","title":"Response"},{"location":"job_contracts/#destroy","text":"Attempts to delete a job-contract from the system. Only succeeds if no other models are referencing the job contract.","title":"Destroy"},{"location":"job_contracts/#method_5","text":"DELETE","title":"Method"},{"location":"job_contracts/#url_5","text":"/v1/job-contracts/{PK}","title":"URL"},{"location":"job_contracts/#parameters_3","text":"PK : int (primary key of job contract)","title":"Parameters"},{"location":"job_contracts/#permissions_5","text":"user is an admin","title":"Permissions"},{"location":"job_outputs/","text":"Manages the output data attached to jobs. Each job, as a result of its execution, may upload one or more outputs to the server. N.B. The standard CREATE action is disallowed for job-outputs. Outputs are instead added to job via the add-output action on jobs . Fields # pk: int (primary key of job output) job: int (primary key of job that this output is attached to) name: str (the name given to the job output) type: str (the type of the output) creator: int or null (primary key of the user that created the output) creation_time: timestamp (the date-time that the output was created) deletion_time: timestamp or null (the date-time that the output was soft-deleted, or null if still active) Actions # List # Lists all job-outputs that match a given set of filters. Method # POST URL # /v1/job-outputs/list Body (optional) # filter specification Permissions # user is authenticated Response # A JSON array of objects containing each job-output's fields Retrieve # Gets the information about a specific job output. Can also be performed by name/type from the associated job . Method # GET URL # /v1/job-outputs/{PK} Parameters # PK : int (primary key of job output) Permissions # user is authenticated Response # A JSON object containing the job-output's fields Destroy # Soft-deletes a job-output. Method # DELETE URL # /v1/job-outputs/{PK} Parameters # PK : int (primary key of job output) Permissions # user is an admin Hard Delete # Hard-deletes a job-output. Method # DELETE URL # /v1/job-outputs/{PK}/hard Parameters # PK : int (primary key of job output) Permissions # user is an admin Response # A JSON object containing the hard-deleted job-output's fields Reinstate # Reinstates a previously soft-deleted job-output. Method # DELETE URL # /v1/job-outputs/{PK}/reinstate Parameters # PK : int (primary key of job output) Permissions # user is an admin Response # A JSON object containing the reinstated job-output's fields Download # Downloads the data for a job output. Can also be performed by name/type from the associated job . Method # POST URL # /v1/job-outputs/{PK}/download Parameters # PK : int (primary key of job output) Body (optional) # A JSON object containing: filetype: str (overrides the default file extension given to the output's filename) Permissions # user is authenticated Response # Binary content of the output.","title":"Job outputs"},{"location":"job_outputs/#fields","text":"pk: int (primary key of job output) job: int (primary key of job that this output is attached to) name: str (the name given to the job output) type: str (the type of the output) creator: int or null (primary key of the user that created the output) creation_time: timestamp (the date-time that the output was created) deletion_time: timestamp or null (the date-time that the output was soft-deleted, or null if still active)","title":"Fields"},{"location":"job_outputs/#actions","text":"","title":"Actions"},{"location":"job_outputs/#list","text":"Lists all job-outputs that match a given set of filters.","title":"List"},{"location":"job_outputs/#method","text":"POST","title":"Method"},{"location":"job_outputs/#url","text":"/v1/job-outputs/list","title":"URL"},{"location":"job_outputs/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"job_outputs/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"job_outputs/#response","text":"A JSON array of objects containing each job-output's fields","title":"Response"},{"location":"job_outputs/#retrieve","text":"Gets the information about a specific job output. Can also be performed by name/type from the associated job .","title":"Retrieve"},{"location":"job_outputs/#method_1","text":"GET","title":"Method"},{"location":"job_outputs/#url_1","text":"/v1/job-outputs/{PK}","title":"URL"},{"location":"job_outputs/#parameters","text":"PK : int (primary key of job output)","title":"Parameters"},{"location":"job_outputs/#permissions_1","text":"user is authenticated","title":"Permissions"},{"location":"job_outputs/#response_1","text":"A JSON object containing the job-output's fields","title":"Response"},{"location":"job_outputs/#destroy","text":"Soft-deletes a job-output.","title":"Destroy"},{"location":"job_outputs/#method_2","text":"DELETE","title":"Method"},{"location":"job_outputs/#url_2","text":"/v1/job-outputs/{PK}","title":"URL"},{"location":"job_outputs/#parameters_1","text":"PK : int (primary key of job output)","title":"Parameters"},{"location":"job_outputs/#permissions_2","text":"user is an admin","title":"Permissions"},{"location":"job_outputs/#hard-delete","text":"Hard-deletes a job-output.","title":"Hard Delete"},{"location":"job_outputs/#method_3","text":"DELETE","title":"Method"},{"location":"job_outputs/#url_3","text":"/v1/job-outputs/{PK}/hard","title":"URL"},{"location":"job_outputs/#parameters_2","text":"PK : int (primary key of job output)","title":"Parameters"},{"location":"job_outputs/#permissions_3","text":"user is an admin","title":"Permissions"},{"location":"job_outputs/#response_2","text":"A JSON object containing the hard-deleted job-output's fields","title":"Response"},{"location":"job_outputs/#reinstate","text":"Reinstates a previously soft-deleted job-output.","title":"Reinstate"},{"location":"job_outputs/#method_4","text":"DELETE","title":"Method"},{"location":"job_outputs/#url_4","text":"/v1/job-outputs/{PK}/reinstate","title":"URL"},{"location":"job_outputs/#parameters_3","text":"PK : int (primary key of job output)","title":"Parameters"},{"location":"job_outputs/#permissions_4","text":"user is an admin","title":"Permissions"},{"location":"job_outputs/#response_3","text":"A JSON object containing the reinstated job-output's fields","title":"Response"},{"location":"job_outputs/#download","text":"Downloads the data for a job output. Can also be performed by name/type from the associated job .","title":"Download"},{"location":"job_outputs/#method_5","text":"POST","title":"Method"},{"location":"job_outputs/#url_5","text":"/v1/job-outputs/{PK}/download","title":"URL"},{"location":"job_outputs/#parameters_4","text":"PK : int (primary key of job output)","title":"Parameters"},{"location":"job_outputs/#body-optional_1","text":"A JSON object containing: filetype: str (overrides the default file extension given to the output's filename)","title":"Body (optional)"},{"location":"job_outputs/#permissions_5","text":"user is authenticated","title":"Permissions"},{"location":"job_outputs/#response_4","text":"Binary content of the output.","title":"Response"},{"location":"job_templates/","text":"Manages the job templates. Job-templates come in one of two varieties: workable templates and meta-templates. Workable templates specify an executor , which is a Python class which implements the functionality that jobs created from a template will perform. Meta-templates specify a graph of other templates to enact, and how to connect the outputs from prior jobs to subsequent jobs. This allows for re-using templates to create higher-order jobs. Fields # pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str (the name of the domain that this template operates in) licence: int (the primary-key of this job-template's licence ) creator: int or null (primary key of the user that created the output) creation_time: timestamp (the date-time that the output was created) deletion_time: timestamp or null (the date-time that the output was soft-deleted, or null if still active) If the job-template is a workable template, also included are: type: str (the contract that this template fulfills) executor_class: str (the fully-qualified path to the executor class for this template) required_packages: str (space-separated list of packages to install to use the executor class) parameters: JSON-object from parameter-names to objects containing: types: array of str (the types of value that this parameter can take) help: str (help text describing the parameter) default (optional): JSON (value that is used for this parameter if no value is provided) default_type (optional): str (the type of the default value) const (optional): bool (whether the parameter value is fixed) Actions # List # Method # POST URL # /v1/job-templates/list Body (optional) # filter specification Permissions # user is authenticated Response # A JSON array of objects containing each job-template's fields Retrieve # Method # GET URL # /v1/job-templates/{PK} Parameters # PK : int (primary key of job template) Permissions # user is authenticated Response # A JSON object containing the job-output's fields Destroy # Flags a job template as deleted, it can be reinstated . To permanently delete, see Hard Delete . Method # DELETE URL # /v1/job-templates/{PK} Parameters # PK : int (primary key of job template) Permissions # user is an admin Create Job # Method # POST URL # /v1/job-templates/{PK}/create-job Parameters # PK : int (primary key of job template) Body # input_values: object mapping input names to objects containing: value: JSON (the value to give the input) type: str (the type to interpret the input value as) parameter_values (optional): object mapping parameter names to objects containing: value: JSON (the value to give the parameter) type: str (the type to interpret the parameter value as) description (optional): str (a free-text description of why the job was executed) notification_override (optional): object containing: actions: object containing: on_acquire (optional): array of notifications on_release (optional): array of notifications on_start (optional): array of notifications on_progress (optional): array of notifications on_finish (optional): array of notifications on_error (optional): array of notifications on_reset (optional): array of notifications on_abort (optional): array of notifications on_cancel (optional): array of notifications keep_default (optional): bool (true to append the given notifications to the default, or false to remove the defaults) child_notification_overrides (optional): map of child template name to: actions: object containing: on_acquire (optional): array of notifications on_release (optional): array of notifications on_start (optional): array of notifications on_progress (optional): array of notifications on_finish (optional): array of notifications on_error (optional): array of notifications on_reset (optional): array of notifications on_abort (optional): array of notifications on_cancel (optional): array of notifications keep_default (optional): bool (true to append the given notifications to the default, or false to remove the defaults) Permissions # user is authenticated Response # A JSON object containing the created job's fields Hard Delete # Permanently deletes the job template. For soft-deletion, see Destroy . METHOD # DELETE URL # /v1/job-templates/{PK}/hard Parameters # PK : int (primary key of job template) Permissions # user is admin Response # A JSON object containing the hard-deleted job-template's fields Reinstate # Undeletes a previously soft-deleted job template. Method # DELETE URL # /v1/job-templates/{PK}/reinstate Parameters # PK : int (primary key of job template) Permissions # user is admin Response # A JSON object containing the reinstated job-template's fields Import Template # Method # POST URL # /v1/job-templates/import Body # JSON representation of job template ( example ) Permissions # user is admin Response # A JSON object containing the imported job-template's fields Export Template # Method # GET URL # /v1/job-templates/{PK}/export Parameters # PK : int (primary key of job template) Permissions # user is admin Response # JSON representation of job template ( example ) Get All Matching Templates # Gets a list of all templates which implement a job-contract with inputs of specific types. Method # GET URL # /v1/job-templates/get-all-matching-templates/{CONTRACT}?{INPUT_NAME}={INPUT_TYPE}&... Parameters # CONTRACT : int (primary key of job template) INPUT_NAME : str (the name of an input to filter by type) INPUT_TYPE : str (the type that the input should be able to take) Permissions # user is authenticated Response # A JSON array of objects containing all matching job-templates' fields Get All Parameters # Gets a list of the parameters to a job-template. Method # GET URL # /v1/job-templates/{PK}/get-all-parameters Parameters # PK : int (primary key of job template) Permissions # user is authenticated Response # A JSON object from the job-template's parameter names to objects containing: types: object (types the parameter can take to the JSON schema for that type) help: str (a description of the parameter) value (optional): JSON (the default value of the parameter) type (optional): str (the type of the default value) schema (optional): JSON (the JSON schema for the default type) const (optional): bool (whether the parameter's value is fixed) Get Types # Gets the type-parametrisation of a job-template's contract . Method # GET URL # /v1/job-templates/{PK}/get-types Parameters # PK : int (primary key of job template) Permissions # user is authenticated Response # A JSON object from the job-template's generic type-parameter names to the type that the job-template specifies for that type-parameter. Get Outputs # Gets the types of a job-template's outputs . Method # GET URL # /v1/job-templates/{PK}/get-outputs Parameters # PK : int (primary key of job template) Permissions # user is authenticated Response # A JSON object from the job-template's contractual output names to the type that the job-template specifies for that output.","title":"Job templates"},{"location":"job_templates/#fields","text":"pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str (the name of the domain that this template operates in) licence: int (the primary-key of this job-template's licence ) creator: int or null (primary key of the user that created the output) creation_time: timestamp (the date-time that the output was created) deletion_time: timestamp or null (the date-time that the output was soft-deleted, or null if still active) If the job-template is a workable template, also included are: type: str (the contract that this template fulfills) executor_class: str (the fully-qualified path to the executor class for this template) required_packages: str (space-separated list of packages to install to use the executor class) parameters: JSON-object from parameter-names to objects containing: types: array of str (the types of value that this parameter can take) help: str (help text describing the parameter) default (optional): JSON (value that is used for this parameter if no value is provided) default_type (optional): str (the type of the default value) const (optional): bool (whether the parameter value is fixed)","title":"Fields"},{"location":"job_templates/#actions","text":"","title":"Actions"},{"location":"job_templates/#list","text":"","title":"List"},{"location":"job_templates/#method","text":"POST","title":"Method"},{"location":"job_templates/#url","text":"/v1/job-templates/list","title":"URL"},{"location":"job_templates/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"job_templates/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response","text":"A JSON array of objects containing each job-template's fields","title":"Response"},{"location":"job_templates/#retrieve","text":"","title":"Retrieve"},{"location":"job_templates/#method_1","text":"GET","title":"Method"},{"location":"job_templates/#url_1","text":"/v1/job-templates/{PK}","title":"URL"},{"location":"job_templates/#parameters","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_1","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response_1","text":"A JSON object containing the job-output's fields","title":"Response"},{"location":"job_templates/#destroy","text":"Flags a job template as deleted, it can be reinstated . To permanently delete, see Hard Delete .","title":"Destroy"},{"location":"job_templates/#method_2","text":"DELETE","title":"Method"},{"location":"job_templates/#url_2","text":"/v1/job-templates/{PK}","title":"URL"},{"location":"job_templates/#parameters_1","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_2","text":"user is an admin","title":"Permissions"},{"location":"job_templates/#create-job","text":"","title":"Create Job"},{"location":"job_templates/#method_3","text":"POST","title":"Method"},{"location":"job_templates/#url_3","text":"/v1/job-templates/{PK}/create-job","title":"URL"},{"location":"job_templates/#parameters_2","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#body","text":"input_values: object mapping input names to objects containing: value: JSON (the value to give the input) type: str (the type to interpret the input value as) parameter_values (optional): object mapping parameter names to objects containing: value: JSON (the value to give the parameter) type: str (the type to interpret the parameter value as) description (optional): str (a free-text description of why the job was executed) notification_override (optional): object containing: actions: object containing: on_acquire (optional): array of notifications on_release (optional): array of notifications on_start (optional): array of notifications on_progress (optional): array of notifications on_finish (optional): array of notifications on_error (optional): array of notifications on_reset (optional): array of notifications on_abort (optional): array of notifications on_cancel (optional): array of notifications keep_default (optional): bool (true to append the given notifications to the default, or false to remove the defaults) child_notification_overrides (optional): map of child template name to: actions: object containing: on_acquire (optional): array of notifications on_release (optional): array of notifications on_start (optional): array of notifications on_progress (optional): array of notifications on_finish (optional): array of notifications on_error (optional): array of notifications on_reset (optional): array of notifications on_abort (optional): array of notifications on_cancel (optional): array of notifications keep_default (optional): bool (true to append the given notifications to the default, or false to remove the defaults)","title":"Body"},{"location":"job_templates/#permissions_3","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response_2","text":"A JSON object containing the created job's fields","title":"Response"},{"location":"job_templates/#hard-delete","text":"Permanently deletes the job template. For soft-deletion, see Destroy .","title":"Hard Delete"},{"location":"job_templates/#method_4","text":"DELETE","title":"METHOD"},{"location":"job_templates/#url_4","text":"/v1/job-templates/{PK}/hard","title":"URL"},{"location":"job_templates/#parameters_3","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_4","text":"user is admin","title":"Permissions"},{"location":"job_templates/#response_3","text":"A JSON object containing the hard-deleted job-template's fields","title":"Response"},{"location":"job_templates/#reinstate","text":"Undeletes a previously soft-deleted job template.","title":"Reinstate"},{"location":"job_templates/#method_5","text":"DELETE","title":"Method"},{"location":"job_templates/#url_5","text":"/v1/job-templates/{PK}/reinstate","title":"URL"},{"location":"job_templates/#parameters_4","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_5","text":"user is admin","title":"Permissions"},{"location":"job_templates/#response_4","text":"A JSON object containing the reinstated job-template's fields","title":"Response"},{"location":"job_templates/#import-template","text":"","title":"Import Template"},{"location":"job_templates/#method_6","text":"POST","title":"Method"},{"location":"job_templates/#url_6","text":"/v1/job-templates/import","title":"URL"},{"location":"job_templates/#body_1","text":"JSON representation of job template ( example )","title":"Body"},{"location":"job_templates/#permissions_6","text":"user is admin","title":"Permissions"},{"location":"job_templates/#response_5","text":"A JSON object containing the imported job-template's fields","title":"Response"},{"location":"job_templates/#export-template","text":"","title":"Export Template"},{"location":"job_templates/#method_7","text":"GET","title":"Method"},{"location":"job_templates/#url_7","text":"/v1/job-templates/{PK}/export","title":"URL"},{"location":"job_templates/#parameters_5","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_7","text":"user is admin","title":"Permissions"},{"location":"job_templates/#response_6","text":"JSON representation of job template ( example )","title":"Response"},{"location":"job_templates/#get-all-matching-templates","text":"Gets a list of all templates which implement a job-contract with inputs of specific types.","title":"Get All Matching Templates"},{"location":"job_templates/#method_8","text":"GET","title":"Method"},{"location":"job_templates/#url_8","text":"/v1/job-templates/get-all-matching-templates/{CONTRACT}?{INPUT_NAME}={INPUT_TYPE}&...","title":"URL"},{"location":"job_templates/#parameters_6","text":"CONTRACT : int (primary key of job template) INPUT_NAME : str (the name of an input to filter by type) INPUT_TYPE : str (the type that the input should be able to take)","title":"Parameters"},{"location":"job_templates/#permissions_8","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response_7","text":"A JSON array of objects containing all matching job-templates' fields","title":"Response"},{"location":"job_templates/#get-all-parameters","text":"Gets a list of the parameters to a job-template.","title":"Get All Parameters"},{"location":"job_templates/#method_9","text":"GET","title":"Method"},{"location":"job_templates/#url_9","text":"/v1/job-templates/{PK}/get-all-parameters","title":"URL"},{"location":"job_templates/#parameters_7","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_9","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response_8","text":"A JSON object from the job-template's parameter names to objects containing: types: object (types the parameter can take to the JSON schema for that type) help: str (a description of the parameter) value (optional): JSON (the default value of the parameter) type (optional): str (the type of the default value) schema (optional): JSON (the JSON schema for the default type) const (optional): bool (whether the parameter's value is fixed)","title":"Response"},{"location":"job_templates/#get-types","text":"Gets the type-parametrisation of a job-template's contract .","title":"Get Types"},{"location":"job_templates/#method_10","text":"GET","title":"Method"},{"location":"job_templates/#url_10","text":"/v1/job-templates/{PK}/get-types","title":"URL"},{"location":"job_templates/#parameters_8","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_10","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response_9","text":"A JSON object from the job-template's generic type-parameter names to the type that the job-template specifies for that type-parameter.","title":"Response"},{"location":"job_templates/#get-outputs","text":"Gets the types of a job-template's outputs .","title":"Get Outputs"},{"location":"job_templates/#method_11","text":"GET","title":"Method"},{"location":"job_templates/#url_11","text":"/v1/job-templates/{PK}/get-outputs","title":"URL"},{"location":"job_templates/#parameters_9","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_11","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response_10","text":"A JSON object from the job-template's contractual output names to the type that the job-template specifies for that output.","title":"Response"},{"location":"job_types/","text":"Manages the job types. Job-types are Python classes that know how to serialise/deserialise/specify values to a job's inputs/outputs/parameters. The information kept by the server is meta-data about where to find those classes. Fields # pk: int (primary key of job type) name: str (the name used to refer to the type on the server) pkg: str (the Python package exporting the job-type's class definition) cls: str (the fully-qualified path to the class which implements the job-type as exported from pkg ) Actions # List # Lists the job types registered with the server. Method # POST URL # /v1/job-types/list Body (optional) # filter specification Permissions # user is authenticated Response # A JSON array of objects containing each job-type's fields Create # Creates a new job type. Method # POST URL # /v1/job-types/create Body # name: str (the name used to refer to the type on the server) pkg: str (the Python package exporting the job-type's class definition) cls: str (the fully-qualified path to the class which implements the job-type as exported from pkg ) Permissions # user is an admin Response # A JSON object containing the newly-created job-type's fields Retrieve # Gets the representation of the job type. Method # GET URL # /v1/job-types/{PK} Parameters # PK : int (primary key of job type) Permissions # user is authenticated Response # A JSON object containing the job-type's fields Update # Updates the fields of the job type. Method # PUT URL # /v1/job-types/{PK} Parameters # PK : int (primary key of job type) Body # name: str (the name used to refer to the type on the server) pkg: str (the Python package exporting the job-type's class definition) cls: str (the fully-qualified path to the class which implements the job-type as exported from pkg ) Permissions # user is an admin Response # A JSON object containing the updated job-type's fields Partial Update # Updates a selection of fields on the job type. Method # PATCH URL # /v1/job-types/{PK} Parameters # PK : int (primary key of job type) Body # name (optional): str (the name used to refer to the type on the server) pkg (optional): str (the Python package exporting the job-type's class definition) cls (optional): str (the fully-qualified path to the class which implements the job-type as exported from pkg ) Permissions # user is an admin Response # A JSON object containing the updated job-type's fields Destroy # Attempts to delete a job-type from the system. Only succeeds if no other models are referencing the job type. Method # DELETE URL # /v1/job-types/{PK} Parameters # PK : int (primary key of job type) Permissions # user is an admin Get All Values Of Type # Gets all values of a server-resident job-type held by the server. Method # GET URL # /v1/job-types/get-all-values/{TYPE} Parameters # TYPE : str (the server-resident type to get values of) Permissions # user is authenticated Response # array of JSON-representations of resident objects, exact fields depends on TYPE .","title":"Job types"},{"location":"job_types/#fields","text":"pk: int (primary key of job type) name: str (the name used to refer to the type on the server) pkg: str (the Python package exporting the job-type's class definition) cls: str (the fully-qualified path to the class which implements the job-type as exported from pkg )","title":"Fields"},{"location":"job_types/#actions","text":"","title":"Actions"},{"location":"job_types/#list","text":"Lists the job types registered with the server.","title":"List"},{"location":"job_types/#method","text":"POST","title":"Method"},{"location":"job_types/#url","text":"/v1/job-types/list","title":"URL"},{"location":"job_types/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"job_types/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"job_types/#response","text":"A JSON array of objects containing each job-type's fields","title":"Response"},{"location":"job_types/#create","text":"Creates a new job type.","title":"Create"},{"location":"job_types/#method_1","text":"POST","title":"Method"},{"location":"job_types/#url_1","text":"/v1/job-types/create","title":"URL"},{"location":"job_types/#body","text":"name: str (the name used to refer to the type on the server) pkg: str (the Python package exporting the job-type's class definition) cls: str (the fully-qualified path to the class which implements the job-type as exported from pkg )","title":"Body"},{"location":"job_types/#permissions_1","text":"user is an admin","title":"Permissions"},{"location":"job_types/#response_1","text":"A JSON object containing the newly-created job-type's fields","title":"Response"},{"location":"job_types/#retrieve","text":"Gets the representation of the job type.","title":"Retrieve"},{"location":"job_types/#method_2","text":"GET","title":"Method"},{"location":"job_types/#url_2","text":"/v1/job-types/{PK}","title":"URL"},{"location":"job_types/#parameters","text":"PK : int (primary key of job type)","title":"Parameters"},{"location":"job_types/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"job_types/#response_2","text":"A JSON object containing the job-type's fields","title":"Response"},{"location":"job_types/#update","text":"Updates the fields of the job type.","title":"Update"},{"location":"job_types/#method_3","text":"PUT","title":"Method"},{"location":"job_types/#url_3","text":"/v1/job-types/{PK}","title":"URL"},{"location":"job_types/#parameters_1","text":"PK : int (primary key of job type)","title":"Parameters"},{"location":"job_types/#body_1","text":"name: str (the name used to refer to the type on the server) pkg: str (the Python package exporting the job-type's class definition) cls: str (the fully-qualified path to the class which implements the job-type as exported from pkg )","title":"Body"},{"location":"job_types/#permissions_3","text":"user is an admin","title":"Permissions"},{"location":"job_types/#response_3","text":"A JSON object containing the updated job-type's fields","title":"Response"},{"location":"job_types/#partial-update","text":"Updates a selection of fields on the job type.","title":"Partial Update"},{"location":"job_types/#method_4","text":"PATCH","title":"Method"},{"location":"job_types/#url_4","text":"/v1/job-types/{PK}","title":"URL"},{"location":"job_types/#parameters_2","text":"PK : int (primary key of job type)","title":"Parameters"},{"location":"job_types/#body_2","text":"name (optional): str (the name used to refer to the type on the server) pkg (optional): str (the Python package exporting the job-type's class definition) cls (optional): str (the fully-qualified path to the class which implements the job-type as exported from pkg )","title":"Body"},{"location":"job_types/#permissions_4","text":"user is an admin","title":"Permissions"},{"location":"job_types/#response_4","text":"A JSON object containing the updated job-type's fields","title":"Response"},{"location":"job_types/#destroy","text":"Attempts to delete a job-type from the system. Only succeeds if no other models are referencing the job type.","title":"Destroy"},{"location":"job_types/#method_5","text":"DELETE","title":"Method"},{"location":"job_types/#url_5","text":"/v1/job-types/{PK}","title":"URL"},{"location":"job_types/#parameters_3","text":"PK : int (primary key of job type)","title":"Parameters"},{"location":"job_types/#permissions_5","text":"user is an admin","title":"Permissions"},{"location":"job_types/#get-all-values-of-type","text":"Gets all values of a server-resident job-type held by the server.","title":"Get All Values Of Type"},{"location":"job_types/#method_6","text":"GET","title":"Method"},{"location":"job_types/#url_6","text":"/v1/job-types/get-all-values/{TYPE}","title":"URL"},{"location":"job_types/#parameters_4","text":"TYPE : str (the server-resident type to get values of)","title":"Parameters"},{"location":"job_types/#permissions_6","text":"user is authenticated","title":"Permissions"},{"location":"job_types/#response_5","text":"array of JSON-representations of resident objects, exact fields depends on TYPE .","title":"Response"},{"location":"jobs/","text":"Manages the generated jobs. Fields # pk: int (primary key of job) template: JSON object containing: pk: job template ID (primary-key of the job-template this job was created from) name: str (the name of the job-template) version: int (the version of the job-template) parent: int or null (primary key of parent job, or null if job has no parent) start_time: timestamp or null (time the job was started, or null if not yet started) end_time: timestamp or null (time the job was finished, or null if not yet finished) error_reason: str or null (the reason the job failed, or null if it hasn't failed) input_values: JSON object from input names to: value: JSON (the JSON representation of the input value) type: str (the string representation of the input value's type ) parameter_values: null or JSON object from parameter names to: value: JSON (the JSON representation of the parameter value) type: str (the string representation of the parameter value's type ) node: node ID or null (the node performing the job, or null if no node has acquired it yet) description: str (a description of the purpose of the job) outputs: JSON array of: pk: int (the primary-key of the job-output ) name: str (the name of the output) type: str (the type of the output) is_cancelled: bool (whether the job has been cancelled) creator: int or null (primary key of the user that created the output) creation_time: timestamp (the date-time that the output was created) deletion_time: timestamp or null (the date-time that the output was soft-deleted, or null if still active) Actions # List # Lists the jobs present on the server. Method # POST URL # /v1/jobs/list Permissions # user is authenticated Body (optional) # filter specification Response # A JSON array of objects containing each job's fields Retrieve # Gets the information about a specific job. Method # GET URL # /v1/jobs/{PK} Parameters # PK : int (primary key of job) Permissions # user is authenticated Response # A JSON object containing the job's fields Update # Updates the description of a specific job. Method # PUT URL # /v1/jobs/{PK} Parameters # PK : int (primary key of job) Body # JSON object containing: description: str (the new description for the job) Permissions # user is admin Response # A JSON object containing the updated job's fields Partial Update # Updates the description of a specific job. Method # PATCH URL # /v1/jobs/{PK} Parameters # PK : int (primary key of job) Body # JSON object containing: description: str (the new description for the job) Permissions # user is admin Response # A JSON object containing the updated job's fields Destroy # Flags a job as deleted, it can be reinstated . To permanently delete, see Hard Delete . Method # DELETE URL # /v1/jobs/{PK} Parameters # PK : int (primary key of job) Permissions # user is admin Add Output # Adds an output (with data) to a job. Method # POST URL # /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters # PK : the primary key of the job NAME : the name of the output to add TYPE : the type of the output to add Body # Binary content of the output. Permissions # Either of user is an admin node has acquired the job Response # JSON object containing the fields of the added job-output. Delete Output # Removes an output from a job. Method # DELETE URL # /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters # PK : the primary key of the job NAME : the name of the output to delete TYPE : the type of the output to delete Permissions # user is admin Response # JSON object containing the fields of the deleted job-output. Get Output # Downloads the output data of a job output. Method # GET URL # /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters # PK : the primary key of the job NAME : the name of the output to retrieve TYPE : the type of the output to retrieve Permissions # user is authenticated Response # Binary content of the output. Get Output Info # Gets the meta-data of a job output. Method # GET URL # /v1/jobs/{PK}/outputs/{NAME}/{TYPE}/info Parameters # PK : the primary key of the job NAME : the name of the output to delete TYPE : the type of the output to delete Permissions # user is authenticated Response # JSON object containing the fields of the job-output. Acquire Job # Allows a node to reserve a job for exclusive access (so it can enact the job). Method # GET URL # /v1/jobs/{PK}/acquire Parameters # PK : int (primary key of job) Permissions # Both: accessed by a node ; and job is not a meta-job Response # JSON object containing the fields of the acquired job. Release Job # Allows a node to give up its reservation of a job (e.g. if it realises it cannot complete the job). Method # DELETE URL # /v1/jobs/{PK}/release Parameters # PK : int (primary key of job) Permissions # Either: the node has acquired the job ; or it thinks it has Response # JSON object containing the fields of the released job. Start Job # Allows a node to indicate that it has begun work on a job. Method # POST URL # /v1/jobs/{PK}/start Parameters # PK : int (primary key of job) Body # JSON object containing: send_notification: str (currently unused) Permissions # the node has acquired the job Response # JSON object containing the fields of the started job. Progress Job # Allows a node to update interested parties that some progress has been made on the completion of a job. Method # POST URL # /v1/jobs/{PK}/progress/{PROGRESS} Parameters # PK : int (primary key of job) PROGRESS : float (percent completed, between 0.0 and 1.0 inclusive) Body # Any JSON object can be attached to this action, and it will be forwarded to any watchers of the job. Permissions # the node has acquired the job Response # JSON object containing the fields of the updated job. Finish Job # Allows a node to indicate that it has completed work on a job (either successfully or in-error). Method # POST URL # /v1/jobs/{PK}/finish Parameters # PK : int (primary key of job) Body # JSON object containing: success: bool (currently unused) send_notification: str (currently unused) error (optional): str (if present, the error that prevented the job from completing successfully; if absent, job completed successfully) Permissions # Either: the node has acquired the job ; or it thinks it has Response # JSON object containing the fields of the finished job. Reset Job # Allows a node to reset a job to its initial state so that it can be re-attempted. Method # DELETE URL # /v1/jobs/{PK}/reset Parameters # PK : int (primary key of job) Permissions # the node has acquired the job Response # JSON object containing the fields of the reset job. Abort Job # Allows a job to be reset to its initial state in case it is locked by a node that has gone offline. Method # DELETE URL # /v1/jobs/{PK}/abort Parameters # PK : int (primary key of job) Permissions # user is an admin Response # JSON object containing the fields of the aborted job. Cancel Job # Allows a user to cancel a job, if they no longer require the results of that job. Method # DELETE URL # /v1/jobs/{PK}/cancel Parameters # PK : int (primary key of job) Permissions # user is an admin Response # JSON object containing the fields of the cancelled job. Hard Delete # Permanently deletes the job. For soft-deletion, see Destroy . METHOD # DELETE URL # /v1/jobs/{PK}/hard Parameters # PK : int (primary key of job) Permissions # user is admin Response # JSON object containing the fields of the hard-deleted job. Reinstate # Undeletes a previously soft-deleted job. Method # DELETE URL # /v1/jobs/{PK}/reinstate Parameters # PK : int (primary key of job) Permissions # user is admin Response # JSON object containing the fields of the reinstated job. Connect To Job # The UFDL server also provides the ability to receive notifications about a job's progress via web-socket. Method # WEB SOCKET URL # /v1/jobs/{PK} Parameters # PK : int (primary key of job) Permissions # N/A","title":"Jobs"},{"location":"jobs/#fields","text":"pk: int (primary key of job) template: JSON object containing: pk: job template ID (primary-key of the job-template this job was created from) name: str (the name of the job-template) version: int (the version of the job-template) parent: int or null (primary key of parent job, or null if job has no parent) start_time: timestamp or null (time the job was started, or null if not yet started) end_time: timestamp or null (time the job was finished, or null if not yet finished) error_reason: str or null (the reason the job failed, or null if it hasn't failed) input_values: JSON object from input names to: value: JSON (the JSON representation of the input value) type: str (the string representation of the input value's type ) parameter_values: null or JSON object from parameter names to: value: JSON (the JSON representation of the parameter value) type: str (the string representation of the parameter value's type ) node: node ID or null (the node performing the job, or null if no node has acquired it yet) description: str (a description of the purpose of the job) outputs: JSON array of: pk: int (the primary-key of the job-output ) name: str (the name of the output) type: str (the type of the output) is_cancelled: bool (whether the job has been cancelled) creator: int or null (primary key of the user that created the output) creation_time: timestamp (the date-time that the output was created) deletion_time: timestamp or null (the date-time that the output was soft-deleted, or null if still active)","title":"Fields"},{"location":"jobs/#actions","text":"","title":"Actions"},{"location":"jobs/#list","text":"Lists the jobs present on the server.","title":"List"},{"location":"jobs/#method","text":"POST","title":"Method"},{"location":"jobs/#url","text":"/v1/jobs/list","title":"URL"},{"location":"jobs/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"jobs/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"jobs/#response","text":"A JSON array of objects containing each job's fields","title":"Response"},{"location":"jobs/#retrieve","text":"Gets the information about a specific job.","title":"Retrieve"},{"location":"jobs/#method_1","text":"GET","title":"Method"},{"location":"jobs/#url_1","text":"/v1/jobs/{PK}","title":"URL"},{"location":"jobs/#parameters","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_1","text":"user is authenticated","title":"Permissions"},{"location":"jobs/#response_1","text":"A JSON object containing the job's fields","title":"Response"},{"location":"jobs/#update","text":"Updates the description of a specific job.","title":"Update"},{"location":"jobs/#method_2","text":"PUT","title":"Method"},{"location":"jobs/#url_2","text":"/v1/jobs/{PK}","title":"URL"},{"location":"jobs/#parameters_1","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#body","text":"JSON object containing: description: str (the new description for the job)","title":"Body"},{"location":"jobs/#permissions_2","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_2","text":"A JSON object containing the updated job's fields","title":"Response"},{"location":"jobs/#partial-update","text":"Updates the description of a specific job.","title":"Partial Update"},{"location":"jobs/#method_3","text":"PATCH","title":"Method"},{"location":"jobs/#url_3","text":"/v1/jobs/{PK}","title":"URL"},{"location":"jobs/#parameters_2","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#body_1","text":"JSON object containing: description: str (the new description for the job)","title":"Body"},{"location":"jobs/#permissions_3","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_3","text":"A JSON object containing the updated job's fields","title":"Response"},{"location":"jobs/#destroy","text":"Flags a job as deleted, it can be reinstated . To permanently delete, see Hard Delete .","title":"Destroy"},{"location":"jobs/#method_4","text":"DELETE","title":"Method"},{"location":"jobs/#url_4","text":"/v1/jobs/{PK}","title":"URL"},{"location":"jobs/#parameters_3","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_4","text":"user is admin","title":"Permissions"},{"location":"jobs/#add-output","text":"Adds an output (with data) to a job.","title":"Add Output"},{"location":"jobs/#method_5","text":"POST","title":"Method"},{"location":"jobs/#url_5","text":"/v1/jobs/{PK}/outputs/{NAME}/{TYPE}","title":"URL"},{"location":"jobs/#parameters_4","text":"PK : the primary key of the job NAME : the name of the output to add TYPE : the type of the output to add","title":"Parameters"},{"location":"jobs/#body_2","text":"Binary content of the output.","title":"Body"},{"location":"jobs/#permissions_5","text":"Either of user is an admin node has acquired the job","title":"Permissions"},{"location":"jobs/#response_4","text":"JSON object containing the fields of the added job-output.","title":"Response"},{"location":"jobs/#delete-output","text":"Removes an output from a job.","title":"Delete Output"},{"location":"jobs/#method_6","text":"DELETE","title":"Method"},{"location":"jobs/#url_6","text":"/v1/jobs/{PK}/outputs/{NAME}/{TYPE}","title":"URL"},{"location":"jobs/#parameters_5","text":"PK : the primary key of the job NAME : the name of the output to delete TYPE : the type of the output to delete","title":"Parameters"},{"location":"jobs/#permissions_6","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_5","text":"JSON object containing the fields of the deleted job-output.","title":"Response"},{"location":"jobs/#get-output","text":"Downloads the output data of a job output.","title":"Get Output"},{"location":"jobs/#method_7","text":"GET","title":"Method"},{"location":"jobs/#url_7","text":"/v1/jobs/{PK}/outputs/{NAME}/{TYPE}","title":"URL"},{"location":"jobs/#parameters_6","text":"PK : the primary key of the job NAME : the name of the output to retrieve TYPE : the type of the output to retrieve","title":"Parameters"},{"location":"jobs/#permissions_7","text":"user is authenticated","title":"Permissions"},{"location":"jobs/#response_6","text":"Binary content of the output.","title":"Response"},{"location":"jobs/#get-output-info","text":"Gets the meta-data of a job output.","title":"Get Output Info"},{"location":"jobs/#method_8","text":"GET","title":"Method"},{"location":"jobs/#url_8","text":"/v1/jobs/{PK}/outputs/{NAME}/{TYPE}/info","title":"URL"},{"location":"jobs/#parameters_7","text":"PK : the primary key of the job NAME : the name of the output to delete TYPE : the type of the output to delete","title":"Parameters"},{"location":"jobs/#permissions_8","text":"user is authenticated","title":"Permissions"},{"location":"jobs/#response_7","text":"JSON object containing the fields of the job-output.","title":"Response"},{"location":"jobs/#acquire-job","text":"Allows a node to reserve a job for exclusive access (so it can enact the job).","title":"Acquire Job"},{"location":"jobs/#method_9","text":"GET","title":"Method"},{"location":"jobs/#url_9","text":"/v1/jobs/{PK}/acquire","title":"URL"},{"location":"jobs/#parameters_8","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_9","text":"Both: accessed by a node ; and job is not a meta-job","title":"Permissions"},{"location":"jobs/#response_8","text":"JSON object containing the fields of the acquired job.","title":"Response"},{"location":"jobs/#release-job","text":"Allows a node to give up its reservation of a job (e.g. if it realises it cannot complete the job).","title":"Release Job"},{"location":"jobs/#method_10","text":"DELETE","title":"Method"},{"location":"jobs/#url_10","text":"/v1/jobs/{PK}/release","title":"URL"},{"location":"jobs/#parameters_9","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_10","text":"Either: the node has acquired the job ; or it thinks it has","title":"Permissions"},{"location":"jobs/#response_9","text":"JSON object containing the fields of the released job.","title":"Response"},{"location":"jobs/#start-job","text":"Allows a node to indicate that it has begun work on a job.","title":"Start Job"},{"location":"jobs/#method_11","text":"POST","title":"Method"},{"location":"jobs/#url_11","text":"/v1/jobs/{PK}/start","title":"URL"},{"location":"jobs/#parameters_10","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#body_3","text":"JSON object containing: send_notification: str (currently unused)","title":"Body"},{"location":"jobs/#permissions_11","text":"the node has acquired the job","title":"Permissions"},{"location":"jobs/#response_10","text":"JSON object containing the fields of the started job.","title":"Response"},{"location":"jobs/#progress-job","text":"Allows a node to update interested parties that some progress has been made on the completion of a job.","title":"Progress Job"},{"location":"jobs/#method_12","text":"POST","title":"Method"},{"location":"jobs/#url_12","text":"/v1/jobs/{PK}/progress/{PROGRESS}","title":"URL"},{"location":"jobs/#parameters_11","text":"PK : int (primary key of job) PROGRESS : float (percent completed, between 0.0 and 1.0 inclusive)","title":"Parameters"},{"location":"jobs/#body_4","text":"Any JSON object can be attached to this action, and it will be forwarded to any watchers of the job.","title":"Body"},{"location":"jobs/#permissions_12","text":"the node has acquired the job","title":"Permissions"},{"location":"jobs/#response_11","text":"JSON object containing the fields of the updated job.","title":"Response"},{"location":"jobs/#finish-job","text":"Allows a node to indicate that it has completed work on a job (either successfully or in-error).","title":"Finish Job"},{"location":"jobs/#method_13","text":"POST","title":"Method"},{"location":"jobs/#url_13","text":"/v1/jobs/{PK}/finish","title":"URL"},{"location":"jobs/#parameters_12","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#body_5","text":"JSON object containing: success: bool (currently unused) send_notification: str (currently unused) error (optional): str (if present, the error that prevented the job from completing successfully; if absent, job completed successfully)","title":"Body"},{"location":"jobs/#permissions_13","text":"Either: the node has acquired the job ; or it thinks it has","title":"Permissions"},{"location":"jobs/#response_12","text":"JSON object containing the fields of the finished job.","title":"Response"},{"location":"jobs/#reset-job","text":"Allows a node to reset a job to its initial state so that it can be re-attempted.","title":"Reset Job"},{"location":"jobs/#method_14","text":"DELETE","title":"Method"},{"location":"jobs/#url_14","text":"/v1/jobs/{PK}/reset","title":"URL"},{"location":"jobs/#parameters_13","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_14","text":"the node has acquired the job","title":"Permissions"},{"location":"jobs/#response_13","text":"JSON object containing the fields of the reset job.","title":"Response"},{"location":"jobs/#abort-job","text":"Allows a job to be reset to its initial state in case it is locked by a node that has gone offline.","title":"Abort Job"},{"location":"jobs/#method_15","text":"DELETE","title":"Method"},{"location":"jobs/#url_15","text":"/v1/jobs/{PK}/abort","title":"URL"},{"location":"jobs/#parameters_14","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_15","text":"user is an admin","title":"Permissions"},{"location":"jobs/#response_14","text":"JSON object containing the fields of the aborted job.","title":"Response"},{"location":"jobs/#cancel-job","text":"Allows a user to cancel a job, if they no longer require the results of that job.","title":"Cancel Job"},{"location":"jobs/#method_16","text":"DELETE","title":"Method"},{"location":"jobs/#url_16","text":"/v1/jobs/{PK}/cancel","title":"URL"},{"location":"jobs/#parameters_15","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_16","text":"user is an admin","title":"Permissions"},{"location":"jobs/#response_15","text":"JSON object containing the fields of the cancelled job.","title":"Response"},{"location":"jobs/#hard-delete","text":"Permanently deletes the job. For soft-deletion, see Destroy .","title":"Hard Delete"},{"location":"jobs/#method_17","text":"DELETE","title":"METHOD"},{"location":"jobs/#url_17","text":"/v1/jobs/{PK}/hard","title":"URL"},{"location":"jobs/#parameters_16","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_17","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_16","text":"JSON object containing the fields of the hard-deleted job.","title":"Response"},{"location":"jobs/#reinstate","text":"Undeletes a previously soft-deleted job.","title":"Reinstate"},{"location":"jobs/#method_18","text":"DELETE","title":"Method"},{"location":"jobs/#url_18","text":"/v1/jobs/{PK}/reinstate","title":"URL"},{"location":"jobs/#parameters_17","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_18","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_17","text":"JSON object containing the fields of the reinstated job.","title":"Response"},{"location":"jobs/#connect-to-job","text":"The UFDL server also provides the ability to receive notifications about a job's progress via web-socket.","title":"Connect To Job"},{"location":"jobs/#method_19","text":"WEB SOCKET","title":"Method"},{"location":"jobs/#url_19","text":"/v1/jobs/{PK}","title":"URL"},{"location":"jobs/#parameters_18","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_19","text":"N/A","title":"Permissions"},{"location":"licenses/","text":"Gives access to the available licenses on the server. Fields # Available fields: name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Actions # List # POST: /v1/licences/list Body (optional): filter specification Response: array of pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Load # GET: /v1/licences/{PK} Parameters: PK: int (primary key of license) Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Add # POST: /v1/licences/create Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Update # PUT: /v1/licences/{PK} Parameters: PK: int (primary key of license) Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Partial update # PATCH: /v1/licences/{PK} Parameters: PK: int (primary key of license) Any of the following fields in the body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Modify domains/permissions/limitations/conditions # PATCH: /v1/licences/{PK}/subdescriptors Parameters: PK: int (primary key of license) Body: method: str (add/remove) type: str (domains/permissions/limitations/conditions) names: array of str Delete # DELETE: /v1/licences/{PK} Parameters: PK: int (primary key of license)","title":"Licenses"},{"location":"licenses/#fields","text":"Available fields: name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Fields"},{"location":"licenses/#actions","text":"","title":"Actions"},{"location":"licenses/#list","text":"POST: /v1/licences/list Body (optional): filter specification Response: array of pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"List"},{"location":"licenses/#load","text":"GET: /v1/licences/{PK} Parameters: PK: int (primary key of license) Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Load"},{"location":"licenses/#add","text":"POST: /v1/licences/create Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Add"},{"location":"licenses/#update","text":"PUT: /v1/licences/{PK} Parameters: PK: int (primary key of license) Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Update"},{"location":"licenses/#partial-update","text":"PATCH: /v1/licences/{PK} Parameters: PK: int (primary key of license) Any of the following fields in the body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Partial update"},{"location":"licenses/#modify-domainspermissionslimitationsconditions","text":"PATCH: /v1/licences/{PK}/subdescriptors Parameters: PK: int (primary key of license) Body: method: str (add/remove) type: str (domains/permissions/limitations/conditions) names: array of str","title":"Modify domains/permissions/limitations/conditions"},{"location":"licenses/#delete","text":"DELETE: /v1/licences/{PK} Parameters: PK: int (primary key of license)","title":"Delete"},{"location":"meta_template_child_relations/","text":"Manages the relationship between a meta-template and its child templates. Fields # pk: int (primary key of the relation) parent: meta-template child: job template name: str dependents: set of meta-template dependencies dependencies: set of meta-template dependencies Actions # None #","title":"Meta template child relations"},{"location":"meta_template_child_relations/#fields","text":"pk: int (primary key of the relation) parent: meta-template child: job template name: str dependents: set of meta-template dependencies dependencies: set of meta-template dependencies","title":"Fields"},{"location":"meta_template_child_relations/#actions","text":"","title":"Actions"},{"location":"meta_template_child_relations/#none","text":"","title":"None"},{"location":"meta_template_dependencies/","text":"Manages the connection between an output and an input of children of a meta-template. Fields # pk: int (primary key of the relation) dependency: meta-template child relation output: str dependent: meta-template child relation input: input Actions # None #","title":"Meta template dependencies"},{"location":"meta_template_dependencies/#fields","text":"pk: int (primary key of the relation) dependency: meta-template child relation output: str dependent: meta-template child relation input: input","title":"Fields"},{"location":"meta_template_dependencies/#actions","text":"","title":"Actions"},{"location":"meta_template_dependencies/#none","text":"","title":"None"},{"location":"meta_templates/","text":"Manages the workable job templates. Fields # pk: int (primary key of meta-template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null child_relations: set of meta-template child relations Actions # None #","title":"Meta templates"},{"location":"meta_templates/#fields","text":"pk: int (primary key of meta-template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null child_relations: set of meta-template child relations","title":"Fields"},{"location":"meta_templates/#actions","text":"","title":"Actions"},{"location":"meta_templates/#none","text":"","title":"None"},{"location":"models/","text":"Manages models. Fields # pk: int (primary key of the model) framework: JSON object (containing the framework fields ) domain: str ( domain name ) licence: str ( licence name ) data: bool (whether the model's data is available) creator: int or null (primary key of the user that created the model) creation_time: timestamp (the date-time that the model was created) deletion_time: timestamp or null (the date-time that the model was soft-deleted, or null if still active) Actions # List # Lists the models present on the server. Method # POST URL # /v1/models/list Permissions # user is authenticated Body (optional) # filter specification Response # A JSON array of objects containing each model's fields Create # Creates a new model. Method # POST URL # /v1/models/create Body # framework: int (primary key of the framework that built the model) domain: str ( domain name ) licence: str ( licence name ) Permissions # user is admin Response # A JSON object containing the newly-created model's fields Retrieve # Gets the information about a specific model. Method # GET URL # /v1/models/{PK} Parameters # PK : int (primary key of model) Permissions # user is authenticated Response # A JSON object containing the model's fields Update # Updates the description of a specific model. Method # PUT URL # /v1/models/{PK} Parameters # PK : int (primary key of model) Body # framework: int (primary key of the framework that built the model) domain: str ( domain name ) licence: str ( licence name ) Permissions # user is admin Response # A JSON object containing the updated model's fields Partial Update # Updates the description of a specific model. Method # PATCH URL # /v1/models/{PK} Parameters # PK : int (primary key of model) Body # framework (optional): int (primary key of the framework that built the model) domain (optional): str ( domain name ) licence (optional): str ( licence name ) Permissions # user is admin Response # A JSON object containing the updated model's fields Destroy # Flags a model as deleted, it can be reinstated . To permanently delete, see Hard Delete . Method # DELETE URL # /v1/models/{PK} Parameters # PK : int (primary key of model) Permissions # user is admin Set File # Sets the model's binary data. Method # POST URL # /v1/models/{PK}/data Parameters # PK : int (primary key of model) Body # Binary data to set as the model's file-data. Permissions # user is admin Response # A JSON object containing the updated model's fields Delete File # Deletes the model's binary data. Method # DELETE URL # /v1/models/{PK}/data Parameters # PK : int (primary key of model) Permissions # user is admin Response # A JSON object containing the updated model's fields Download # Downloads the model's binary data. Method # POST URL # /v1/models/{PK}/download Parameters # PK : int (primary key of model) Body # params (optional): JSON Object with string/arrays of strings as values (ignored) filetype (optional): str (if present, must be \"data\") Permissions # user is authenticated Response # The model's binary data (filename is set to \"model.data\") Hard Delete # Permanently deletes the model. For soft-deletion, see Destroy . METHOD # DELETE URL # /v1/models/{PK}/hard Parameters # PK : int (primary key of model) Permissions # user is admin Response # JSON object containing the fields of the hard-deleted model. Reinstate # Undeletes a previously soft-deleted model. Method # DELETE URL # /v1/models/{PK}/reinstate Parameters # PK : int (primary key of model) Permissions # user is admin Response # JSON object containing the fields of the reinstated model.","title":"Models"},{"location":"models/#fields","text":"pk: int (primary key of the model) framework: JSON object (containing the framework fields ) domain: str ( domain name ) licence: str ( licence name ) data: bool (whether the model's data is available) creator: int or null (primary key of the user that created the model) creation_time: timestamp (the date-time that the model was created) deletion_time: timestamp or null (the date-time that the model was soft-deleted, or null if still active)","title":"Fields"},{"location":"models/#actions","text":"","title":"Actions"},{"location":"models/#list","text":"Lists the models present on the server.","title":"List"},{"location":"models/#method","text":"POST","title":"Method"},{"location":"models/#url","text":"/v1/models/list","title":"URL"},{"location":"models/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"models/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"models/#response","text":"A JSON array of objects containing each model's fields","title":"Response"},{"location":"models/#create","text":"Creates a new model.","title":"Create"},{"location":"models/#method_1","text":"POST","title":"Method"},{"location":"models/#url_1","text":"/v1/models/create","title":"URL"},{"location":"models/#body","text":"framework: int (primary key of the framework that built the model) domain: str ( domain name ) licence: str ( licence name )","title":"Body"},{"location":"models/#permissions_1","text":"user is admin","title":"Permissions"},{"location":"models/#response_1","text":"A JSON object containing the newly-created model's fields","title":"Response"},{"location":"models/#retrieve","text":"Gets the information about a specific model.","title":"Retrieve"},{"location":"models/#method_2","text":"GET","title":"Method"},{"location":"models/#url_2","text":"/v1/models/{PK}","title":"URL"},{"location":"models/#parameters","text":"PK : int (primary key of model)","title":"Parameters"},{"location":"models/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"models/#response_2","text":"A JSON object containing the model's fields","title":"Response"},{"location":"models/#update","text":"Updates the description of a specific model.","title":"Update"},{"location":"models/#method_3","text":"PUT","title":"Method"},{"location":"models/#url_3","text":"/v1/models/{PK}","title":"URL"},{"location":"models/#parameters_1","text":"PK : int (primary key of model)","title":"Parameters"},{"location":"models/#body_1","text":"framework: int (primary key of the framework that built the model) domain: str ( domain name ) licence: str ( licence name )","title":"Body"},{"location":"models/#permissions_3","text":"user is admin","title":"Permissions"},{"location":"models/#response_3","text":"A JSON object containing the updated model's fields","title":"Response"},{"location":"models/#partial-update","text":"Updates the description of a specific model.","title":"Partial Update"},{"location":"models/#method_4","text":"PATCH","title":"Method"},{"location":"models/#url_4","text":"/v1/models/{PK}","title":"URL"},{"location":"models/#parameters_2","text":"PK : int (primary key of model)","title":"Parameters"},{"location":"models/#body_2","text":"framework (optional): int (primary key of the framework that built the model) domain (optional): str ( domain name ) licence (optional): str ( licence name )","title":"Body"},{"location":"models/#permissions_4","text":"user is admin","title":"Permissions"},{"location":"models/#response_4","text":"A JSON object containing the updated model's fields","title":"Response"},{"location":"models/#destroy","text":"Flags a model as deleted, it can be reinstated . To permanently delete, see Hard Delete .","title":"Destroy"},{"location":"models/#method_5","text":"DELETE","title":"Method"},{"location":"models/#url_5","text":"/v1/models/{PK}","title":"URL"},{"location":"models/#parameters_3","text":"PK : int (primary key of model)","title":"Parameters"},{"location":"models/#permissions_5","text":"user is admin","title":"Permissions"},{"location":"models/#set-file","text":"Sets the model's binary data.","title":"Set File"},{"location":"models/#method_6","text":"POST","title":"Method"},{"location":"models/#url_6","text":"/v1/models/{PK}/data","title":"URL"},{"location":"models/#parameters_4","text":"PK : int (primary key of model)","title":"Parameters"},{"location":"models/#body_3","text":"Binary data to set as the model's file-data.","title":"Body"},{"location":"models/#permissions_6","text":"user is admin","title":"Permissions"},{"location":"models/#response_5","text":"A JSON object containing the updated model's fields","title":"Response"},{"location":"models/#delete-file","text":"Deletes the model's binary data.","title":"Delete File"},{"location":"models/#method_7","text":"DELETE","title":"Method"},{"location":"models/#url_7","text":"/v1/models/{PK}/data","title":"URL"},{"location":"models/#parameters_5","text":"PK : int (primary key of model)","title":"Parameters"},{"location":"models/#permissions_7","text":"user is admin","title":"Permissions"},{"location":"models/#response_6","text":"A JSON object containing the updated model's fields","title":"Response"},{"location":"models/#download","text":"Downloads the model's binary data.","title":"Download"},{"location":"models/#method_8","text":"POST","title":"Method"},{"location":"models/#url_8","text":"/v1/models/{PK}/download","title":"URL"},{"location":"models/#parameters_6","text":"PK : int (primary key of model)","title":"Parameters"},{"location":"models/#body_4","text":"params (optional): JSON Object with string/arrays of strings as values (ignored) filetype (optional): str (if present, must be \"data\")","title":"Body"},{"location":"models/#permissions_8","text":"user is authenticated","title":"Permissions"},{"location":"models/#response_7","text":"The model's binary data (filename is set to \"model.data\")","title":"Response"},{"location":"models/#hard-delete","text":"Permanently deletes the model. For soft-deletion, see Destroy .","title":"Hard Delete"},{"location":"models/#method_9","text":"DELETE","title":"METHOD"},{"location":"models/#url_9","text":"/v1/models/{PK}/hard","title":"URL"},{"location":"models/#parameters_7","text":"PK : int (primary key of model)","title":"Parameters"},{"location":"models/#permissions_9","text":"user is admin","title":"Permissions"},{"location":"models/#response_8","text":"JSON object containing the fields of the hard-deleted model.","title":"Response"},{"location":"models/#reinstate","text":"Undeletes a previously soft-deleted model.","title":"Reinstate"},{"location":"models/#method_10","text":"DELETE","title":"Method"},{"location":"models/#url_10","text":"/v1/models/{PK}/reinstate","title":"URL"},{"location":"models/#parameters_8","text":"PK : int (primary key of model)","title":"Parameters"},{"location":"models/#permissions_10","text":"user is admin","title":"Permissions"},{"location":"models/#response_9","text":"JSON object containing the fields of the reinstated model.","title":"Response"},{"location":"nodes/","text":"Contains information about the registered worker nodes. Some actions require the user performing the action to be acting on behalf of a node. This is indicated by including the Node-Id header in the request headers, set to the primary-key of the node. Fields # Available fields: pk: int ip: str (IP address of the node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware primary-key or null gpu_mem: int or null (in bytes, null if no GPU on node) last seen: timestamp or null current_job: job primary-key or null Actions # List # Lists the nodes present on the server. Method # POST URL # /v1/nodes/list Permissions # user is authenticated Body (optional) # filter specification Response # A JSON array of objects containing each node's fields Create # Creates a new node. Method # POST URL # /v1/nodes/create Body # ip: str (IP address of the node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware primary-key or null gpu_mem: int or null (in bytes, null if no GPU on node) Permissions # user is authenticated Response # A JSON object containing the newly-created node's fields Retrieve # Gets the information about a specific node. Method # GET URL # /v1/nodes/{PK} Parameters # PK : int (primary key of the node) Permissions # user is authenticated Response # A JSON object containing the node's fields Update # Updates a specific node. Method # PUT URL # /v1/nodes/{PK} Parameters # PK : int (primary key of node) Body # JSON object containing: ip: str (IP address of the node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware primary-key or null gpu_mem: int or null (in bytes, null if no GPU on node) Permissions # user is admin , or node is self Response # A JSON object containing the updated node's fields Partial Update # Updates a specific node. Method # PATCH URL # /v1/nodes/{PK} Parameters # PK : int (primary key of the node) Body # JSON object containing: ip (optional): str (IP address of the node) index (optional): int (GPU index, 0 for CPU-only nodes) cpu_mem (optional): int (in bytes) driver_version (optional): str hardware_generation (optional): hardware primary-key or null gpu_mem (optional): int or null (in bytes, null if no GPU on node) Permissions # user is admin , or node is self Response # A JSON object containing the updated node's fields Destroy # Deletes a node from the server. Method # DELETE URL # /v1/nodes/{PK} Parameters # PK : int (primary key of the node) Permissions # user is admin , or node is self Ping # Method # GET URL # /v1/nodes/ping Permissions # user is admin , or user is node Note: Just simple no-op to reestablish connection after long-running tasks.","title":"Nodes"},{"location":"nodes/#fields","text":"Available fields: pk: int ip: str (IP address of the node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware primary-key or null gpu_mem: int or null (in bytes, null if no GPU on node) last seen: timestamp or null current_job: job primary-key or null","title":"Fields"},{"location":"nodes/#actions","text":"","title":"Actions"},{"location":"nodes/#list","text":"Lists the nodes present on the server.","title":"List"},{"location":"nodes/#method","text":"POST","title":"Method"},{"location":"nodes/#url","text":"/v1/nodes/list","title":"URL"},{"location":"nodes/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"nodes/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"nodes/#response","text":"A JSON array of objects containing each node's fields","title":"Response"},{"location":"nodes/#create","text":"Creates a new node.","title":"Create"},{"location":"nodes/#method_1","text":"POST","title":"Method"},{"location":"nodes/#url_1","text":"/v1/nodes/create","title":"URL"},{"location":"nodes/#body","text":"ip: str (IP address of the node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware primary-key or null gpu_mem: int or null (in bytes, null if no GPU on node)","title":"Body"},{"location":"nodes/#permissions_1","text":"user is authenticated","title":"Permissions"},{"location":"nodes/#response_1","text":"A JSON object containing the newly-created node's fields","title":"Response"},{"location":"nodes/#retrieve","text":"Gets the information about a specific node.","title":"Retrieve"},{"location":"nodes/#method_2","text":"GET","title":"Method"},{"location":"nodes/#url_2","text":"/v1/nodes/{PK}","title":"URL"},{"location":"nodes/#parameters","text":"PK : int (primary key of the node)","title":"Parameters"},{"location":"nodes/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"nodes/#response_2","text":"A JSON object containing the node's fields","title":"Response"},{"location":"nodes/#update","text":"Updates a specific node.","title":"Update"},{"location":"nodes/#method_3","text":"PUT","title":"Method"},{"location":"nodes/#url_3","text":"/v1/nodes/{PK}","title":"URL"},{"location":"nodes/#parameters_1","text":"PK : int (primary key of node)","title":"Parameters"},{"location":"nodes/#body_1","text":"JSON object containing: ip: str (IP address of the node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware primary-key or null gpu_mem: int or null (in bytes, null if no GPU on node)","title":"Body"},{"location":"nodes/#permissions_3","text":"user is admin , or node is self","title":"Permissions"},{"location":"nodes/#response_3","text":"A JSON object containing the updated node's fields","title":"Response"},{"location":"nodes/#partial-update","text":"Updates a specific node.","title":"Partial Update"},{"location":"nodes/#method_4","text":"PATCH","title":"Method"},{"location":"nodes/#url_4","text":"/v1/nodes/{PK}","title":"URL"},{"location":"nodes/#parameters_2","text":"PK : int (primary key of the node)","title":"Parameters"},{"location":"nodes/#body_2","text":"JSON object containing: ip (optional): str (IP address of the node) index (optional): int (GPU index, 0 for CPU-only nodes) cpu_mem (optional): int (in bytes) driver_version (optional): str hardware_generation (optional): hardware primary-key or null gpu_mem (optional): int or null (in bytes, null if no GPU on node)","title":"Body"},{"location":"nodes/#permissions_4","text":"user is admin , or node is self","title":"Permissions"},{"location":"nodes/#response_4","text":"A JSON object containing the updated node's fields","title":"Response"},{"location":"nodes/#destroy","text":"Deletes a node from the server.","title":"Destroy"},{"location":"nodes/#method_5","text":"DELETE","title":"Method"},{"location":"nodes/#url_5","text":"/v1/nodes/{PK}","title":"URL"},{"location":"nodes/#parameters_3","text":"PK : int (primary key of the node)","title":"Parameters"},{"location":"nodes/#permissions_5","text":"user is admin , or node is self","title":"Permissions"},{"location":"nodes/#ping","text":"","title":"Ping"},{"location":"nodes/#method_6","text":"GET","title":"Method"},{"location":"nodes/#url_6","text":"/v1/nodes/ping","title":"URL"},{"location":"nodes/#permissions_6","text":"user is admin , or user is node Note: Just simple no-op to reestablish connection after long-running tasks.","title":"Permissions"},{"location":"notifications/","text":"Notifications are actions taken when a job transitions from one phase to another through-out its lifecycle. The phase-transitions that can occur during a job's lifecycle (and thus can trigger notifications) are: Acquisition: a worker node has reserved the job for exclusive access Release: the worker node has released the job, as it cannot perform it (due to missing requirements, e.g. hardware) Start: the worker node has checked that it can perform the job, and has started to do so Progression: the worker node has made some progress toward completing the job Finish: the worker node has successfully completed the job Error: the worker node has encountered a problem while trying to complete the job Reset: the worker node has voluntarily reset the job to its initial state (occurs when a worker-node crashes, comes back online, and has lost the work-state needed to continue the job) Abortion: an admin user has forcefully reset the job to its initial state (used to unlock jobs from crashed worker-nodes) Cancellation: a user has determined that the job is no longer required Notification Data # A packet of notification data is given to each notification type, to be used to add job-specific information to the notification. See the Notification Types section for how this information is added to each type of notification. The data provided is: transition: str (the transition that occurred) description: str (the description field of the job that transitioned) pk: int (the primary-key of the job that transitioned) progress: float (the current progress amount of the job that transitioned) cancelled: bool (whether the job that transitioned has been cancelled) node (optional): int (the primary-key of the node that has acquired the job, if any) error (optional): str (the error that stopped the job , if any) transition_data: JSON object (arbitrary data supplied during a progress transition, empty for all other transitions) Notification Types # The server currently supports specification of 3 types of notification. These are defined when creating a job from a job-template . Named replacement-fields below refers to a part of a string which is replaced with data from the notification data provided to the notification. It appears as the name of a notification data field enclosed in {} e.g. \"Hello from job #{pk}\" would have the sub-string \"{pk}\" substituted with the pk value from the notification data, to become e.g. \"Hello from job #1\" . Print Notification # Prints a message to the log output of the server. JSON object containing: message: str (can contain named replacement fields) Email Notification # Sends an email to a recipient. JSON object containing: subject: str (can contain named replacement fields, except for transition_data ) body: str (can contain named replacement fields) to: array of str cc: array of str bcc: array of str Websocket Notification # To specify a web-socket notification, use an empty JSON object. Clients listening to the job (via Connect To Job ) will receive the notification data , as JSON via the connected websocket, for transitions that have this notification type specified.","title":"Notifications"},{"location":"notifications/#notification-data","text":"A packet of notification data is given to each notification type, to be used to add job-specific information to the notification. See the Notification Types section for how this information is added to each type of notification. The data provided is: transition: str (the transition that occurred) description: str (the description field of the job that transitioned) pk: int (the primary-key of the job that transitioned) progress: float (the current progress amount of the job that transitioned) cancelled: bool (whether the job that transitioned has been cancelled) node (optional): int (the primary-key of the node that has acquired the job, if any) error (optional): str (the error that stopped the job , if any) transition_data: JSON object (arbitrary data supplied during a progress transition, empty for all other transitions)","title":"Notification Data"},{"location":"notifications/#notification-types","text":"The server currently supports specification of 3 types of notification. These are defined when creating a job from a job-template . Named replacement-fields below refers to a part of a string which is replaced with data from the notification data provided to the notification. It appears as the name of a notification data field enclosed in {} e.g. \"Hello from job #{pk}\" would have the sub-string \"{pk}\" substituted with the pk value from the notification data, to become e.g. \"Hello from job #1\" .","title":"Notification Types"},{"location":"notifications/#print-notification","text":"Prints a message to the log output of the server. JSON object containing: message: str (can contain named replacement fields)","title":"Print Notification"},{"location":"notifications/#email-notification","text":"Sends an email to a recipient. JSON object containing: subject: str (can contain named replacement fields, except for transition_data ) body: str (can contain named replacement fields) to: array of str cc: array of str bcc: array of str","title":"Email Notification"},{"location":"notifications/#websocket-notification","text":"To specify a web-socket notification, use an empty JSON object. Clients listening to the job (via Connect To Job ) will receive the notification data , as JSON via the connected websocket, for transitions that have this notification type specified.","title":"Websocket Notification"},{"location":"object_detection/","text":"Additional object detection dataset operations. For core dataset operations, see here . Fields # Annotation objects: x: int y: int width: int height: int label: str polygon: polygon object (optional) Polygon objects: points: array of array with two int values (x, y) URL # Uses /v1/objdet/datasets/ instead of /v1/datasets/ , also for the core operations. Actions # Add annotations # POST: /v1/objdet/datasets/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set annotations for) Body: annotations: array of Annotation objects Get annotations # GET: /v1/objdet/datasets/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to get annotations for) Response: array of Annotation objects Delete annotations # DELETE: /v1/objdet/datasets/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to remove the annotations for) Get labels # GET: /v1/objdet/datasets/{PK}/labels Parameters: PK: int (primary key of dataset) Response: array of string labels present in dataset","title":"Object Detection"},{"location":"object_detection/#fields","text":"Annotation objects: x: int y: int width: int height: int label: str polygon: polygon object (optional) Polygon objects: points: array of array with two int values (x, y)","title":"Fields"},{"location":"object_detection/#url","text":"Uses /v1/objdet/datasets/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"object_detection/#actions","text":"","title":"Actions"},{"location":"object_detection/#add-annotations","text":"POST: /v1/objdet/datasets/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set annotations for) Body: annotations: array of Annotation objects","title":"Add annotations"},{"location":"object_detection/#get-annotations","text":"GET: /v1/objdet/datasets/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to get annotations for) Response: array of Annotation objects","title":"Get annotations"},{"location":"object_detection/#delete-annotations","text":"DELETE: /v1/objdet/datasets/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to remove the annotations for)","title":"Delete annotations"},{"location":"object_detection/#get-labels","text":"GET: /v1/objdet/datasets/{PK}/labels Parameters: PK: int (primary key of dataset) Response: array of string labels present in dataset","title":"Get labels"},{"location":"parameters/","text":"Manages the parameters of a job-template. Fields # pk: int (primary key of parameter) template: job template ID name: str type: str default: str help: str Actions # None #","title":"Parameters"},{"location":"parameters/#fields","text":"pk: int (primary key of parameter) template: job template ID name: str type: str default: str help: str","title":"Fields"},{"location":"parameters/#actions","text":"","title":"Actions"},{"location":"parameters/#none","text":"","title":"None"},{"location":"permissions/","text":"The types of permissions required to perform actions on the server. Each request to the server contains the user making the request, as well as a node ID that the user is acting on behalf of. Based on the state of the user/node and the action being performed, access to the action may be permitted/denied based on any of the following criteria. AllowNone # Access to this action is never permitted under any circumstance. IsAdminUser # Can only perform the action if the user has the is_staff flag. IsAuthenticated # Can only perform the action if a registered user is making the request. IsMember # For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team. IsNode # Can only perform the action if acting on behalf of a registered node. IsOwnMembership # Only the user to which a team membership pertains can perform the action against that membership. IsPublic # For objects on the server which can be flagged as publicly available, actions against those objects which are flagged as such can be performed by anyone. IsSelf # Users can retrieve their own user records. JobIsWorkable # The action can only be performed against a job if it is not a meta-job. MemberHasAdminPermission # For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold admin-level permissions. MemberHasExecutePermission # For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold execute-level permissions. MemberHasWritePermission # For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold write-level permissions. NodeIsSelf # Actions on a node can be performed by a user acting on behalf of that node. NodeOwnsJob # Actions on a job can be performed by nodes that have acquired a lock on the job. NodeWorkingJob # Actions on a job can be performed by nodes that are/were executing a job. This is for the case where a node goes offline while performing a job, and while it is offline the job is wrested away from it. When the node comes back, it can perform clean-up actions (that hold this permission) around the job it was working on.","title":"Permissions"},{"location":"permissions/#allownone","text":"Access to this action is never permitted under any circumstance.","title":"AllowNone"},{"location":"permissions/#isadminuser","text":"Can only perform the action if the user has the is_staff flag.","title":"IsAdminUser"},{"location":"permissions/#isauthenticated","text":"Can only perform the action if a registered user is making the request.","title":"IsAuthenticated"},{"location":"permissions/#ismember","text":"For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team.","title":"IsMember"},{"location":"permissions/#isnode","text":"Can only perform the action if acting on behalf of a registered node.","title":"IsNode"},{"location":"permissions/#isownmembership","text":"Only the user to which a team membership pertains can perform the action against that membership.","title":"IsOwnMembership"},{"location":"permissions/#ispublic","text":"For objects on the server which can be flagged as publicly available, actions against those objects which are flagged as such can be performed by anyone.","title":"IsPublic"},{"location":"permissions/#isself","text":"Users can retrieve their own user records.","title":"IsSelf"},{"location":"permissions/#jobisworkable","text":"The action can only be performed against a job if it is not a meta-job.","title":"JobIsWorkable"},{"location":"permissions/#memberhasadminpermission","text":"For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold admin-level permissions.","title":"MemberHasAdminPermission"},{"location":"permissions/#memberhasexecutepermission","text":"For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold execute-level permissions.","title":"MemberHasExecutePermission"},{"location":"permissions/#memberhaswritepermission","text":"For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold write-level permissions.","title":"MemberHasWritePermission"},{"location":"permissions/#nodeisself","text":"Actions on a node can be performed by a user acting on behalf of that node.","title":"NodeIsSelf"},{"location":"permissions/#nodeownsjob","text":"Actions on a job can be performed by nodes that have acquired a lock on the job.","title":"NodeOwnsJob"},{"location":"permissions/#nodeworkingjob","text":"Actions on a job can be performed by nodes that are/were executing a job. This is for the case where a node goes offline while performing a job, and while it is offline the job is wrested away from it. When the node comes back, it can perform clean-up actions (that hold this permission) around the job it was working on.","title":"NodeWorkingJob"},{"location":"pretrained_models/","text":"Manages the pre-trained models, centralizing downloads to decrease network congestion. Fields # pk: int (primary key of the pretrained model) framework: JSON object (containing the framework fields ) domain: str ( domain name ) licence: str ( licence name ) data: bool (whether the pretrained model's data is available) creator: int or null (primary key of the user that created the pretrained model) creation_time: timestamp (the date-time that the pretrained model was created) deletion_time: timestamp or null (the date-time that the pretrained model was soft-deleted, or null if still active) url: str (link to the pretrained model's website) description: str name: str metadata: str (arbitrary additional information about the pretrained model) Actions # List # Lists the pretrained models present on the server. Method # POST URL # /v1/pretrained-models/list Permissions # user is authenticated Body (optional) # filter specification Response # A JSON array of objects containing each pretrained model's fields Create # Creates a new pretrained model. Method # POST URL # /v1/pretrained-models/create Body # framework: int (primary key of the framework that built the pretrained model) domain: str ( domain name ) licence: str ( licence name ) url: str (link to the pretrained model's website) description: str name: str metadata (optional): str (arbitrary additional information about the pretrained model) Permissions # user is admin Response # A JSON object containing the newly-created pretrained model's fields Retrieve # Gets the information about a specific pretrained model. Method # GET URL # /v1/pretrained-models/{PK} Parameters # PK : int (primary key of pretrained model) Permissions # user is authenticated Response # A JSON object containing the pretrained model's fields Update # Updates the description of a specific pretrained model. Method # PUT URL # /v1/pretrained-models/{PK} Parameters # PK : int (primary key of pretrained model) Body # framework: int (primary key of the framework that built the pretrained model) domain: str ( domain name ) licence: str ( licence name ) url: str (link to the pretrained model's website) description: str name: str metadata (optional): str (arbitrary additional information about the pretrained model) Permissions # user is admin Response # A JSON object containing the updated pretrained model's fields Partial Update # Updates the description of a specific pretrained model. Method # PATCH URL # /v1/pretrained-models/{PK} Parameters # PK : int (primary key of pretrained model) Body # framework (optional): int (primary key of the framework that built the pretrained model) domain (optional): str ( domain name ) licence (optional): str ( licence name ) url (optional): str (link to the pretrained model's website) description (optional): str name (optional): str metadata (optional): str (arbitrary additional information about the pretrained model) Permissions # user is admin Response # A JSON object containing the updated pretrained model's fields Destroy # Flags a pretrained model as deleted, it can be reinstated . To permanently delete, see Hard Delete . Method # DELETE URL # /v1/pretrained-models/{PK} Parameters # PK : int (primary key of pretrained model) Permissions # user is admin Set File # Sets the pretrained model's binary data. Method # POST URL # /v1/pretrained-models/{PK}/data Parameters # PK : int (primary key of pretrained model) Body # Binary data to set as the pretrained model's file-data. Permissions # user is admin Response # A JSON object containing the updated pretrained model's fields Delete File # Deletes the pretrained model's binary data. Method # DELETE URL # /v1/pretrained-models/{PK}/data Parameters # PK : int (primary key of pretrained model) Permissions # user is admin Response # A JSON object containing the updated pretrained model's fields Download # Downloads the pretrained model's binary data. Method # POST URL # /v1/pretrained-models/{PK}/download Parameters # PK : int (primary key of pretrained model) Body # params (optional): JSON Object with string/arrays of strings as values (ignored) filetype (optional): str (if present, must be \"data\") Permissions # user is authenticated Response # The pretrained model's binary data (filename is set to \"model.data\") Hard Delete # Permanently deletes the pretrained model. For soft-deletion, see Destroy . METHOD # DELETE URL # /v1/pretrained-models/{PK}/hard Parameters # PK : int (primary key of pretrained model) Permissions # user is admin Response # JSON object containing the fields of the hard-deleted pretrained model. Reinstate # Undeletes a previously soft-deleted pretrained model. Method # DELETE URL # /v1/pretrained-models/{PK}/reinstate Parameters # PK : int (primary key of the pretrained model) Permissions # user is admin Response # JSON object containing the fields of the reinstated pretrained model.","title":"Pretrained models"},{"location":"pretrained_models/#fields","text":"pk: int (primary key of the pretrained model) framework: JSON object (containing the framework fields ) domain: str ( domain name ) licence: str ( licence name ) data: bool (whether the pretrained model's data is available) creator: int or null (primary key of the user that created the pretrained model) creation_time: timestamp (the date-time that the pretrained model was created) deletion_time: timestamp or null (the date-time that the pretrained model was soft-deleted, or null if still active) url: str (link to the pretrained model's website) description: str name: str metadata: str (arbitrary additional information about the pretrained model)","title":"Fields"},{"location":"pretrained_models/#actions","text":"","title":"Actions"},{"location":"pretrained_models/#list","text":"Lists the pretrained models present on the server.","title":"List"},{"location":"pretrained_models/#method","text":"POST","title":"Method"},{"location":"pretrained_models/#url","text":"/v1/pretrained-models/list","title":"URL"},{"location":"pretrained_models/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"pretrained_models/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"pretrained_models/#response","text":"A JSON array of objects containing each pretrained model's fields","title":"Response"},{"location":"pretrained_models/#create","text":"Creates a new pretrained model.","title":"Create"},{"location":"pretrained_models/#method_1","text":"POST","title":"Method"},{"location":"pretrained_models/#url_1","text":"/v1/pretrained-models/create","title":"URL"},{"location":"pretrained_models/#body","text":"framework: int (primary key of the framework that built the pretrained model) domain: str ( domain name ) licence: str ( licence name ) url: str (link to the pretrained model's website) description: str name: str metadata (optional): str (arbitrary additional information about the pretrained model)","title":"Body"},{"location":"pretrained_models/#permissions_1","text":"user is admin","title":"Permissions"},{"location":"pretrained_models/#response_1","text":"A JSON object containing the newly-created pretrained model's fields","title":"Response"},{"location":"pretrained_models/#retrieve","text":"Gets the information about a specific pretrained model.","title":"Retrieve"},{"location":"pretrained_models/#method_2","text":"GET","title":"Method"},{"location":"pretrained_models/#url_2","text":"/v1/pretrained-models/{PK}","title":"URL"},{"location":"pretrained_models/#parameters","text":"PK : int (primary key of pretrained model)","title":"Parameters"},{"location":"pretrained_models/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"pretrained_models/#response_2","text":"A JSON object containing the pretrained model's fields","title":"Response"},{"location":"pretrained_models/#update","text":"Updates the description of a specific pretrained model.","title":"Update"},{"location":"pretrained_models/#method_3","text":"PUT","title":"Method"},{"location":"pretrained_models/#url_3","text":"/v1/pretrained-models/{PK}","title":"URL"},{"location":"pretrained_models/#parameters_1","text":"PK : int (primary key of pretrained model)","title":"Parameters"},{"location":"pretrained_models/#body_1","text":"framework: int (primary key of the framework that built the pretrained model) domain: str ( domain name ) licence: str ( licence name ) url: str (link to the pretrained model's website) description: str name: str metadata (optional): str (arbitrary additional information about the pretrained model)","title":"Body"},{"location":"pretrained_models/#permissions_3","text":"user is admin","title":"Permissions"},{"location":"pretrained_models/#response_3","text":"A JSON object containing the updated pretrained model's fields","title":"Response"},{"location":"pretrained_models/#partial-update","text":"Updates the description of a specific pretrained model.","title":"Partial Update"},{"location":"pretrained_models/#method_4","text":"PATCH","title":"Method"},{"location":"pretrained_models/#url_4","text":"/v1/pretrained-models/{PK}","title":"URL"},{"location":"pretrained_models/#parameters_2","text":"PK : int (primary key of pretrained model)","title":"Parameters"},{"location":"pretrained_models/#body_2","text":"framework (optional): int (primary key of the framework that built the pretrained model) domain (optional): str ( domain name ) licence (optional): str ( licence name ) url (optional): str (link to the pretrained model's website) description (optional): str name (optional): str metadata (optional): str (arbitrary additional information about the pretrained model)","title":"Body"},{"location":"pretrained_models/#permissions_4","text":"user is admin","title":"Permissions"},{"location":"pretrained_models/#response_4","text":"A JSON object containing the updated pretrained model's fields","title":"Response"},{"location":"pretrained_models/#destroy","text":"Flags a pretrained model as deleted, it can be reinstated . To permanently delete, see Hard Delete .","title":"Destroy"},{"location":"pretrained_models/#method_5","text":"DELETE","title":"Method"},{"location":"pretrained_models/#url_5","text":"/v1/pretrained-models/{PK}","title":"URL"},{"location":"pretrained_models/#parameters_3","text":"PK : int (primary key of pretrained model)","title":"Parameters"},{"location":"pretrained_models/#permissions_5","text":"user is admin","title":"Permissions"},{"location":"pretrained_models/#set-file","text":"Sets the pretrained model's binary data.","title":"Set File"},{"location":"pretrained_models/#method_6","text":"POST","title":"Method"},{"location":"pretrained_models/#url_6","text":"/v1/pretrained-models/{PK}/data","title":"URL"},{"location":"pretrained_models/#parameters_4","text":"PK : int (primary key of pretrained model)","title":"Parameters"},{"location":"pretrained_models/#body_3","text":"Binary data to set as the pretrained model's file-data.","title":"Body"},{"location":"pretrained_models/#permissions_6","text":"user is admin","title":"Permissions"},{"location":"pretrained_models/#response_5","text":"A JSON object containing the updated pretrained model's fields","title":"Response"},{"location":"pretrained_models/#delete-file","text":"Deletes the pretrained model's binary data.","title":"Delete File"},{"location":"pretrained_models/#method_7","text":"DELETE","title":"Method"},{"location":"pretrained_models/#url_7","text":"/v1/pretrained-models/{PK}/data","title":"URL"},{"location":"pretrained_models/#parameters_5","text":"PK : int (primary key of pretrained model)","title":"Parameters"},{"location":"pretrained_models/#permissions_7","text":"user is admin","title":"Permissions"},{"location":"pretrained_models/#response_6","text":"A JSON object containing the updated pretrained model's fields","title":"Response"},{"location":"pretrained_models/#download","text":"Downloads the pretrained model's binary data.","title":"Download"},{"location":"pretrained_models/#method_8","text":"POST","title":"Method"},{"location":"pretrained_models/#url_8","text":"/v1/pretrained-models/{PK}/download","title":"URL"},{"location":"pretrained_models/#parameters_6","text":"PK : int (primary key of pretrained model)","title":"Parameters"},{"location":"pretrained_models/#body_4","text":"params (optional): JSON Object with string/arrays of strings as values (ignored) filetype (optional): str (if present, must be \"data\")","title":"Body"},{"location":"pretrained_models/#permissions_8","text":"user is authenticated","title":"Permissions"},{"location":"pretrained_models/#response_7","text":"The pretrained model's binary data (filename is set to \"model.data\")","title":"Response"},{"location":"pretrained_models/#hard-delete","text":"Permanently deletes the pretrained model. For soft-deletion, see Destroy .","title":"Hard Delete"},{"location":"pretrained_models/#method_9","text":"DELETE","title":"METHOD"},{"location":"pretrained_models/#url_9","text":"/v1/pretrained-models/{PK}/hard","title":"URL"},{"location":"pretrained_models/#parameters_7","text":"PK : int (primary key of pretrained model)","title":"Parameters"},{"location":"pretrained_models/#permissions_9","text":"user is admin","title":"Permissions"},{"location":"pretrained_models/#response_8","text":"JSON object containing the fields of the hard-deleted pretrained model.","title":"Response"},{"location":"pretrained_models/#reinstate","text":"Undeletes a previously soft-deleted pretrained model.","title":"Reinstate"},{"location":"pretrained_models/#method_10","text":"DELETE","title":"Method"},{"location":"pretrained_models/#url_10","text":"/v1/pretrained-models/{PK}/reinstate","title":"URL"},{"location":"pretrained_models/#parameters_8","text":"PK : int (primary key of the pretrained model)","title":"Parameters"},{"location":"pretrained_models/#permissions_10","text":"user is admin","title":"Permissions"},{"location":"pretrained_models/#response_9","text":"JSON object containing the fields of the reinstated pretrained model.","title":"Response"},{"location":"projects/","text":"Projects link datasets and projects. Fields # Available fields: name: str project: project ID creator: user ID creation_time: timestamp deletion_time: timestamp Actions # List # POST: /v1/projects/list Body (optional): filter specification Response: array of pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Load # GET: /v1/projects/{PK} Parameters: PK: int (primary key of project) Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Add # POST: /v1/project/create Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Update # PUT: /v1/project/{PK} Parameters: PK: int (primary key of project) Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Partial update # PATCH: /v1/project/{PK} Parameters: PK: int (primary key of project) Any of the following fields in the body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Delete # DELETE: /v1/project/{PK}[/hard] Parameters: PK: int (primary key of project) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate # DELETE: /v1/project/{PK}/reinstate Parameters: PK: int (primary key of project) Notes: Undeletes a previously soft-deleted project","title":"Projects"},{"location":"projects/#fields","text":"Available fields: name: str project: project ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Fields"},{"location":"projects/#actions","text":"","title":"Actions"},{"location":"projects/#list","text":"POST: /v1/projects/list Body (optional): filter specification Response: array of pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"projects/#load","text":"GET: /v1/projects/{PK} Parameters: PK: int (primary key of project) Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"projects/#add","text":"POST: /v1/project/create Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"projects/#update","text":"PUT: /v1/project/{PK} Parameters: PK: int (primary key of project) Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"projects/#partial-update","text":"PATCH: /v1/project/{PK} Parameters: PK: int (primary key of project) Any of the following fields in the body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Partial update"},{"location":"projects/#delete","text":"DELETE: /v1/project/{PK}[/hard] Parameters: PK: int (primary key of project) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"projects/#reinstate","text":"DELETE: /v1/project/{PK}/reinstate Parameters: PK: int (primary key of project) Notes: Undeletes a previously soft-deleted project","title":"Reinstate"},{"location":"speech/","text":"Additional speech dataset operations. For core dataset operations, see here . URL # Uses /v1/speech/datasets/ instead of /v1/datasets/ , also for the core operations. Actions # Add transcript # POST: /v1/speech/datasets/{PK}/transcriptions/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set the transcript for) Body: transcription: str Get transcripts # GET: /v1/speech/datasets/{PK}/transcriptions Parameters: PK: int (primary key of dataset) Response: for each image name the corresponding transcript (nested object, transcription field)","title":"Speech"},{"location":"speech/#url","text":"Uses /v1/speech/datasets/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"speech/#actions","text":"","title":"Actions"},{"location":"speech/#add-transcript","text":"POST: /v1/speech/datasets/{PK}/transcriptions/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set the transcript for) Body: transcription: str","title":"Add transcript"},{"location":"speech/#get-transcripts","text":"GET: /v1/speech/datasets/{PK}/transcriptions Parameters: PK: int (primary key of dataset) Response: for each image name the corresponding transcript (nested object, transcription field)","title":"Get transcripts"},{"location":"teams/","text":"Teams combine users and their permissions. Fields # Available fields: name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Permissions: R - read W - write X - job execute A - admin Actions # List # POST: /v1/teams/list Body (optional): filter specification Response: array of pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Load # GET: /v1/teams/{PK} Parameters: PK: int (primary key of team) Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Add # POST: /v1/team/create Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Update # PUT: /v1/team/{PK} Parameters: PK: int (primary key of team) Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Modify membership # PATCH: /v1/team/{PK}/memberships Parameters: PK: int (primary key of team) Body: method: str (add/remove/remove) username: str permissions: str (R/W/X/A, only add/update) Delete # DELETE: /v1/team/{PK}[/hard] Parameters: PK: int (primary key of team) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate # DELETE: /v1/team/{PK}/reinstate Parameters: PK: int (primary key of team) Notes: Undeletes a previously soft-deleted team","title":"Teams"},{"location":"teams/#fields","text":"Available fields: name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Permissions: R - read W - write X - job execute A - admin","title":"Fields"},{"location":"teams/#actions","text":"","title":"Actions"},{"location":"teams/#list","text":"POST: /v1/teams/list Body (optional): filter specification Response: array of pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"teams/#load","text":"GET: /v1/teams/{PK} Parameters: PK: int (primary key of team) Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"teams/#add","text":"POST: /v1/team/create Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"teams/#update","text":"PUT: /v1/team/{PK} Parameters: PK: int (primary key of team) Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"teams/#modify-membership","text":"PATCH: /v1/team/{PK}/memberships Parameters: PK: int (primary key of team) Body: method: str (add/remove/remove) username: str permissions: str (R/W/X/A, only add/update)","title":"Modify membership"},{"location":"teams/#delete","text":"DELETE: /v1/team/{PK}[/hard] Parameters: PK: int (primary key of team) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"teams/#reinstate","text":"DELETE: /v1/team/{PK}/reinstate Parameters: PK: int (primary key of team) Notes: Undeletes a previously soft-deleted team","title":"Reinstate"},{"location":"users/","text":"Manages the users of the server. Fields # Available fields: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Actions # List # POST: /v1/users/list Body (optional): filter specification Response: array of pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Load # GET: /v1/users/{PK} Parameters: PK: int (primary key of user) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool Add # POST: /v1/users/create Body: username: str password: str first_name: str last_name: str email: str Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Update # PUT: /v1/users/{PK} Parameters: PK: int (primary key of user) Body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Partial update # PATCH: /v1/users/{PK} Parameters: PK: int (primary key of user) Any of the following fields in the body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Delete # DELETE: /v1/users/{PK} Parameters: PK: int (primary key of user)","title":"Users"},{"location":"users/#fields","text":"Available fields: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Fields"},{"location":"users/#actions","text":"","title":"Actions"},{"location":"users/#list","text":"POST: /v1/users/list Body (optional): filter specification Response: array of pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"List"},{"location":"users/#load","text":"GET: /v1/users/{PK} Parameters: PK: int (primary key of user) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool","title":"Load"},{"location":"users/#add","text":"POST: /v1/users/create Body: username: str password: str first_name: str last_name: str email: str Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Add"},{"location":"users/#update","text":"PUT: /v1/users/{PK} Parameters: PK: int (primary key of user) Body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Update"},{"location":"users/#partial-update","text":"PATCH: /v1/users/{PK} Parameters: PK: int (primary key of user) Any of the following fields in the body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Partial update"},{"location":"users/#delete","text":"DELETE: /v1/users/{PK} Parameters: PK: int (primary key of user)","title":"Delete"},{"location":"workable_templates/","text":"Manages the workable job templates. Fields # pk: int (primary key of workable job template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null framework: framework type: job type executor_class: str required_packages: str body: str Actions # None #","title":"Workable templates"},{"location":"workable_templates/#fields","text":"pk: int (primary key of workable job template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null framework: framework type: job type executor_class: str required_packages: str body: str","title":"Fields"},{"location":"workable_templates/#actions","text":"","title":"Actions"},{"location":"workable_templates/#none","text":"","title":"None"}]}