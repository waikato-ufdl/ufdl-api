{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Contains the REST API documentation of the User-friendly Deep Learning (UFDL) framework . The documentation available here is to be considered work in progress and can change at any given time as the project evolves. All requests and responses are JSON, unless stated otherwise.","title":"Home"},{"location":"audio_classification/","text":"Audio classification is used to assign categories to audio samples at certain timestamps (for a specified duration), e.g., whether the sample represents a particular song bird. Use-cases The following use-cases must be covered. Create dataset requires: name of dataset project it belongs to (optional; default is all project) users allowed to manage it (optional; default is only user creating it) license (default: proprietary, ie all rights reserved) optional tag(s) Delete dataset requires: name of dataset List datasets requires: filters for tags, license, ... List images in dataset requires: name of dataset to list Modify dataset Sub use-cases: Add sound file requires: name of dataset to add to one or more annotations, for each: start timestamp duration category Delete sound file Automatically removes any associated categories. requires: name of dataset to remove from name of sound file(s) to remove Add annotations requires: name of dataset to add to name of sound(s) to add to the annotations to add, for each annotation: start timestamp duration label Delete annotations requires: name of dataset to remove from name of sound file(s) to remove from Change license requires: name of dataset to update license Tag dataset requires: name of dataset to tag tag(s) Download Download sound file requires: name of dataset name of sound file Download annotations requires: name of dataset annotation format Download dataset Downloads the complete dataset as ZIP file. requires: name of dataset annotation format","title":"Audio classification"},{"location":"audio_classification/#use-cases","text":"The following use-cases must be covered.","title":"Use-cases"},{"location":"audio_classification/#create-dataset","text":"requires: name of dataset project it belongs to (optional; default is all project) users allowed to manage it (optional; default is only user creating it) license (default: proprietary, ie all rights reserved) optional tag(s)","title":"Create dataset"},{"location":"audio_classification/#delete-dataset","text":"requires: name of dataset","title":"Delete dataset"},{"location":"audio_classification/#list-datasets","text":"requires: filters for tags, license, ...","title":"List datasets"},{"location":"audio_classification/#list-images-in-dataset","text":"requires: name of dataset to list","title":"List images in dataset"},{"location":"audio_classification/#modify-dataset","text":"Sub use-cases:","title":"Modify dataset"},{"location":"audio_classification/#add-sound-file","text":"requires: name of dataset to add to one or more annotations, for each: start timestamp duration category","title":"Add sound file"},{"location":"audio_classification/#delete-sound-file","text":"Automatically removes any associated categories. requires: name of dataset to remove from name of sound file(s) to remove","title":"Delete sound file"},{"location":"audio_classification/#add-annotations","text":"requires: name of dataset to add to name of sound(s) to add to the annotations to add, for each annotation: start timestamp duration label","title":"Add annotations"},{"location":"audio_classification/#delete-annotations","text":"requires: name of dataset to remove from name of sound file(s) to remove from","title":"Delete annotations"},{"location":"audio_classification/#change-license","text":"requires: name of dataset to update license","title":"Change license"},{"location":"audio_classification/#tag-dataset","text":"requires: name of dataset to tag tag(s)","title":"Tag dataset"},{"location":"audio_classification/#download","text":"","title":"Download"},{"location":"audio_classification/#download-sound-file","text":"requires: name of dataset name of sound file","title":"Download sound file"},{"location":"audio_classification/#download-annotations","text":"requires: name of dataset annotation format","title":"Download annotations"},{"location":"audio_classification/#download-dataset","text":"Downloads the complete dataset as ZIP file. requires: name of dataset annotation format","title":"Download dataset"},{"location":"authentication/","text":"Authentication is done via JSON Web Tokens (JWT) . Actions Obtain POST: /v1/auth/obtain Body: username password Response: access: str (JWT token for accessing API) refresh: str (JWT token to refresh access token) Refresh POST: /v1/auth/refresh Body: refresh: str (the JWT refresh token) Response: access: str (JWT token for accessing API) API calls Subsequent API calls must include the access token in the Authorization HTTP header as follows: Bearer <JWT access token>","title":"Authentication"},{"location":"authentication/#actions","text":"","title":"Actions"},{"location":"authentication/#obtain","text":"POST: /v1/auth/obtain Body: username password Response: access: str (JWT token for accessing API) refresh: str (JWT token to refresh access token)","title":"Obtain"},{"location":"authentication/#refresh","text":"POST: /v1/auth/refresh Body: refresh: str (the JWT refresh token) Response: access: str (JWT token for accessing API)","title":"Refresh"},{"location":"authentication/#api-calls","text":"Subsequent API calls must include the access token in the Authorization HTTP header as follows: Bearer <JWT access token>","title":"API calls"},{"location":"cuda/","text":"Based on the NVIDIA driver installed on a system only certain versions of CUDA inside docker images will work. Fields Available fields: version: str (10.0) full_version: str (10.0.130) min_driver_version: str (410.48) Actions List POST: /v1/cuda/list Body (optional): filter specification Response: array of version: str full_version: str min_driver_version: str Add POST: /v1/cuda/create Body: version: str full_version: str min_driver_version: str Response: pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Load GET: /v1/cuda/{PK} Parameters: PK: int (primary key of CUDA version) Response: pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Update PUT: /v1/cuda/{PK} Parameters: PK: int (primary key of CUDA version) Body: version: str full_version: str min_driver_version: str Response: pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Partial update PATCH: /v1/cuda/{PK} Parameters: PK: int (primary key of CUDA version) Any of the following fields in the body: version: str full_version: str min_driver_version: str Response: pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Delete DELETE: /v1/cuda/{PK} Parameters: PK: int (primary key of CUDA version) Links CUDA/Driver version","title":"CUDA"},{"location":"cuda/#fields","text":"Available fields: version: str (10.0) full_version: str (10.0.130) min_driver_version: str (410.48)","title":"Fields"},{"location":"cuda/#actions","text":"","title":"Actions"},{"location":"cuda/#list","text":"POST: /v1/cuda/list Body (optional): filter specification Response: array of version: str full_version: str min_driver_version: str","title":"List"},{"location":"cuda/#add","text":"POST: /v1/cuda/create Body: version: str full_version: str min_driver_version: str Response: pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Add"},{"location":"cuda/#load","text":"GET: /v1/cuda/{PK} Parameters: PK: int (primary key of CUDA version) Response: pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Load"},{"location":"cuda/#update","text":"PUT: /v1/cuda/{PK} Parameters: PK: int (primary key of CUDA version) Body: version: str full_version: str min_driver_version: str Response: pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Update"},{"location":"cuda/#partial-update","text":"PATCH: /v1/cuda/{PK} Parameters: PK: int (primary key of CUDA version) Any of the following fields in the body: version: str full_version: str min_driver_version: str Response: pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Partial update"},{"location":"cuda/#delete","text":"DELETE: /v1/cuda/{PK} Parameters: PK: int (primary key of CUDA version)","title":"Delete"},{"location":"cuda/#links","text":"CUDA/Driver version","title":"Links"},{"location":"datasets/","text":"Core dataset operations. Fields Available fields: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Actions List POST: /v1/datasets/list Body (optional): filter specification Response: array of name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Load GET: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Response: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Add POST: /v1/datasets/create Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Update PUT: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Partial update PATCH: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Any of the following fields in the body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Delete DELETE: /v1/datasets/{PK}[/hard] Parameters: PK: int (primary key of dataset) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate DELETE: /v1/datasets/{PK}/reinstate Parameters: PK: int (primary key of dataset) Notes: Undeletes a previously soft-deleted dataset Copy POST: /v1/datasets/{PK}/copy Parameters: PK: int (primary key of dataset) Body: new_name: str Merge POST: /v1/datasets/{PK}/merge/{SOURCE_PK} Parameters: PK: int (primary key of dataset) SOURCE_PK: int (primary key of the dataset to merge into PK) Body: delete: bool hard: bool (optional, default: false) Add file POST: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Byte array attachment is the binary content of the file. Get file GET: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Returned byte array is the binary content of the file. Delete file DELETE: /v1/datasets/{PK}/files/{NAME} Parameters: PK: the primary key of the dataset NAME: the name of the file to delete Set meta-data POST: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Body: metadata: str (free form text meta-data) Get meta-data (for file) GET: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returned string is the meta-data for the file. Get meta-data (for dataset) GET: /v1/datasets/{PK}/metadata Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returns JSON with filename - meta-data string association.","title":"Core dataset"},{"location":"datasets/#fields","text":"Available fields: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Fields"},{"location":"datasets/#actions","text":"","title":"Actions"},{"location":"datasets/#list","text":"POST: /v1/datasets/list Body (optional): filter specification Response: array of name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"List"},{"location":"datasets/#load","text":"GET: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Response: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Load"},{"location":"datasets/#add","text":"POST: /v1/datasets/create Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Add"},{"location":"datasets/#update","text":"PUT: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Update"},{"location":"datasets/#partial-update","text":"PATCH: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Any of the following fields in the body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Partial update"},{"location":"datasets/#delete","text":"DELETE: /v1/datasets/{PK}[/hard] Parameters: PK: int (primary key of dataset) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"datasets/#reinstate","text":"DELETE: /v1/datasets/{PK}/reinstate Parameters: PK: int (primary key of dataset) Notes: Undeletes a previously soft-deleted dataset","title":"Reinstate"},{"location":"datasets/#copy","text":"POST: /v1/datasets/{PK}/copy Parameters: PK: int (primary key of dataset) Body: new_name: str","title":"Copy"},{"location":"datasets/#merge","text":"POST: /v1/datasets/{PK}/merge/{SOURCE_PK} Parameters: PK: int (primary key of dataset) SOURCE_PK: int (primary key of the dataset to merge into PK) Body: delete: bool hard: bool (optional, default: false)","title":"Merge"},{"location":"datasets/#add-file","text":"POST: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Byte array attachment is the binary content of the file.","title":"Add file"},{"location":"datasets/#get-file","text":"GET: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Returned byte array is the binary content of the file.","title":"Get file"},{"location":"datasets/#delete-file","text":"DELETE: /v1/datasets/{PK}/files/{NAME} Parameters: PK: the primary key of the dataset NAME: the name of the file to delete","title":"Delete file"},{"location":"datasets/#set-meta-data","text":"POST: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Body: metadata: str (free form text meta-data)","title":"Set meta-data"},{"location":"datasets/#get-meta-data-for-file","text":"GET: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returned string is the meta-data for the file.","title":"Get meta-data (for file)"},{"location":"datasets/#get-meta-data-for-dataset","text":"GET: /v1/datasets/{PK}/metadata Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returns JSON with filename - meta-data string association.","title":"Get meta-data (for dataset)"},{"location":"docker_images/","text":"Manages the docker images used by the worker nodes. Fields Available fields: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Actions List POST: /v1/docker/list Body (optional): filter specification Response: array of pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Load GET: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Add POST: /v1/docker/create Body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Update PUT: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Partial update PATCH: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Any of the following fields in the body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Delete DELETE: /v1/docker/{PK} Parameters: PK: int (primary key of docker image)","title":"Docker images"},{"location":"docker_images/#fields","text":"Available fields: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Fields"},{"location":"docker_images/#actions","text":"","title":"Actions"},{"location":"docker_images/#list","text":"POST: /v1/docker/list Body (optional): filter specification Response: array of pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"docker_images/#load","text":"GET: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"docker_images/#add","text":"POST: /v1/docker/create Body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"docker_images/#update","text":"PUT: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"docker_images/#partial-update","text":"PATCH: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Any of the following fields in the body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Partial update"},{"location":"docker_images/#delete","text":"DELETE: /v1/docker/{PK} Parameters: PK: int (primary key of docker image)","title":"Delete"},{"location":"domains/","text":"Centralized table with domains. Domains are automatically added to the database, depending on the available modules in the backend. Fields Available fields: name: str (od) description: str (Object detection) Actions List POST: /v1/domains/list Body (optional): filter specification Response: array of pk: int (primary key of domain) name: str description: str Load GET: /v1/domains/{PK} Parameters: PK: int (primary key of domain) Response: pk: int (primary key of domain) name: str description: str","title":"Domains"},{"location":"domains/#fields","text":"Available fields: name: str (od) description: str (Object detection)","title":"Fields"},{"location":"domains/#actions","text":"","title":"Actions"},{"location":"domains/#list","text":"POST: /v1/domains/list Body (optional): filter specification Response: array of pk: int (primary key of domain) name: str description: str","title":"List"},{"location":"domains/#load","text":"GET: /v1/domains/{PK} Parameters: PK: int (primary key of domain) Response: pk: int (primary key of domain) name: str description: str","title":"Load"},{"location":"filtering/","text":"The API supports generic filtering, which is applied to the database backend. Whilst very flexible, this also requires the knowledge of the underlying database field names. Top-level { \"expressions\": [ ... expressions ... ], \"order_by\": [ ... orderings ... ], \"include_inactive\": true/false } expressions is an array of expressions which filter the list. Each is applied in order, further filtering the result of the previous expressions. order_by is a list of orderings, in order of precedence. include_inactive is optional, and defaults to false if omitted. Otherwise it determines whether soft-deleted objects are included in the result. Expressions The following expressions ( type ) are available: or - can contain and(s) and other expressions sub_expressions - the sub-expressions to combine via logical OR and - cannot contain or(s) but other expressions sub_expressions - the sub-expressions to combine via logical AND exact - for exact matching of bool/int/float/str field: str - the field to work on value: bool/int/float/str - the value to match case_insensitive: bool - for strings only invert: bool - whether invert the matching, i.e., logical NOT contains - for sub-string matching field: str - the field to work on value: str - the sub-string to look for case_insensitive: bool invert: bool - whether invert the matching, i.e., logical NOT is_null - checks for NULL values field: str - the field to work on invert: bool - whether invert the matching, i.e., logical NOT compare field: str - the field to work on operator: str - the comparison to perform (<, >, >=, <=) value: bool/int/float/str - the value to compare against invert: bool - whether invert the comparison, i.e., logical NOT Order by { \"field\": \"my_field\", \"ascending\": true/false, \"nulls_first\": true/false } field : str - the field to enforce the ordering on ascending : bool - ascending or descending nulls_first : bool (optional) - whether nulls are listed first or last, uses database default if omitted Example The following filter searches for anyone with rob in their name (Robert, Robbie, etc.) who is not exactly 2m tall, unless their name is Robert, in which case they must be exactly 1.75m tall. Ignores the case of the names. Returns people in order of tallest to shortest, then alphabetically if their height is the same, and then by some mysterious third field for people with the same height and name. { \"expressions\": [ { \"sub_expressions\": [ { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"type\": \"exact\" }, { \"field\": \"height\", \"value\": 1.75, \"type\": \"exact\" } ], \"type\": \"and\" }, { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"invert\": true, \"type\": \"exact\" }, { \"field\": \"name\", \"sub_string\": \"rob\", \"case_insensitive\": true, \"type\": \"contains\" }, { \"field\": \"height\", \"value\": 2.0, \"invert\": true, \"type\": \"exact\" } ], \"type\": \"and\" } ], \"type\": \"or\" } ], \"order_by\": [ { \"field\": \"height\", \"ascending\": false }, { \"field\": \"name\" }, { \"field\": \"other\", \"nulls_first\": true } ], \"include_inactive\": false }","title":"Filtering"},{"location":"filtering/#top-level","text":"{ \"expressions\": [ ... expressions ... ], \"order_by\": [ ... orderings ... ], \"include_inactive\": true/false } expressions is an array of expressions which filter the list. Each is applied in order, further filtering the result of the previous expressions. order_by is a list of orderings, in order of precedence. include_inactive is optional, and defaults to false if omitted. Otherwise it determines whether soft-deleted objects are included in the result.","title":"Top-level"},{"location":"filtering/#expressions","text":"The following expressions ( type ) are available: or - can contain and(s) and other expressions sub_expressions - the sub-expressions to combine via logical OR and - cannot contain or(s) but other expressions sub_expressions - the sub-expressions to combine via logical AND exact - for exact matching of bool/int/float/str field: str - the field to work on value: bool/int/float/str - the value to match case_insensitive: bool - for strings only invert: bool - whether invert the matching, i.e., logical NOT contains - for sub-string matching field: str - the field to work on value: str - the sub-string to look for case_insensitive: bool invert: bool - whether invert the matching, i.e., logical NOT is_null - checks for NULL values field: str - the field to work on invert: bool - whether invert the matching, i.e., logical NOT compare field: str - the field to work on operator: str - the comparison to perform (<, >, >=, <=) value: bool/int/float/str - the value to compare against invert: bool - whether invert the comparison, i.e., logical NOT","title":"Expressions"},{"location":"filtering/#order-by","text":"{ \"field\": \"my_field\", \"ascending\": true/false, \"nulls_first\": true/false } field : str - the field to enforce the ordering on ascending : bool - ascending or descending nulls_first : bool (optional) - whether nulls are listed first or last, uses database default if omitted","title":"Order by"},{"location":"filtering/#example","text":"The following filter searches for anyone with rob in their name (Robert, Robbie, etc.) who is not exactly 2m tall, unless their name is Robert, in which case they must be exactly 1.75m tall. Ignores the case of the names. Returns people in order of tallest to shortest, then alphabetically if their height is the same, and then by some mysterious third field for people with the same height and name. { \"expressions\": [ { \"sub_expressions\": [ { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"type\": \"exact\" }, { \"field\": \"height\", \"value\": 1.75, \"type\": \"exact\" } ], \"type\": \"and\" }, { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"invert\": true, \"type\": \"exact\" }, { \"field\": \"name\", \"sub_string\": \"rob\", \"case_insensitive\": true, \"type\": \"contains\" }, { \"field\": \"height\", \"value\": 2.0, \"invert\": true, \"type\": \"exact\" } ], \"type\": \"and\" } ], \"type\": \"or\" } ], \"order_by\": [ { \"field\": \"height\", \"ascending\": false }, { \"field\": \"name\" }, { \"field\": \"other\", \"nulls_first\": true } ], \"include_inactive\": false }","title":"Example"},{"location":"frameworks/","text":"Centralized table with frameworks and their versions (e.g., PyTorch 1.2). Fields Available fields: name: str version: str Actions List POST: /v1/frameworks/list Body (optional): filter specification Response: array of pk: int (primary key of framework) name: str version: str Load GET: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Response: pk: int (primary key of framework) name: str version: str Add POST: /v1/frameworks/create Body: name: str version: str Response: pk: int (primary key of framework) name: str version: str Update PUT: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Body: name: str version: str Response: pk: int (primary key of framework) name: str version: str Partial update PATCH: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Any of the following fields in the body: name: str version: str Response: pk: int (primary key of framework) name: str version: str Delete DELETE: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework)","title":"Frameworks"},{"location":"frameworks/#fields","text":"Available fields: name: str version: str","title":"Fields"},{"location":"frameworks/#actions","text":"","title":"Actions"},{"location":"frameworks/#list","text":"POST: /v1/frameworks/list Body (optional): filter specification Response: array of pk: int (primary key of framework) name: str version: str","title":"List"},{"location":"frameworks/#load","text":"GET: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Response: pk: int (primary key of framework) name: str version: str","title":"Load"},{"location":"frameworks/#add","text":"POST: /v1/frameworks/create Body: name: str version: str Response: pk: int (primary key of framework) name: str version: str","title":"Add"},{"location":"frameworks/#update","text":"PUT: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Body: name: str version: str Response: pk: int (primary key of framework) name: str version: str","title":"Update"},{"location":"frameworks/#partial-update","text":"PATCH: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Any of the following fields in the body: name: str version: str Response: pk: int (primary key of framework) name: str version: str","title":"Partial update"},{"location":"frameworks/#delete","text":"DELETE: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework)","title":"Delete"},{"location":"hardware/","text":"For defining the graphics card hardware generations. Fields Available fields: generation: str min_compute_capability: float (inclusive) max_compute_capability: float (exclusive) Actions List POST: /v1/hardware/list Body (optional): filter specification Response: array of pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Load GET: /v1/hardware/{PK} Parameters: PK: int (primary key of hardware) Response: pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Add POST: /v1/hardware/create Body: generation: str min_compute_capability: float (incl) max_compute_capability: float (excl) Response: pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Update PUT: /v1/hardware/{PK} Parameters: PK: int (primary key of hardware) Body: generation: str min_compute_capability: float max_compute_capability: float Response: pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Partial update PATCH: /v1/hardware/{PK} Parameters: PK: int (primary key of hardware) Any of the following fields in the body: generation: str min_compute_capability: float max_compute_capability: float Response: pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Delete DELETE: /v1/hardware/{PK} Parameters: PK: int (primary key of hardware) Links CUDA/Hardware","title":"Hardware"},{"location":"hardware/#fields","text":"Available fields: generation: str min_compute_capability: float (inclusive) max_compute_capability: float (exclusive)","title":"Fields"},{"location":"hardware/#actions","text":"","title":"Actions"},{"location":"hardware/#list","text":"POST: /v1/hardware/list Body (optional): filter specification Response: array of pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"List"},{"location":"hardware/#load","text":"GET: /v1/hardware/{PK} Parameters: PK: int (primary key of hardware) Response: pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Load"},{"location":"hardware/#add","text":"POST: /v1/hardware/create Body: generation: str min_compute_capability: float (incl) max_compute_capability: float (excl) Response: pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Add"},{"location":"hardware/#update","text":"PUT: /v1/hardware/{PK} Parameters: PK: int (primary key of hardware) Body: generation: str min_compute_capability: float max_compute_capability: float Response: pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Update"},{"location":"hardware/#partial-update","text":"PATCH: /v1/hardware/{PK} Parameters: PK: int (primary key of hardware) Any of the following fields in the body: generation: str min_compute_capability: float max_compute_capability: float Response: pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Partial update"},{"location":"hardware/#delete","text":"DELETE: /v1/hardware/{PK} Parameters: PK: int (primary key of hardware)","title":"Delete"},{"location":"hardware/#links","text":"CUDA/Hardware","title":"Links"},{"location":"image_classification/","text":"Additional image classification dataset operations. For core dataset operations, see here . Fields files: array of file names categories: for each image name an array of category strings URL Uses /v1/classify/ instead of /v1/datasets/ , also for the core operations. Actions Add categories PATCH: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images Get categories GET: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images Response: for each image name an array of category strings Remove categories PATCH: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"remove\" images: array of image names categories: array of category strings to remove from all specified images","title":"Image classification"},{"location":"image_classification/#fields","text":"files: array of file names categories: for each image name an array of category strings","title":"Fields"},{"location":"image_classification/#url","text":"Uses /v1/classify/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"image_classification/#actions","text":"","title":"Actions"},{"location":"image_classification/#add-categories","text":"PATCH: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images","title":"Add categories"},{"location":"image_classification/#get-categories","text":"GET: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images Response: for each image name an array of category strings","title":"Get categories"},{"location":"image_classification/#remove-categories","text":"PATCH: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"remove\" images: array of image names categories: array of category strings to remove from all specified images","title":"Remove categories"},{"location":"job_templates/","text":"Manages the job templates. Fields Available fields: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp Actions List POST: /v1/job-templates/list Body (optional): filter specification Response: array of pk: int (primary key of job template) name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp Load GET: /v1/job-templates/{PK} Parameters: PK: int (primary key of job template) Response: pk: int (primary key of job template) name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp Add POST: /v1/job-templates/create Body: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str executor_class: str required_packages: str body: str Response: pk: int (primary key of job template) name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp Add input POST: /v1/job-templates/{PK}/inputs/{NAME} Parameters: PK: int (primary key of job template) NAME: str (name of the input) Body: type: str (bool/int/float/str/dataset/model/joboutput) options: str help: str Remove input DELETE: /v1/job-templates/{PK}/inputs/{NAME} Parameters: PK: int (primary key of job template) NAME: str (name of the input) Add parameter POST: /v1/job-templates/{PK}/parameters/{NAME} Parameters: PK: int (primary key of job template) NAME: str (name of the parameter) Body: type: str (bool/int/float/str/dataset/model/joboutput) default: str (the default value) help: str Remove parameter DELETE: /v1/job-templates/{PK}/parameters/{NAME} Parameters: PK: int (primary key of job template) NAME: str (name of the parameter) Update PUT: /v1/job-templates/{PK} Parameters: PK: int (primary key of job template) Body: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str executor_class: str required_packages: str body: str Response: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp Partial update PATCH: /v1/job-templates/{PK} Parameters: PK: int (primary key of job template) Any of the following fields in the body: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str executor_class: str required_packages: str body: str Response: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp Delete DELETE: /v1/job-templates/{PK}[/hard] Parameters: PK: int (primary key of job template) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate DELETE: /v1/job-templates/{PK}/reinstate Parameters: PK: int (primary key of job template) Notes: Undeletes a previously soft-deleted job template Export GET: /v1/job-templates/{PK}/export Parameters: PK: int (primary key of job template) Response: JSON representation of job template ( example ) Import POST: /v1/job-templates/import Body: JSON representation of job template ( example ) Response: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp New job POST: /v1/job-templates/{PK}/create-job Parameters: PK: int (primary key of job template) Body: docker_image: docker image ID description: str (optional) input_values: map of input values (name/value) parameter_values: map of parameter values (name/value) Response: job","title":"Job templates"},{"location":"job_templates/#fields","text":"Available fields: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Fields"},{"location":"job_templates/#actions","text":"","title":"Actions"},{"location":"job_templates/#list","text":"POST: /v1/job-templates/list Body (optional): filter specification Response: array of pk: int (primary key of job template) name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"job_templates/#load","text":"GET: /v1/job-templates/{PK} Parameters: PK: int (primary key of job template) Response: pk: int (primary key of job template) name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"job_templates/#add","text":"POST: /v1/job-templates/create Body: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str executor_class: str required_packages: str body: str Response: pk: int (primary key of job template) name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"job_templates/#add-input","text":"POST: /v1/job-templates/{PK}/inputs/{NAME} Parameters: PK: int (primary key of job template) NAME: str (name of the input) Body: type: str (bool/int/float/str/dataset/model/joboutput) options: str help: str","title":"Add input"},{"location":"job_templates/#remove-input","text":"DELETE: /v1/job-templates/{PK}/inputs/{NAME} Parameters: PK: int (primary key of job template) NAME: str (name of the input)","title":"Remove input"},{"location":"job_templates/#add-parameter","text":"POST: /v1/job-templates/{PK}/parameters/{NAME} Parameters: PK: int (primary key of job template) NAME: str (name of the parameter) Body: type: str (bool/int/float/str/dataset/model/joboutput) default: str (the default value) help: str","title":"Add parameter"},{"location":"job_templates/#remove-parameter","text":"DELETE: /v1/job-templates/{PK}/parameters/{NAME} Parameters: PK: int (primary key of job template) NAME: str (name of the parameter)","title":"Remove parameter"},{"location":"job_templates/#update","text":"PUT: /v1/job-templates/{PK} Parameters: PK: int (primary key of job template) Body: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str executor_class: str required_packages: str body: str Response: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"job_templates/#partial-update","text":"PATCH: /v1/job-templates/{PK} Parameters: PK: int (primary key of job template) Any of the following fields in the body: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str executor_class: str required_packages: str body: str Response: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Partial update"},{"location":"job_templates/#delete","text":"DELETE: /v1/job-templates/{PK}[/hard] Parameters: PK: int (primary key of job template) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"job_templates/#reinstate","text":"DELETE: /v1/job-templates/{PK}/reinstate Parameters: PK: int (primary key of job template) Notes: Undeletes a previously soft-deleted job template","title":"Reinstate"},{"location":"job_templates/#export","text":"GET: /v1/job-templates/{PK}/export Parameters: PK: int (primary key of job template) Response: JSON representation of job template ( example )","title":"Export"},{"location":"job_templates/#import","text":"POST: /v1/job-templates/import Body: JSON representation of job template ( example ) Response: name: str version: int scope: str (public/project/user) framework: framework ID domain: domain name type: str (train/predict/...) description: str inputs: array of (name: str, type: str, options: str, help: str) parameters: array of (name: str, type: str, default: str, help: str) executor_class: str required_packages: str body: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Import"},{"location":"job_templates/#new-job","text":"POST: /v1/job-templates/{PK}/create-job Parameters: PK: int (primary key of job template) Body: docker_image: docker image ID description: str (optional) input_values: map of input values (name/value) parameter_values: map of parameter values (name/value) Response: job","title":"New job"},{"location":"jobs/","text":"Manages the generated jobs. Fields Available fields: description: str docker_image: docker image ID template: job template ID input_values: map of (name: str, value: str) parameter_values: map of (name: str, value: str) outputs: array of (name: str, type: str) node: node ID error: str creator: user ID creation_time: timestamp deletion_time: timestamp start_time: timestamp end_time: timestamp Actions List POST: /v1/jobs/list Body (optional): filter specification Response: array of pk: int (primary key of job) description: str docker_image: docker image ID template: job template ID input_values: map of (name: str, value: str) parameter_values: map of (name: str, value: str) outputs: array of (name: str, type: str) node: node ID error: str creator: user ID creation_time: timestamp deletion_time: timestamp start_time: timestamp end_time: timestamp Load GET: /v1/jobs/{PK} Parameters: PK: int (primary key of job) Response: pk: int (primary key of job) description: str docker_image: docker image ID template: job template ID input_values: map of (name: str, value: str) parameter_values: map of (name: str, value: str) outputs: array of (name: str, type: str) node: node ID error: str creator: user ID creation_time: timestamp deletion_time: timestamp start_time: timestamp end_time: timestamp Add output POST: /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters: PK: the primary key of the job NAME: the name of the output to add TYPE: the type of the output to add Byte array attachment is the binary content of the output. Get output GET: /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters: PK: the primary key of the job NAME: the name of the output to retrieve TYPE: the type of the output to retrieve Returned byte array is the binary content of the output. Delete output DELETE: /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters: PK: the primary key of the job NAME: the name of the output to delete TYPE: the type of the output to delete Delete DELETE: /v1/jobs/{PK}[/hard] Parameters: PK: int (primary key of job) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate DELETE: /v1/jobs/{PK}/reinstate Parameters: PK: int (primary key of job) Notes: Undeletes a previously soft-deleted job","title":"Jobs"},{"location":"jobs/#fields","text":"Available fields: description: str docker_image: docker image ID template: job template ID input_values: map of (name: str, value: str) parameter_values: map of (name: str, value: str) outputs: array of (name: str, type: str) node: node ID error: str creator: user ID creation_time: timestamp deletion_time: timestamp start_time: timestamp end_time: timestamp","title":"Fields"},{"location":"jobs/#actions","text":"","title":"Actions"},{"location":"jobs/#list","text":"POST: /v1/jobs/list Body (optional): filter specification Response: array of pk: int (primary key of job) description: str docker_image: docker image ID template: job template ID input_values: map of (name: str, value: str) parameter_values: map of (name: str, value: str) outputs: array of (name: str, type: str) node: node ID error: str creator: user ID creation_time: timestamp deletion_time: timestamp start_time: timestamp end_time: timestamp","title":"List"},{"location":"jobs/#load","text":"GET: /v1/jobs/{PK} Parameters: PK: int (primary key of job) Response: pk: int (primary key of job) description: str docker_image: docker image ID template: job template ID input_values: map of (name: str, value: str) parameter_values: map of (name: str, value: str) outputs: array of (name: str, type: str) node: node ID error: str creator: user ID creation_time: timestamp deletion_time: timestamp start_time: timestamp end_time: timestamp","title":"Load"},{"location":"jobs/#add-output","text":"POST: /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters: PK: the primary key of the job NAME: the name of the output to add TYPE: the type of the output to add Byte array attachment is the binary content of the output.","title":"Add output"},{"location":"jobs/#get-output","text":"GET: /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters: PK: the primary key of the job NAME: the name of the output to retrieve TYPE: the type of the output to retrieve Returned byte array is the binary content of the output.","title":"Get output"},{"location":"jobs/#delete-output","text":"DELETE: /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters: PK: the primary key of the job NAME: the name of the output to delete TYPE: the type of the output to delete","title":"Delete output"},{"location":"jobs/#delete","text":"DELETE: /v1/jobs/{PK}[/hard] Parameters: PK: int (primary key of job) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"jobs/#reinstate","text":"DELETE: /v1/jobs/{PK}/reinstate Parameters: PK: int (primary key of job) Notes: Undeletes a previously soft-deleted job","title":"Reinstate"},{"location":"licenses/","text":"Gives access to the available licenses on the server. Fields Available fields: name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Actions List POST: /v1/licences/list Body (optional): filter specification Response: array of pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Load GET: /v1/licences/{PK} Parameters: PK: int (primary key of license) Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Add POST: /v1/licences/create Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Update PUT: /v1/licences/{PK} Parameters: PK: int (primary key of license) Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Partial update PATCH: /v1/licences/{PK} Parameters: PK: int (primary key of license) Any of the following fields in the body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Modify domains/permissions/limitations/conditions PATCH: /v1/licences/{PK}/subdescriptors Parameters: PK: int (primary key of license) Body: method: str (add/remove) type: str (domains/permissions/limitations/conditions) names: array of str Delete DELETE: /v1/licences/{PK} Parameters: PK: int (primary key of license)","title":"Licenses"},{"location":"licenses/#fields","text":"Available fields: name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Fields"},{"location":"licenses/#actions","text":"","title":"Actions"},{"location":"licenses/#list","text":"POST: /v1/licences/list Body (optional): filter specification Response: array of pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"List"},{"location":"licenses/#load","text":"GET: /v1/licences/{PK} Parameters: PK: int (primary key of license) Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Load"},{"location":"licenses/#add","text":"POST: /v1/licences/create Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Add"},{"location":"licenses/#update","text":"PUT: /v1/licences/{PK} Parameters: PK: int (primary key of license) Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Update"},{"location":"licenses/#partial-update","text":"PATCH: /v1/licences/{PK} Parameters: PK: int (primary key of license) Any of the following fields in the body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Partial update"},{"location":"licenses/#modify-domainspermissionslimitationsconditions","text":"PATCH: /v1/licences/{PK}/subdescriptors Parameters: PK: int (primary key of license) Body: method: str (add/remove) type: str (domains/permissions/limitations/conditions) names: array of str","title":"Modify domains/permissions/limitations/conditions"},{"location":"licenses/#delete","text":"DELETE: /v1/licences/{PK} Parameters: PK: int (primary key of license)","title":"Delete"},{"location":"nodes/","text":"Contains information about the registered worker nodes. Fields Available fields: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Actions List POST: /v1/nodes/list Body (optional): filter specification Response: array of pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Load GET: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Add POST: /v1/nodes/create Body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Update PUT: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Partial update PATCH: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Any of the following fields in the body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Delete DELETE: /v1/nodes/{PK} Parameters: PK: int (primary key of node)","title":"Nodes"},{"location":"nodes/#fields","text":"Available fields: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Fields"},{"location":"nodes/#actions","text":"","title":"Actions"},{"location":"nodes/#list","text":"POST: /v1/nodes/list Body (optional): filter specification Response: array of pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"List"},{"location":"nodes/#load","text":"GET: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Load"},{"location":"nodes/#add","text":"POST: /v1/nodes/create Body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Add"},{"location":"nodes/#update","text":"PUT: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Update"},{"location":"nodes/#partial-update","text":"PATCH: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Any of the following fields in the body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Partial update"},{"location":"nodes/#delete","text":"DELETE: /v1/nodes/{PK} Parameters: PK: int (primary key of node)","title":"Delete"},{"location":"object_detection/","text":"Additional object detection dataset operations. For core dataset operations, see here . Fields files: array of file names annotations: for each image name an array of Annotation objects Annotation object fields: x: int y: int width: int height: int label: str polygon: polygon object (optional) Polygon object fields: points: array of array with two int values (x, y) URL Uses /v1/objdet/ instead of /v1/datasets/ , also for the core operations. Actions Add annotations POST: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set annotations for) Body: annotations: array of Annotation objects Get annotations GET: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to get annotations for) Response: array of Annotation objects Delete annotations DELETE: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to remove the annotations for)","title":"Object Detection"},{"location":"object_detection/#fields","text":"files: array of file names annotations: for each image name an array of Annotation objects Annotation object fields: x: int y: int width: int height: int label: str polygon: polygon object (optional) Polygon object fields: points: array of array with two int values (x, y)","title":"Fields"},{"location":"object_detection/#url","text":"Uses /v1/objdet/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"object_detection/#actions","text":"","title":"Actions"},{"location":"object_detection/#add-annotations","text":"POST: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set annotations for) Body: annotations: array of Annotation objects","title":"Add annotations"},{"location":"object_detection/#get-annotations","text":"GET: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to get annotations for) Response: array of Annotation objects","title":"Get annotations"},{"location":"object_detection/#delete-annotations","text":"DELETE: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to remove the annotations for)","title":"Delete annotations"},{"location":"pretrained_models/","text":"Manages the pre-trained models, centralizing downloads to decrease network congestion. Fields Available fields: name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp Actions List POST: /v1/pretrained-models/list Body (optional): filter specification Response: array of pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp Load GET: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp Add POST: /v1/pretrained-models/create Body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp Update PUT: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp Partial update PATCH: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Any of the following fields in the body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp Delete DELETE: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model)","title":"Pretrained models"},{"location":"pretrained_models/#fields","text":"Available fields: name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Fields"},{"location":"pretrained_models/#actions","text":"","title":"Actions"},{"location":"pretrained_models/#list","text":"POST: /v1/pretrained-models/list Body (optional): filter specification Response: array of pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"pretrained_models/#load","text":"GET: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"pretrained_models/#add","text":"POST: /v1/pretrained-models/create Body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"pretrained_models/#update","text":"PUT: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"pretrained_models/#partial-update","text":"PATCH: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Any of the following fields in the body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Partial update"},{"location":"pretrained_models/#delete","text":"DELETE: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model)","title":"Delete"},{"location":"projects/","text":"Projects link datasets and projects. Fields Available fields: name: str project: project ID creator: user ID creation_time: timestamp deletion_time: timestamp Actions List POST: /v1/projects/list Body (optional): filter specification Response: array of pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Load GET: /v1/projects/{PK} Parameters: PK: int (primary key of project) Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Add POST: /v1/project/create Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Update PUT: /v1/project/{PK} Parameters: PK: int (primary key of project) Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Partial update PATCH: /v1/project/{PK} Parameters: PK: int (primary key of project) Any of the following fields in the body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Delete DELETE: /v1/project/{PK}[/hard] Parameters: PK: int (primary key of project) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate DELETE: /v1/project/{PK}/reinstate Parameters: PK: int (primary key of project) Notes: Undeletes a previously soft-deleted project","title":"Projects"},{"location":"projects/#fields","text":"Available fields: name: str project: project ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Fields"},{"location":"projects/#actions","text":"","title":"Actions"},{"location":"projects/#list","text":"POST: /v1/projects/list Body (optional): filter specification Response: array of pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"projects/#load","text":"GET: /v1/projects/{PK} Parameters: PK: int (primary key of project) Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"projects/#add","text":"POST: /v1/project/create Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"projects/#update","text":"PUT: /v1/project/{PK} Parameters: PK: int (primary key of project) Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"projects/#partial-update","text":"PATCH: /v1/project/{PK} Parameters: PK: int (primary key of project) Any of the following fields in the body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Partial update"},{"location":"projects/#delete","text":"DELETE: /v1/project/{PK}[/hard] Parameters: PK: int (primary key of project) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"projects/#reinstate","text":"DELETE: /v1/project/{PK}/reinstate Parameters: PK: int (primary key of project) Notes: Undeletes a previously soft-deleted project","title":"Reinstate"},{"location":"speech/","text":"Additional speech dataset operations. For core dataset operations, see here . Fields files: array of file names transcriptions: for each image name a transcription (nested object, transcription field) URL Uses /v1/speech/ instead of /v1/datasets/ , also for the core operations. Actions Add transcript POST: /v1/speech/{PK}/transcriptions/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set the transcript for) Body: transcription: str Get transcripts GET: /v1/speech/{PK}/transcriptions Parameters: PK: int (primary key of dataset) Response: for each image name the corresponding transcript (nested object, transcription field)","title":"Speech"},{"location":"speech/#fields","text":"files: array of file names transcriptions: for each image name a transcription (nested object, transcription field)","title":"Fields"},{"location":"speech/#url","text":"Uses /v1/speech/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"speech/#actions","text":"","title":"Actions"},{"location":"speech/#add-transcript","text":"POST: /v1/speech/{PK}/transcriptions/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set the transcript for) Body: transcription: str","title":"Add transcript"},{"location":"speech/#get-transcripts","text":"GET: /v1/speech/{PK}/transcriptions Parameters: PK: int (primary key of dataset) Response: for each image name the corresponding transcript (nested object, transcription field)","title":"Get transcripts"},{"location":"teams/","text":"Teams combine users and their permissions. Fields Available fields: name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Permissions: R - read W - write X - job execute A - admin Actions List POST: /v1/teams/list Body (optional): filter specification Response: array of pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Load GET: /v1/teams/{PK} Parameters: PK: int (primary key of team) Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Add POST: /v1/team/create Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Update PUT: /v1/team/{PK} Parameters: PK: int (primary key of team) Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Modify membership PATCH: /v1/team/{PK}/memberships Parameters: PK: int (primary key of team) Body: method: str (add/remove/remove) username: str permissions: str (R/W/X/A, only add/update) Delete DELETE: /v1/team/{PK}[/hard] Parameters: PK: int (primary key of team) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate DELETE: /v1/team/{PK}/reinstate Parameters: PK: int (primary key of team) Notes: Undeletes a previously soft-deleted team","title":"Teams"},{"location":"teams/#fields","text":"Available fields: name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Permissions: R - read W - write X - job execute A - admin","title":"Fields"},{"location":"teams/#actions","text":"","title":"Actions"},{"location":"teams/#list","text":"POST: /v1/teams/list Body (optional): filter specification Response: array of pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"teams/#load","text":"GET: /v1/teams/{PK} Parameters: PK: int (primary key of team) Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"teams/#add","text":"POST: /v1/team/create Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"teams/#update","text":"PUT: /v1/team/{PK} Parameters: PK: int (primary key of team) Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"teams/#modify-membership","text":"PATCH: /v1/team/{PK}/memberships Parameters: PK: int (primary key of team) Body: method: str (add/remove/remove) username: str permissions: str (R/W/X/A, only add/update)","title":"Modify membership"},{"location":"teams/#delete","text":"DELETE: /v1/team/{PK}[/hard] Parameters: PK: int (primary key of team) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"teams/#reinstate","text":"DELETE: /v1/team/{PK}/reinstate Parameters: PK: int (primary key of team) Notes: Undeletes a previously soft-deleted team","title":"Reinstate"},{"location":"users/","text":"Manages the users of the server. Fields Available fields: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Actions List POST: /v1/users/list Body (optional): filter specification Response: array of pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Load GET: /v1/users/{PK} Parameters: PK: int (primary key of user) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool Add POST: /v1/users/create Body: username: str password: str first_name: str last_name: str email: str Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Update PUT: /v1/users/{PK} Parameters: PK: int (primary key of user) Body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Partial update PATCH: /v1/users/{PK} Parameters: PK: int (primary key of user) Any of the following fields in the body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Delete DELETE: /v1/users/{PK} Parameters: PK: int (primary key of user)","title":"Users"},{"location":"users/#fields","text":"Available fields: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Fields"},{"location":"users/#actions","text":"","title":"Actions"},{"location":"users/#list","text":"POST: /v1/users/list Body (optional): filter specification Response: array of pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"List"},{"location":"users/#load","text":"GET: /v1/users/{PK} Parameters: PK: int (primary key of user) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool","title":"Load"},{"location":"users/#add","text":"POST: /v1/users/create Body: username: str password: str first_name: str last_name: str email: str Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Add"},{"location":"users/#update","text":"PUT: /v1/users/{PK} Parameters: PK: int (primary key of user) Body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Update"},{"location":"users/#partial-update","text":"PATCH: /v1/users/{PK} Parameters: PK: int (primary key of user) Any of the following fields in the body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Partial update"},{"location":"users/#delete","text":"DELETE: /v1/users/{PK} Parameters: PK: int (primary key of user)","title":"Delete"}]}