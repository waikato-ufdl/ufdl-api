{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Contains the REST API documentation of the User-friendly Deep Learning (UFDL) framework . The documentation available here is to be considered work in progress and can change at any given time as the project evolves. All requests and responses are JSON, unless stated otherwise.","title":"Home"},{"location":"audio_classification/","text":"Audio classification is used to assign categories to audio samples at certain timestamps (for a specified duration), e.g., whether the sample represents a particular song bird. Use-cases The following use-cases must be covered. Create dataset requires: name of dataset project it belongs to (optional; default is all project) users allowed to manage it (optional; default is only user creating it) license (default: proprietary, ie all rights reserved) optional tag(s) Delete dataset requires: name of dataset List datasets requires: filters for tags, license, ... List images in dataset requires: name of dataset to list Modify dataset Sub use-cases: Add sound file requires: name of dataset to add to one or more annotations, for each: start timestamp duration category Delete sound file Automatically removes any associated categories. requires: name of dataset to remove from name of sound file(s) to remove Add annotations requires: name of dataset to add to name of sound(s) to add to the annotations to add, for each annotation: start timestamp duration label Delete annotations requires: name of dataset to remove from name of sound file(s) to remove from Change license requires: name of dataset to update license Tag dataset requires: name of dataset to tag tag(s) Download Download sound file requires: name of dataset name of sound file Download annotations requires: name of dataset annotation format Download dataset Downloads the complete dataset as ZIP file. requires: name of dataset annotation format","title":"Audio classification"},{"location":"audio_classification/#use-cases","text":"The following use-cases must be covered.","title":"Use-cases"},{"location":"audio_classification/#create-dataset","text":"requires: name of dataset project it belongs to (optional; default is all project) users allowed to manage it (optional; default is only user creating it) license (default: proprietary, ie all rights reserved) optional tag(s)","title":"Create dataset"},{"location":"audio_classification/#delete-dataset","text":"requires: name of dataset","title":"Delete dataset"},{"location":"audio_classification/#list-datasets","text":"requires: filters for tags, license, ...","title":"List datasets"},{"location":"audio_classification/#list-images-in-dataset","text":"requires: name of dataset to list","title":"List images in dataset"},{"location":"audio_classification/#modify-dataset","text":"Sub use-cases:","title":"Modify dataset"},{"location":"audio_classification/#add-sound-file","text":"requires: name of dataset to add to one or more annotations, for each: start timestamp duration category","title":"Add sound file"},{"location":"audio_classification/#delete-sound-file","text":"Automatically removes any associated categories. requires: name of dataset to remove from name of sound file(s) to remove","title":"Delete sound file"},{"location":"audio_classification/#add-annotations","text":"requires: name of dataset to add to name of sound(s) to add to the annotations to add, for each annotation: start timestamp duration label","title":"Add annotations"},{"location":"audio_classification/#delete-annotations","text":"requires: name of dataset to remove from name of sound file(s) to remove from","title":"Delete annotations"},{"location":"audio_classification/#change-license","text":"requires: name of dataset to update license","title":"Change license"},{"location":"audio_classification/#tag-dataset","text":"requires: name of dataset to tag tag(s)","title":"Tag dataset"},{"location":"audio_classification/#download","text":"","title":"Download"},{"location":"audio_classification/#download-sound-file","text":"requires: name of dataset name of sound file","title":"Download sound file"},{"location":"audio_classification/#download-annotations","text":"requires: name of dataset annotation format","title":"Download annotations"},{"location":"audio_classification/#download-dataset","text":"Downloads the complete dataset as ZIP file. requires: name of dataset annotation format","title":"Download dataset"},{"location":"authentication/","text":"Authentication is done via JSON Web Tokens (JWT) . Actions Obtain POST: /v1/auth/obtain Body: username password Response: access: str (JWT token for accessing API) refresh: str (JWT token to refresh access token) Refresh POST: /v1/auth/refresh Body: refresh: str (the JWT refresh token) Response: access: str (JWT token for accessing API) API calls Subsequent API calls must include the access token in the Authorization HTTP header as follows: Bearer <JWT access token>","title":"Authentication"},{"location":"authentication/#actions","text":"","title":"Actions"},{"location":"authentication/#obtain","text":"POST: /v1/auth/obtain Body: username password Response: access: str (JWT token for accessing API) refresh: str (JWT token to refresh access token)","title":"Obtain"},{"location":"authentication/#refresh","text":"POST: /v1/auth/refresh Body: refresh: str (the JWT refresh token) Response: access: str (JWT token for accessing API)","title":"Refresh"},{"location":"authentication/#api-calls","text":"Subsequent API calls must include the access token in the Authorization HTTP header as follows: Bearer <JWT access token>","title":"API calls"},{"location":"cuda/","text":"Based on the NVIDIA driver installed on a system only certain versions of CUDA inside docker images will work. Links CUDA/Driver version Fields pk: int (primary key of CUDA instance) version: str (10.0) full_version: str (10.0.130) min_driver_version: str (410.48) Actions List Lists the CUDA versions registered with the backend. Method POST URL /v1/cuda/list Body (optional) filter specification Permissions user is authenticated Response array of pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Create Adds a new CUDA version to the backend. Method POST URL /v1/cuda/create Body version: str full_version: str min_driver_version: str Permissions user is an admin Response pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Retrieve Retrieves the details about a specific CUDA version. Method GET URL /v1/cuda/{PK} Parameters PK : int (primary key of CUDA version) Permissions user is authenticated Response pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Update Updates the details of a specific CUDA version. Method PUT URL /v1/cuda/{PK} Parameters PK : int (primary key of CUDA version) Body version: str full_version: str min_driver_version: str Permissions user is an admin Response pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Partial Update Updates a sub-set of details about a particular CUDA version. METHOD PATCH URL /v1/cuda/{PK} Parameters PK : int (primary key of CUDA version) Body version (optional): str full_version (optional): str min_driver_version (optional): str Permissions user is an admin Response pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str Destroy Removes a CUDA version from the backend. Method DELETE URL /v1/cuda/{PK} Parameters PK : int (primary key of CUDA version) Permissions user is an admin","title":"CUDA"},{"location":"cuda/#links","text":"CUDA/Driver version","title":"Links"},{"location":"cuda/#fields","text":"pk: int (primary key of CUDA instance) version: str (10.0) full_version: str (10.0.130) min_driver_version: str (410.48)","title":"Fields"},{"location":"cuda/#actions","text":"","title":"Actions"},{"location":"cuda/#list","text":"Lists the CUDA versions registered with the backend.","title":"List"},{"location":"cuda/#method","text":"POST","title":"Method"},{"location":"cuda/#url","text":"/v1/cuda/list","title":"URL"},{"location":"cuda/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"cuda/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"cuda/#response","text":"array of pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#create","text":"Adds a new CUDA version to the backend.","title":"Create"},{"location":"cuda/#method_1","text":"POST","title":"Method"},{"location":"cuda/#url_1","text":"/v1/cuda/create","title":"URL"},{"location":"cuda/#body","text":"version: str full_version: str min_driver_version: str","title":"Body"},{"location":"cuda/#permissions_1","text":"user is an admin","title":"Permissions"},{"location":"cuda/#response_1","text":"pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#retrieve","text":"Retrieves the details about a specific CUDA version.","title":"Retrieve"},{"location":"cuda/#method_2","text":"GET","title":"Method"},{"location":"cuda/#url_2","text":"/v1/cuda/{PK}","title":"URL"},{"location":"cuda/#parameters","text":"PK : int (primary key of CUDA version)","title":"Parameters"},{"location":"cuda/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"cuda/#response_2","text":"pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#update","text":"Updates the details of a specific CUDA version.","title":"Update"},{"location":"cuda/#method_3","text":"PUT","title":"Method"},{"location":"cuda/#url_3","text":"/v1/cuda/{PK}","title":"URL"},{"location":"cuda/#parameters_1","text":"PK : int (primary key of CUDA version)","title":"Parameters"},{"location":"cuda/#body_1","text":"version: str full_version: str min_driver_version: str","title":"Body"},{"location":"cuda/#permissions_3","text":"user is an admin","title":"Permissions"},{"location":"cuda/#response_3","text":"pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#partial-update","text":"Updates a sub-set of details about a particular CUDA version.","title":"Partial Update"},{"location":"cuda/#method_4","text":"PATCH","title":"METHOD"},{"location":"cuda/#url_4","text":"/v1/cuda/{PK}","title":"URL"},{"location":"cuda/#parameters_2","text":"PK : int (primary key of CUDA version)","title":"Parameters"},{"location":"cuda/#body_2","text":"version (optional): str full_version (optional): str min_driver_version (optional): str","title":"Body"},{"location":"cuda/#permissions_4","text":"user is an admin","title":"Permissions"},{"location":"cuda/#response_4","text":"pk: int (primary key of CUDA version) version: str full_version: str min_driver_version: str","title":"Response"},{"location":"cuda/#destroy","text":"Removes a CUDA version from the backend.","title":"Destroy"},{"location":"cuda/#method_5","text":"DELETE","title":"Method"},{"location":"cuda/#url_5","text":"/v1/cuda/{PK}","title":"URL"},{"location":"cuda/#parameters_3","text":"PK : int (primary key of CUDA version)","title":"Parameters"},{"location":"cuda/#permissions_5","text":"user is an admin","title":"Permissions"},{"location":"datasets/","text":"Core dataset operations. Fields Available fields: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Actions List POST: /v1/datasets/list Body (optional): filter specification Response: array of name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Load GET: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Response: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Add POST: /v1/datasets/create Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Update PUT: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Partial update PATCH: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Any of the following fields in the body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Clear DELETE: /v1/datasets/{PK}/clear Parameters: PK: int (primary key of dataset) Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Notes: Removes meta-data and annotations from a dataset Delete DELETE: /v1/datasets/{PK}[/hard] Parameters: PK: int (primary key of dataset) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate DELETE: /v1/datasets/{PK}/reinstate Parameters: PK: int (primary key of dataset) Notes: Undeletes a previously soft-deleted dataset Copy POST: /v1/datasets/{PK}/copy Parameters: PK: int (primary key of dataset) Body: new_name: str Merge POST: /v1/datasets/{PK}/merge/{SOURCE_PK} Parameters: PK: int (primary key of dataset) SOURCE_PK: int (primary key of the dataset to merge into PK) Body: delete: bool hard: bool (optional, default: false) Add file POST: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Byte array attachment is the binary content of the file. Get file GET: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Returned byte array is the binary content of the file. Delete file DELETE: /v1/datasets/{PK}/files/{NAME} Parameters: PK: the primary key of the dataset NAME: the name of the file to delete Set meta-data POST: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Body: metadata: str (free form text meta-data) Get meta-data (for file) GET: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returned string is the meta-data for the file. Get meta-data (for dataset) GET: /v1/datasets/{PK}/metadata Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returns JSON with filename - meta-data string association.","title":"Core dataset"},{"location":"datasets/#fields","text":"Available fields: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Fields"},{"location":"datasets/#actions","text":"","title":"Actions"},{"location":"datasets/#list","text":"POST: /v1/datasets/list Body (optional): filter specification Response: array of name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"List"},{"location":"datasets/#load","text":"GET: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Response: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Load"},{"location":"datasets/#add","text":"POST: /v1/datasets/create Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Add"},{"location":"datasets/#update","text":"PUT: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Update"},{"location":"datasets/#partial-update","text":"PATCH: /v1/datasets/{PK} Parameters: PK: int (primary key of dataset) Any of the following fields in the body: name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str)","title":"Partial update"},{"location":"datasets/#clear","text":"DELETE: /v1/datasets/{PK}/clear Parameters: PK: int (primary key of dataset) Response: pk: int (primary key of dataset) name: str description: str version: int project: project ID licence: license ID tags: str is_public: bool creator: user ID creation_time: timestamp deletion_time: timestamp files: array of file names (str) Notes: Removes meta-data and annotations from a dataset","title":"Clear"},{"location":"datasets/#delete","text":"DELETE: /v1/datasets/{PK}[/hard] Parameters: PK: int (primary key of dataset) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"datasets/#reinstate","text":"DELETE: /v1/datasets/{PK}/reinstate Parameters: PK: int (primary key of dataset) Notes: Undeletes a previously soft-deleted dataset","title":"Reinstate"},{"location":"datasets/#copy","text":"POST: /v1/datasets/{PK}/copy Parameters: PK: int (primary key of dataset) Body: new_name: str","title":"Copy"},{"location":"datasets/#merge","text":"POST: /v1/datasets/{PK}/merge/{SOURCE_PK} Parameters: PK: int (primary key of dataset) SOURCE_PK: int (primary key of the dataset to merge into PK) Body: delete: bool hard: bool (optional, default: false)","title":"Merge"},{"location":"datasets/#add-file","text":"POST: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Byte array attachment is the binary content of the file.","title":"Add file"},{"location":"datasets/#get-file","text":"GET: /v1/datasets/{PK}/files/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file to use in the dataset) Returned byte array is the binary content of the file.","title":"Get file"},{"location":"datasets/#delete-file","text":"DELETE: /v1/datasets/{PK}/files/{NAME} Parameters: PK: the primary key of the dataset NAME: the name of the file to delete","title":"Delete file"},{"location":"datasets/#set-meta-data","text":"POST: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Body: metadata: str (free form text meta-data)","title":"Set meta-data"},{"location":"datasets/#get-meta-data-for-file","text":"GET: /v1/datasets/{PK}/metadata/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returned string is the meta-data for the file.","title":"Get meta-data (for file)"},{"location":"datasets/#get-meta-data-for-dataset","text":"GET: /v1/datasets/{PK}/metadata Parameters: PK: int (primary key of dataset) NAME: str (the name of the file in the dataset) Returns JSON with filename - meta-data string association.","title":"Get meta-data (for dataset)"},{"location":"docker_images/","text":"Manages the docker images used by the worker nodes. Fields Available fields: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Actions List POST: /v1/docker/list Body (optional): filter specification Response: array of pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Load GET: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Add POST: /v1/docker/create Body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Update PUT: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Partial update PATCH: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Any of the following fields in the body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp Delete DELETE: /v1/docker/{PK} Parameters: PK: int (primary key of docker image)","title":"Docker images"},{"location":"docker_images/#fields","text":"Available fields: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Fields"},{"location":"docker_images/#actions","text":"","title":"Actions"},{"location":"docker_images/#list","text":"POST: /v1/docker/list Body (optional): filter specification Response: array of pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"docker_images/#load","text":"GET: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"docker_images/#add","text":"POST: /v1/docker/create Body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"docker_images/#update","text":"PUT: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"docker_images/#partial-update","text":"PATCH: /v1/docker/{PK} Parameters: PK: int (primary key of docker image) Any of the following fields in the body: name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID Response: pk: int (primary key of docker image) name: str version: str url: str registry: str (URL) registry_username: str (only if registry requires login) registry_password: str cuda_version: CUDA ID min_hardware_generation: hardware ID cpu: bool (works on CPU only?) framework: framework ID domain: domain name tasks: array of str (train/predict/...) licence: license ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Partial update"},{"location":"docker_images/#delete","text":"DELETE: /v1/docker/{PK} Parameters: PK: int (primary key of docker image)","title":"Delete"},{"location":"domains/","text":"Centralized table with domains. Domains are automatically added to the database, depending on the available modules in the backend. Fields Available fields: name: str (od) description: str (Object detection) Actions List POST: /v1/domains/list Body (optional): filter specification Response: array of pk: int (primary key of domain) name: str description: str Load GET: /v1/domains/{PK} Parameters: PK: int (primary key of domain) Response: pk: int (primary key of domain) name: str description: str","title":"Domains"},{"location":"domains/#fields","text":"Available fields: name: str (od) description: str (Object detection)","title":"Fields"},{"location":"domains/#actions","text":"","title":"Actions"},{"location":"domains/#list","text":"POST: /v1/domains/list Body (optional): filter specification Response: array of pk: int (primary key of domain) name: str description: str","title":"List"},{"location":"domains/#load","text":"GET: /v1/domains/{PK} Parameters: PK: int (primary key of domain) Response: pk: int (primary key of domain) name: str description: str","title":"Load"},{"location":"filtering/","text":"The API supports generic filtering, which is applied to the database backend. Whilst very flexible, this also requires the knowledge of the underlying database field names. Top-level { \"expressions\": [ ... expressions ... ], \"order_by\": [ ... orderings ... ], \"include_inactive\": true/false } expressions is an array of expressions which filter the list. Each is applied in order, further filtering the result of the previous expressions. order_by is a list of orderings, in order of precedence. include_inactive is optional, and defaults to false if omitted. Otherwise it determines whether soft-deleted objects are included in the result. Expressions The following expressions ( type ) are available: or - can contain and(s) and other expressions sub_expressions - the sub-expressions to combine via logical OR and - cannot contain or(s) but other expressions sub_expressions - the sub-expressions to combine via logical AND exact - for exact matching of bool/int/float/str field: str - the field to work on value: bool/int/float/str - the value to match case_insensitive: bool - for strings only invert: bool - whether invert the matching, i.e., logical NOT contains - for sub-string matching field: str - the field to work on value: str - the sub-string to look for case_insensitive: bool invert: bool - whether invert the matching, i.e., logical NOT is_null - checks for NULL values field: str - the field to work on invert: bool - whether invert the matching, i.e., logical NOT compare field: str - the field to work on operator: str - the comparison to perform (<, >, >=, <=) value: bool/int/float/str - the value to compare against invert: bool - whether invert the comparison, i.e., logical NOT Order by { \"field\": \"my_field\", \"ascending\": true/false, \"nulls_first\": true/false } field : str - the field to enforce the ordering on ascending : bool - ascending or descending nulls_first : bool (optional) - whether nulls are listed first or last, uses database default if omitted Example The following filter searches for anyone with rob in their name (Robert, Robbie, etc.) who is not exactly 2m tall, unless their name is Robert, in which case they must be exactly 1.75m tall. Ignores the case of the names. Returns people in order of tallest to shortest, then alphabetically if their height is the same, and then by some mysterious third field for people with the same height and name. { \"expressions\": [ { \"sub_expressions\": [ { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"type\": \"exact\" }, { \"field\": \"height\", \"value\": 1.75, \"type\": \"exact\" } ], \"type\": \"and\" }, { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"invert\": true, \"type\": \"exact\" }, { \"field\": \"name\", \"sub_string\": \"rob\", \"case_insensitive\": true, \"type\": \"contains\" }, { \"field\": \"height\", \"value\": 2.0, \"invert\": true, \"type\": \"exact\" } ], \"type\": \"and\" } ], \"type\": \"or\" } ], \"order_by\": [ { \"field\": \"height\", \"ascending\": false }, { \"field\": \"name\" }, { \"field\": \"other\", \"nulls_first\": true } ], \"include_inactive\": false }","title":"Filtering"},{"location":"filtering/#top-level","text":"{ \"expressions\": [ ... expressions ... ], \"order_by\": [ ... orderings ... ], \"include_inactive\": true/false } expressions is an array of expressions which filter the list. Each is applied in order, further filtering the result of the previous expressions. order_by is a list of orderings, in order of precedence. include_inactive is optional, and defaults to false if omitted. Otherwise it determines whether soft-deleted objects are included in the result.","title":"Top-level"},{"location":"filtering/#expressions","text":"The following expressions ( type ) are available: or - can contain and(s) and other expressions sub_expressions - the sub-expressions to combine via logical OR and - cannot contain or(s) but other expressions sub_expressions - the sub-expressions to combine via logical AND exact - for exact matching of bool/int/float/str field: str - the field to work on value: bool/int/float/str - the value to match case_insensitive: bool - for strings only invert: bool - whether invert the matching, i.e., logical NOT contains - for sub-string matching field: str - the field to work on value: str - the sub-string to look for case_insensitive: bool invert: bool - whether invert the matching, i.e., logical NOT is_null - checks for NULL values field: str - the field to work on invert: bool - whether invert the matching, i.e., logical NOT compare field: str - the field to work on operator: str - the comparison to perform (<, >, >=, <=) value: bool/int/float/str - the value to compare against invert: bool - whether invert the comparison, i.e., logical NOT","title":"Expressions"},{"location":"filtering/#order-by","text":"{ \"field\": \"my_field\", \"ascending\": true/false, \"nulls_first\": true/false } field : str - the field to enforce the ordering on ascending : bool - ascending or descending nulls_first : bool (optional) - whether nulls are listed first or last, uses database default if omitted","title":"Order by"},{"location":"filtering/#example","text":"The following filter searches for anyone with rob in their name (Robert, Robbie, etc.) who is not exactly 2m tall, unless their name is Robert, in which case they must be exactly 1.75m tall. Ignores the case of the names. Returns people in order of tallest to shortest, then alphabetically if their height is the same, and then by some mysterious third field for people with the same height and name. { \"expressions\": [ { \"sub_expressions\": [ { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"type\": \"exact\" }, { \"field\": \"height\", \"value\": 1.75, \"type\": \"exact\" } ], \"type\": \"and\" }, { \"sub_expressions\": [ { \"field\": \"name\", \"value\": \"robert\", \"case_insensitive\": true, \"invert\": true, \"type\": \"exact\" }, { \"field\": \"name\", \"sub_string\": \"rob\", \"case_insensitive\": true, \"type\": \"contains\" }, { \"field\": \"height\", \"value\": 2.0, \"invert\": true, \"type\": \"exact\" } ], \"type\": \"and\" } ], \"type\": \"or\" } ], \"order_by\": [ { \"field\": \"height\", \"ascending\": false }, { \"field\": \"name\" }, { \"field\": \"other\", \"nulls_first\": true } ], \"include_inactive\": false }","title":"Example"},{"location":"frameworks/","text":"Centralized table with frameworks and their versions (e.g., PyTorch 1.2). Fields Available fields: name: str version: str Actions List POST: /v1/frameworks/list Body (optional): filter specification Response: array of pk: int (primary key of framework) name: str version: str Load GET: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Response: pk: int (primary key of framework) name: str version: str Add POST: /v1/frameworks/create Body: name: str version: str Response: pk: int (primary key of framework) name: str version: str Update PUT: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Body: name: str version: str Response: pk: int (primary key of framework) name: str version: str Partial update PATCH: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Any of the following fields in the body: name: str version: str Response: pk: int (primary key of framework) name: str version: str Delete DELETE: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework)","title":"Frameworks"},{"location":"frameworks/#fields","text":"Available fields: name: str version: str","title":"Fields"},{"location":"frameworks/#actions","text":"","title":"Actions"},{"location":"frameworks/#list","text":"POST: /v1/frameworks/list Body (optional): filter specification Response: array of pk: int (primary key of framework) name: str version: str","title":"List"},{"location":"frameworks/#load","text":"GET: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Response: pk: int (primary key of framework) name: str version: str","title":"Load"},{"location":"frameworks/#add","text":"POST: /v1/frameworks/create Body: name: str version: str Response: pk: int (primary key of framework) name: str version: str","title":"Add"},{"location":"frameworks/#update","text":"PUT: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Body: name: str version: str Response: pk: int (primary key of framework) name: str version: str","title":"Update"},{"location":"frameworks/#partial-update","text":"PATCH: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework) Any of the following fields in the body: name: str version: str Response: pk: int (primary key of framework) name: str version: str","title":"Partial update"},{"location":"frameworks/#delete","text":"DELETE: /v1/frameworks/{PK} Parameters: PK: int (primary key of framework)","title":"Delete"},{"location":"hardware/","text":"For defining the graphics card hardware generations. Links CUDA/Hardware Fields pk: int (primary key of hardware specification) generation: str min_compute_capability: float (inclusive) max_compute_capability: float (exclusive) Actions List Method POST URL /v1/hardware/list Body (optional) filter specification Permissions user is authenticated Response array of pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Create Method POST URL /v1/hardware/create Body generation: str min_compute_capability: float (incl) max_compute_capability: float (excl) Permissions user is an admin Response pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Retrieve Method GET URL /v1/hardware/{PK} Parameters PK : int (primary key of hardware) Permissions user is authenticated Response pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Update Method PUT URL /v1/hardware/{PK} Parameters PK : int (primary key of hardware) Body generation: str min_compute_capability: float max_compute_capability: float Permissions user is an admin Response pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Partial update Method PATCH URL /v1/hardware/{PK} Parameters PK : int (primary key of hardware) Body generation (optional): str min_compute_capability (optional): float max_compute_capability (optional): float Permissions user is an admin Response pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float Destroy Method DELETE URL /v1/hardware/{PK} Parameters PK : int (primary key of hardware) Permissions user is an admin Get Hardware Generation Method GET URL /v1/hardware/get-hardware-generation/{COMPUTE} Parameters COMPUTE : float Permissions user is authenticated Response pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Hardware"},{"location":"hardware/#links","text":"CUDA/Hardware","title":"Links"},{"location":"hardware/#fields","text":"pk: int (primary key of hardware specification) generation: str min_compute_capability: float (inclusive) max_compute_capability: float (exclusive)","title":"Fields"},{"location":"hardware/#actions","text":"","title":"Actions"},{"location":"hardware/#list","text":"","title":"List"},{"location":"hardware/#method","text":"POST","title":"Method"},{"location":"hardware/#url","text":"/v1/hardware/list","title":"URL"},{"location":"hardware/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"hardware/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"hardware/#response","text":"array of pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#create","text":"","title":"Create"},{"location":"hardware/#method_1","text":"POST","title":"Method"},{"location":"hardware/#url_1","text":"/v1/hardware/create","title":"URL"},{"location":"hardware/#body","text":"generation: str min_compute_capability: float (incl) max_compute_capability: float (excl)","title":"Body"},{"location":"hardware/#permissions_1","text":"user is an admin","title":"Permissions"},{"location":"hardware/#response_1","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#retrieve","text":"","title":"Retrieve"},{"location":"hardware/#method_2","text":"GET","title":"Method"},{"location":"hardware/#url_2","text":"/v1/hardware/{PK}","title":"URL"},{"location":"hardware/#parameters","text":"PK : int (primary key of hardware)","title":"Parameters"},{"location":"hardware/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"hardware/#response_2","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#update","text":"","title":"Update"},{"location":"hardware/#method_3","text":"PUT","title":"Method"},{"location":"hardware/#url_3","text":"/v1/hardware/{PK}","title":"URL"},{"location":"hardware/#parameters_1","text":"PK : int (primary key of hardware)","title":"Parameters"},{"location":"hardware/#body_1","text":"generation: str min_compute_capability: float max_compute_capability: float","title":"Body"},{"location":"hardware/#permissions_3","text":"user is an admin","title":"Permissions"},{"location":"hardware/#response_3","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#partial-update","text":"","title":"Partial update"},{"location":"hardware/#method_4","text":"PATCH","title":"Method"},{"location":"hardware/#url_4","text":"/v1/hardware/{PK}","title":"URL"},{"location":"hardware/#parameters_2","text":"PK : int (primary key of hardware)","title":"Parameters"},{"location":"hardware/#body_2","text":"generation (optional): str min_compute_capability (optional): float max_compute_capability (optional): float","title":"Body"},{"location":"hardware/#permissions_4","text":"user is an admin","title":"Permissions"},{"location":"hardware/#response_4","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"hardware/#destroy","text":"","title":"Destroy"},{"location":"hardware/#method_5","text":"DELETE","title":"Method"},{"location":"hardware/#url_5","text":"/v1/hardware/{PK}","title":"URL"},{"location":"hardware/#parameters_3","text":"PK : int (primary key of hardware)","title":"Parameters"},{"location":"hardware/#permissions_5","text":"user is an admin","title":"Permissions"},{"location":"hardware/#get-hardware-generation","text":"","title":"Get Hardware Generation"},{"location":"hardware/#method_6","text":"GET","title":"Method"},{"location":"hardware/#url_6","text":"/v1/hardware/get-hardware-generation/{COMPUTE}","title":"URL"},{"location":"hardware/#parameters_4","text":"COMPUTE : float","title":"Parameters"},{"location":"hardware/#permissions_6","text":"user is authenticated","title":"Permissions"},{"location":"hardware/#response_5","text":"pk: int (primary key of hardware) generation: str min_compute_capability: float max_compute_capability: float","title":"Response"},{"location":"image_classification/","text":"Additional image classification dataset operations. For core dataset operations, see here . Fields files: array of file names categories: for each image name an array of category strings URL Uses /v1/classify/ instead of /v1/datasets/ , also for the core operations. Actions Add categories PATCH: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images Get categories GET: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images Response: for each image name an array of category strings Remove categories PATCH: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"remove\" images: array of image names categories: array of category strings to remove from all specified images","title":"Image classification"},{"location":"image_classification/#fields","text":"files: array of file names categories: for each image name an array of category strings","title":"Fields"},{"location":"image_classification/#url","text":"Uses /v1/classify/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"image_classification/#actions","text":"","title":"Actions"},{"location":"image_classification/#add-categories","text":"PATCH: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images","title":"Add categories"},{"location":"image_classification/#get-categories","text":"GET: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"add\" images: array of image names categories: array of category strings to add to all specified images Response: for each image name an array of category strings","title":"Get categories"},{"location":"image_classification/#remove-categories","text":"PATCH: /v1/classify/{PK}/categories Parameters: PK: int (primary key of dataset) Body: method: \"remove\" images: array of image names categories: array of category strings to remove from all specified images","title":"Remove categories"},{"location":"inputs/","text":"Manages the inputs of a job-template. Fields pk: int (primary key of input) template: job template ID name: str types: str options: str help: str Actions None","title":"Inputs"},{"location":"inputs/#fields","text":"pk: int (primary key of input) template: job template ID name: str types: str options: str help: str","title":"Fields"},{"location":"inputs/#actions","text":"","title":"Actions"},{"location":"inputs/#none","text":"","title":"None"},{"location":"job_outputs/","text":"Manages the output data attached to jobs. Fields pk: int (primary key of job output) job: int (primary key of job) name: str type: str data: file ID Actions Retrieve Gets the information about a specific job output. Can also be performed by name/type from the associated job . Method GET URL /v1/job-outputs/{PK} Parameters PK : int (primary key of job output) Permissions user is authenticated Response pk: int (primary key of job output) job: job ID name: str type: str creator: user ID or null creation_time: timestamp deletion_time: timestamp or null Download Downloads the data for a job output. Can also be performed by name/type from the associated job . Method POST URL /v1/job-outputs/{PK}/download Parameters PK : int (primary key of job output) Permissions user is authenticated Response Binary content of the output.","title":"Job outputs"},{"location":"job_outputs/#fields","text":"pk: int (primary key of job output) job: int (primary key of job) name: str type: str data: file ID","title":"Fields"},{"location":"job_outputs/#actions","text":"","title":"Actions"},{"location":"job_outputs/#retrieve","text":"Gets the information about a specific job output. Can also be performed by name/type from the associated job .","title":"Retrieve"},{"location":"job_outputs/#method","text":"GET","title":"Method"},{"location":"job_outputs/#url","text":"/v1/job-outputs/{PK}","title":"URL"},{"location":"job_outputs/#parameters","text":"PK : int (primary key of job output)","title":"Parameters"},{"location":"job_outputs/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"job_outputs/#response","text":"pk: int (primary key of job output) job: job ID name: str type: str creator: user ID or null creation_time: timestamp deletion_time: timestamp or null","title":"Response"},{"location":"job_outputs/#download","text":"Downloads the data for a job output. Can also be performed by name/type from the associated job .","title":"Download"},{"location":"job_outputs/#method_1","text":"POST","title":"Method"},{"location":"job_outputs/#url_1","text":"/v1/job-outputs/{PK}/download","title":"URL"},{"location":"job_outputs/#parameters_1","text":"PK : int (primary key of job output)","title":"Parameters"},{"location":"job_outputs/#permissions_1","text":"user is authenticated","title":"Permissions"},{"location":"job_outputs/#response_1","text":"Binary content of the output.","title":"Response"},{"location":"job_templates/","text":"Manages the job templates. Fields pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null workabletemplate: workable template or null metatemplate: meta-template or null Actions List Method POST URL /v1/job-templates/list Body (optional) filter specification Permissions user is authenticated Response array of pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str Retrieve Method GET URL /v1/job-templates/{PK} Parameters PK : int (primary key of job template) Permissions user is authenticated Response pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str Destroy Flags a job template as deleted, it can be reinstated . To permanently delete, see Hard Delete . Method DELETE URL /v1/job-templates/{PK} Parameters PK : int (primary key of job template) Permissions user is an admin Create Job Method POST URL /v1/job-templates/{PK}/create-job Parameters PK : int (primary key of job template) Body input_values: map from input name to: value: str type: str parameter_values (optional): map from parameter name to str description (optional): str notification_override: object actions: object on_acquire: array of notifications on_release: array of notifications on_start: array of notifications on_progress: array of notifications on_finish: array of notifications on_error: array of notifications on_reset: array of notifications on_abort: array of notifications on_cancel: array of notifications keep_default (optional): bool child_notification_overrides: map of child template name to: actions: object on_acquire: array of notifications on_release: array of notifications on_start: array of notifications on_progress: array of notifications on_finish: array of notifications on_error: array of notifications on_reset: array of notifications on_abort: array of notifications on_cancel: array of notifications keep_default (optional): bool Permissions user is authenticated Response pk: job ID description: str template: object pk: int (same as PK ) name: str version: int input_values: map of input name to: value: str type: str parameter_values: null or map of parameter name to str outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Hard Delete Permanently deletes the job template. For soft-deletion, see Destroy . METHOD DELETE URL /v1/job-templates/{PK}/hard Parameters PK : int (primary key of job template) Permissions user is admin Response pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str Reinstate Undeletes a previously soft-deleted job template. Method DELETE URL /v1/job-templates/{PK}/reinstate Parameters PK : int (primary key of job template) Permissions user is admin Response pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str Import Template Method POST URL /v1/job-templates/import Body JSON representation of job template ( example ) Permissions user is admin Response pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str Export Template Method GET URL /v1/job-templates/{PK}/export Parameters PK : int (primary key of job template) Permissions user is admin Response JSON representation of job template ( example )","title":"Job templates"},{"location":"job_templates/#fields","text":"pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null workabletemplate: workable template or null metatemplate: meta-template or null","title":"Fields"},{"location":"job_templates/#actions","text":"","title":"Actions"},{"location":"job_templates/#list","text":"","title":"List"},{"location":"job_templates/#method","text":"POST","title":"Method"},{"location":"job_templates/#url","text":"/v1/job-templates/list","title":"URL"},{"location":"job_templates/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"job_templates/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response","text":"array of pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str","title":"Response"},{"location":"job_templates/#retrieve","text":"","title":"Retrieve"},{"location":"job_templates/#method_1","text":"GET","title":"Method"},{"location":"job_templates/#url_1","text":"/v1/job-templates/{PK}","title":"URL"},{"location":"job_templates/#parameters","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_1","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response_1","text":"pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str","title":"Response"},{"location":"job_templates/#destroy","text":"Flags a job template as deleted, it can be reinstated . To permanently delete, see Hard Delete .","title":"Destroy"},{"location":"job_templates/#method_2","text":"DELETE","title":"Method"},{"location":"job_templates/#url_2","text":"/v1/job-templates/{PK}","title":"URL"},{"location":"job_templates/#parameters_1","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_2","text":"user is an admin","title":"Permissions"},{"location":"job_templates/#create-job","text":"","title":"Create Job"},{"location":"job_templates/#method_3","text":"POST","title":"Method"},{"location":"job_templates/#url_3","text":"/v1/job-templates/{PK}/create-job","title":"URL"},{"location":"job_templates/#parameters_2","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#body","text":"input_values: map from input name to: value: str type: str parameter_values (optional): map from parameter name to str description (optional): str notification_override: object actions: object on_acquire: array of notifications on_release: array of notifications on_start: array of notifications on_progress: array of notifications on_finish: array of notifications on_error: array of notifications on_reset: array of notifications on_abort: array of notifications on_cancel: array of notifications keep_default (optional): bool child_notification_overrides: map of child template name to: actions: object on_acquire: array of notifications on_release: array of notifications on_start: array of notifications on_progress: array of notifications on_finish: array of notifications on_error: array of notifications on_reset: array of notifications on_abort: array of notifications on_cancel: array of notifications keep_default (optional): bool","title":"Body"},{"location":"job_templates/#permissions_3","text":"user is authenticated","title":"Permissions"},{"location":"job_templates/#response_2","text":"pk: job ID description: str template: object pk: int (same as PK ) name: str version: int input_values: map of input name to: value: str type: str parameter_values: null or map of parameter name to str outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"job_templates/#hard-delete","text":"Permanently deletes the job template. For soft-deletion, see Destroy .","title":"Hard Delete"},{"location":"job_templates/#method_4","text":"DELETE","title":"METHOD"},{"location":"job_templates/#url_4","text":"/v1/job-templates/{PK}/hard","title":"URL"},{"location":"job_templates/#parameters_3","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_4","text":"user is admin","title":"Permissions"},{"location":"job_templates/#response_3","text":"pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str","title":"Response"},{"location":"job_templates/#reinstate","text":"Undeletes a previously soft-deleted job template.","title":"Reinstate"},{"location":"job_templates/#method_5","text":"DELETE","title":"Method"},{"location":"job_templates/#url_5","text":"/v1/job-templates/{PK}/reinstate","title":"URL"},{"location":"job_templates/#parameters_4","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_5","text":"user is admin","title":"Permissions"},{"location":"job_templates/#response_4","text":"pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str","title":"Response"},{"location":"job_templates/#import-template","text":"","title":"Import Template"},{"location":"job_templates/#method_6","text":"POST","title":"Method"},{"location":"job_templates/#url_6","text":"/v1/job-templates/import","title":"URL"},{"location":"job_templates/#body_1","text":"JSON representation of job template ( example )","title":"Body"},{"location":"job_templates/#permissions_6","text":"user is admin","title":"Permissions"},{"location":"job_templates/#response_5","text":"pk: int (primary key of job template) name: str version: int description: str scope: str (public/project/user) domain: str ( domain name ) inputs: array of: name: str types: array of str options: str help: str parameters: array of: name: str type: str default: str help: str licence: licence ID creator: user ID or null creation_time: timestamp deletion_time: timestamp or null framework (optional): framework ID type (optional): str executor_class (optional): str required_packages (optional): str body (optional): str","title":"Response"},{"location":"job_templates/#export-template","text":"","title":"Export Template"},{"location":"job_templates/#method_7","text":"GET","title":"Method"},{"location":"job_templates/#url_7","text":"/v1/job-templates/{PK}/export","title":"URL"},{"location":"job_templates/#parameters_5","text":"PK : int (primary key of job template)","title":"Parameters"},{"location":"job_templates/#permissions_7","text":"user is admin","title":"Permissions"},{"location":"job_templates/#response_6","text":"JSON representation of job template ( example )","title":"Response"},{"location":"job_types/","text":"Manages the job types. Fields pk: int (primary key of job type) name: str Actions List Lists the job types registyered with the server. Method POST URL /v1/job-types/list Body (optional) filter specification Permissions user is authenticated Response array of pk: int (primary key of job type) name: str Create Creates a new job type. Method POST URL /v1/job-types Body name: str Permissions user is an admin Response pk: int (same as PK ) name: str Retrieve Gets the representation of the job type. Method GET URL /v1/job-types/{PK} Parameters PK : int (primary key of job type) Permissions user is authenticated Response pk: int (same as PK ) name: str Update Updates the fields of the job type. Method PUT URL /v1/job-types/{PK} Parameters PK : int (primary key of job type) Body name: str Permissions user is an admin Response pk: int (same as PK ) name: str Partial Update Updates a selection of fields on the job type. As job types only have a name field, this is functionally equivalent to Update . Method PATCH URL /v1/job-types/{PK} Parameters PK : int (primary key of job type) Body name (optional): str Permissions user is an admin Response pk: int (same as PK ) name: str Destroy Attempts to delete a job-type from the system. Only succeeds if no other models are referencing the job type. Method DELETE URL /v1/job-types/{PK} Parameters PK : int (primary key of job type) Permissions user is an admin","title":"Job types"},{"location":"job_types/#fields","text":"pk: int (primary key of job type) name: str","title":"Fields"},{"location":"job_types/#actions","text":"","title":"Actions"},{"location":"job_types/#list","text":"Lists the job types registyered with the server.","title":"List"},{"location":"job_types/#method","text":"POST","title":"Method"},{"location":"job_types/#url","text":"/v1/job-types/list","title":"URL"},{"location":"job_types/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"job_types/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"job_types/#response","text":"array of pk: int (primary key of job type) name: str","title":"Response"},{"location":"job_types/#create","text":"Creates a new job type.","title":"Create"},{"location":"job_types/#method_1","text":"POST","title":"Method"},{"location":"job_types/#url_1","text":"/v1/job-types","title":"URL"},{"location":"job_types/#body","text":"name: str","title":"Body"},{"location":"job_types/#permissions_1","text":"user is an admin","title":"Permissions"},{"location":"job_types/#response_1","text":"pk: int (same as PK ) name: str","title":"Response"},{"location":"job_types/#retrieve","text":"Gets the representation of the job type.","title":"Retrieve"},{"location":"job_types/#method_2","text":"GET","title":"Method"},{"location":"job_types/#url_2","text":"/v1/job-types/{PK}","title":"URL"},{"location":"job_types/#parameters","text":"PK : int (primary key of job type)","title":"Parameters"},{"location":"job_types/#permissions_2","text":"user is authenticated","title":"Permissions"},{"location":"job_types/#response_2","text":"pk: int (same as PK ) name: str","title":"Response"},{"location":"job_types/#update","text":"Updates the fields of the job type.","title":"Update"},{"location":"job_types/#method_3","text":"PUT","title":"Method"},{"location":"job_types/#url_3","text":"/v1/job-types/{PK}","title":"URL"},{"location":"job_types/#parameters_1","text":"PK : int (primary key of job type)","title":"Parameters"},{"location":"job_types/#body_1","text":"name: str","title":"Body"},{"location":"job_types/#permissions_3","text":"user is an admin","title":"Permissions"},{"location":"job_types/#response_3","text":"pk: int (same as PK ) name: str","title":"Response"},{"location":"job_types/#partial-update","text":"Updates a selection of fields on the job type. As job types only have a name field, this is functionally equivalent to Update .","title":"Partial Update"},{"location":"job_types/#method_4","text":"PATCH","title":"Method"},{"location":"job_types/#url_4","text":"/v1/job-types/{PK}","title":"URL"},{"location":"job_types/#parameters_2","text":"PK : int (primary key of job type)","title":"Parameters"},{"location":"job_types/#body_2","text":"name (optional): str","title":"Body"},{"location":"job_types/#permissions_4","text":"user is an admin","title":"Permissions"},{"location":"job_types/#response_4","text":"pk: int (same as PK ) name: str","title":"Response"},{"location":"job_types/#destroy","text":"Attempts to delete a job-type from the system. Only succeeds if no other models are referencing the job type.","title":"Destroy"},{"location":"job_types/#method_5","text":"DELETE","title":"Method"},{"location":"job_types/#url_5","text":"/v1/job-types/{PK}","title":"URL"},{"location":"job_types/#parameters_3","text":"PK : int (primary key of job type)","title":"Parameters"},{"location":"job_types/#permissions_5","text":"user is an admin","title":"Permissions"},{"location":"jobs/","text":"Manages the generated jobs. Fields pk: int (primary key of job) description: str template: job template ID input_values: str parameter_values: str or null outputs: array of job outputs node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null progress_amount: float Actions List Lists the jobs present on the server. Method POST URL /v1/jobs/list Permissions user is authenticated Body (optional) filter specification Response array of pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Retrieve Gets the information about a specific job. Method GET URL /v1/jobs/{PK} Parameters PK : int (primary key of job) Permissions user is authenticated Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Update Updates the description of a specific job. Method PUT URL /v1/jobs/{PK} Parameters PK : int (primary key of job) Body description: str Permissions user is admin Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Partial Update Updates the description of a specific job. Method PATCH URL /v1/jobs/{PK} Parameters PK : int (primary key of job) Body description (optional): str Permissions user is admin Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Destroy Flags a job as deleted, it can be reinstated . To permanently delete, see Hard Delete . Method DELETE URL /v1/jobs/{PK} Parameters PK : int (primary key of job) Permissions user is admin Add Output Adds an output (with data) to a job. Method POST URL /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters PK : the primary key of the job NAME : the name of the output to add TYPE : the type of the output to add Body Binary content of the output. Permissions Either of user is an admin node has acquired the job Response pk: job output ID job: job ID (same as the PK parameter) name: str (same as the NAME parameter) type: str (same as the TYPE parameter) creator: user ID or null creation_time: timestamp deletion_time: timestamp or null Delete Output Removes an output from a job. Method DELETE URL /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters PK: the primary key of the job NAME: the name of the output to delete TYPE: the type of the output to delete Permissions user is admin Response pk: job output ID job: job ID (same as the PK parameter) name: str (same as the NAME parameter) type: str (same as the TYPE parameter) creator: user ID or null creation_time: timestamp deletion_time: timestamp or null Get Output Downloads the output data of a job output. Method GET URL /v1/jobs/{PK}/outputs/{NAME}/{TYPE} Parameters PK: the primary key of the job NAME: the name of the output to retrieve TYPE: the type of the output to retrieve Permissions user is authenticated Response Binary content of the output. Get Output Info Gets the meta-data of a job output. Method GET URL /v1/jobs/{PK}/outputs/{NAME}/{TYPE}/info Parameters PK: the primary key of the job NAME: the name of the output to delete TYPE: the type of the output to delete Permissions user is authenticated Response pk: job output ID job: job ID (same as the PK parameter) name: str (same as the NAME parameter) type: str (same as the TYPE parameter) creator: user ID or null creation_time: timestamp deletion_time: timestamp or null Acquire Job Allows a node to reserve a job for exclusive access (so it can enact the job). Method GET URL /v1/jobs/{PK}/acquire Parameters PK : int (primary key of job) Permissions Both: accessed by a node ; and job is not a meta-job Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Release Job Allows a node to give up its reservation of a job (e.g. if it realises it cannot complete the job). Method DELETE URL /v1/jobs/{PK}/release Parameters PK : int (primary key of job) Permissions Either: the node has acquired the job ; or it thinks it has Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Start Job Allows a node to indicate that it has begun work on completing a job. Method POST URL /v1/jobs/{PK}/start Parameters PK : int (primary key of job) Body send_notification: str (currently unused) Permissions the node has acquired the job Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Progress Job Allows a node to update interested parties that some progress has been made on the completion of a job. Method POST URL /v1/jobs/{PK}/progress/{PROGRESS} Parameters PK : int (primary key of job) PROGRESS : float between 0.0 and 1.0 Body Any JSON object can be attached to this action, and it will be forwarded to any watchers of the job. Permissions the node has acquired the job Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Finish Job Allows a node to indicate that it has completed work on a job (either successfully or in-error). Method POST URL /v1/jobs/{PK}/finish Parameters PK : int (primary key of job) Body success: bool (currently unused) send_notification: str (currently unused) error (optional): str Permissions Either: the node has acquired the job ; or it thinks it has Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Reset Job Allows a node to reset a job to its initial state so that it can be re-attempted. Method DELETE URL /v1/jobs/{PK}/reset Parameters PK : int (primary key of job) Permissions the node has acquired the job Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Abort Job Allows a job to be reset to its initial state in case it is locked by a node that has gone offline. Method DELETE URL /v1/jobs/{PK}/abort Parameters PK : int (primary key of job) Permissions user is an admin Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Cancel Job Allows a user to cancel a job, if they no longer require the results of that job. Method DELETE URL /v1/jobs/{PK}/cancel Parameters PK : int (primary key of job) Permissions user is an admin Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Hard Delete Permanently deletes the job. For soft-deletion, see Destroy . METHOD DELETE URL /v1/jobs/{PK}/hard Parameters PK : int (primary key of job) Permissions user is admin Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool Reinstate Undeletes a previously soft-deleted job. Method DELETE URL /v1/jobs/{PK}/reinstate Parameters PK : int (primary key of job) Permissions user is admin Response pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Jobs"},{"location":"jobs/#fields","text":"pk: int (primary key of job) description: str template: job template ID input_values: str parameter_values: str or null outputs: array of job outputs node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null progress_amount: float","title":"Fields"},{"location":"jobs/#actions","text":"","title":"Actions"},{"location":"jobs/#list","text":"Lists the jobs present on the server.","title":"List"},{"location":"jobs/#method","text":"POST","title":"Method"},{"location":"jobs/#url","text":"/v1/jobs/list","title":"URL"},{"location":"jobs/#permissions","text":"user is authenticated","title":"Permissions"},{"location":"jobs/#body-optional","text":"filter specification","title":"Body (optional)"},{"location":"jobs/#response","text":"array of pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#retrieve","text":"Gets the information about a specific job.","title":"Retrieve"},{"location":"jobs/#method_1","text":"GET","title":"Method"},{"location":"jobs/#url_1","text":"/v1/jobs/{PK}","title":"URL"},{"location":"jobs/#parameters","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_1","text":"user is authenticated","title":"Permissions"},{"location":"jobs/#response_1","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#update","text":"Updates the description of a specific job.","title":"Update"},{"location":"jobs/#method_2","text":"PUT","title":"Method"},{"location":"jobs/#url_2","text":"/v1/jobs/{PK}","title":"URL"},{"location":"jobs/#parameters_1","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#body","text":"description: str","title":"Body"},{"location":"jobs/#permissions_2","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_2","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#partial-update","text":"Updates the description of a specific job.","title":"Partial Update"},{"location":"jobs/#method_3","text":"PATCH","title":"Method"},{"location":"jobs/#url_3","text":"/v1/jobs/{PK}","title":"URL"},{"location":"jobs/#parameters_2","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#body_1","text":"description (optional): str","title":"Body"},{"location":"jobs/#permissions_3","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_3","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#destroy","text":"Flags a job as deleted, it can be reinstated . To permanently delete, see Hard Delete .","title":"Destroy"},{"location":"jobs/#method_4","text":"DELETE","title":"Method"},{"location":"jobs/#url_4","text":"/v1/jobs/{PK}","title":"URL"},{"location":"jobs/#parameters_3","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_4","text":"user is admin","title":"Permissions"},{"location":"jobs/#add-output","text":"Adds an output (with data) to a job.","title":"Add Output"},{"location":"jobs/#method_5","text":"POST","title":"Method"},{"location":"jobs/#url_5","text":"/v1/jobs/{PK}/outputs/{NAME}/{TYPE}","title":"URL"},{"location":"jobs/#parameters_4","text":"PK : the primary key of the job NAME : the name of the output to add TYPE : the type of the output to add","title":"Parameters"},{"location":"jobs/#body_2","text":"Binary content of the output.","title":"Body"},{"location":"jobs/#permissions_5","text":"Either of user is an admin node has acquired the job","title":"Permissions"},{"location":"jobs/#response_4","text":"pk: job output ID job: job ID (same as the PK parameter) name: str (same as the NAME parameter) type: str (same as the TYPE parameter) creator: user ID or null creation_time: timestamp deletion_time: timestamp or null","title":"Response"},{"location":"jobs/#delete-output","text":"Removes an output from a job.","title":"Delete Output"},{"location":"jobs/#method_6","text":"DELETE","title":"Method"},{"location":"jobs/#url_6","text":"/v1/jobs/{PK}/outputs/{NAME}/{TYPE}","title":"URL"},{"location":"jobs/#parameters_5","text":"PK: the primary key of the job NAME: the name of the output to delete TYPE: the type of the output to delete","title":"Parameters"},{"location":"jobs/#permissions_6","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_5","text":"pk: job output ID job: job ID (same as the PK parameter) name: str (same as the NAME parameter) type: str (same as the TYPE parameter) creator: user ID or null creation_time: timestamp deletion_time: timestamp or null","title":"Response"},{"location":"jobs/#get-output","text":"Downloads the output data of a job output.","title":"Get Output"},{"location":"jobs/#method_7","text":"GET","title":"Method"},{"location":"jobs/#url_7","text":"/v1/jobs/{PK}/outputs/{NAME}/{TYPE}","title":"URL"},{"location":"jobs/#parameters_6","text":"PK: the primary key of the job NAME: the name of the output to retrieve TYPE: the type of the output to retrieve","title":"Parameters"},{"location":"jobs/#permissions_7","text":"user is authenticated","title":"Permissions"},{"location":"jobs/#response_6","text":"Binary content of the output.","title":"Response"},{"location":"jobs/#get-output-info","text":"Gets the meta-data of a job output.","title":"Get Output Info"},{"location":"jobs/#method_8","text":"GET","title":"Method"},{"location":"jobs/#url_8","text":"/v1/jobs/{PK}/outputs/{NAME}/{TYPE}/info","title":"URL"},{"location":"jobs/#parameters_7","text":"PK: the primary key of the job NAME: the name of the output to delete TYPE: the type of the output to delete","title":"Parameters"},{"location":"jobs/#permissions_8","text":"user is authenticated","title":"Permissions"},{"location":"jobs/#response_7","text":"pk: job output ID job: job ID (same as the PK parameter) name: str (same as the NAME parameter) type: str (same as the TYPE parameter) creator: user ID or null creation_time: timestamp deletion_time: timestamp or null","title":"Response"},{"location":"jobs/#acquire-job","text":"Allows a node to reserve a job for exclusive access (so it can enact the job).","title":"Acquire Job"},{"location":"jobs/#method_9","text":"GET","title":"Method"},{"location":"jobs/#url_9","text":"/v1/jobs/{PK}/acquire","title":"URL"},{"location":"jobs/#parameters_8","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_9","text":"Both: accessed by a node ; and job is not a meta-job","title":"Permissions"},{"location":"jobs/#response_8","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#release-job","text":"Allows a node to give up its reservation of a job (e.g. if it realises it cannot complete the job).","title":"Release Job"},{"location":"jobs/#method_10","text":"DELETE","title":"Method"},{"location":"jobs/#url_10","text":"/v1/jobs/{PK}/release","title":"URL"},{"location":"jobs/#parameters_9","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_10","text":"Either: the node has acquired the job ; or it thinks it has","title":"Permissions"},{"location":"jobs/#response_9","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#start-job","text":"Allows a node to indicate that it has begun work on completing a job.","title":"Start Job"},{"location":"jobs/#method_11","text":"POST","title":"Method"},{"location":"jobs/#url_11","text":"/v1/jobs/{PK}/start","title":"URL"},{"location":"jobs/#parameters_10","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#body_3","text":"send_notification: str (currently unused)","title":"Body"},{"location":"jobs/#permissions_11","text":"the node has acquired the job","title":"Permissions"},{"location":"jobs/#response_10","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#progress-job","text":"Allows a node to update interested parties that some progress has been made on the completion of a job.","title":"Progress Job"},{"location":"jobs/#method_12","text":"POST","title":"Method"},{"location":"jobs/#url_12","text":"/v1/jobs/{PK}/progress/{PROGRESS}","title":"URL"},{"location":"jobs/#parameters_11","text":"PK : int (primary key of job) PROGRESS : float between 0.0 and 1.0","title":"Parameters"},{"location":"jobs/#body_4","text":"Any JSON object can be attached to this action, and it will be forwarded to any watchers of the job.","title":"Body"},{"location":"jobs/#permissions_12","text":"the node has acquired the job","title":"Permissions"},{"location":"jobs/#response_11","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#finish-job","text":"Allows a node to indicate that it has completed work on a job (either successfully or in-error).","title":"Finish Job"},{"location":"jobs/#method_13","text":"POST","title":"Method"},{"location":"jobs/#url_13","text":"/v1/jobs/{PK}/finish","title":"URL"},{"location":"jobs/#parameters_12","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#body_5","text":"success: bool (currently unused) send_notification: str (currently unused) error (optional): str","title":"Body"},{"location":"jobs/#permissions_13","text":"Either: the node has acquired the job ; or it thinks it has","title":"Permissions"},{"location":"jobs/#response_12","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#reset-job","text":"Allows a node to reset a job to its initial state so that it can be re-attempted.","title":"Reset Job"},{"location":"jobs/#method_14","text":"DELETE","title":"Method"},{"location":"jobs/#url_14","text":"/v1/jobs/{PK}/reset","title":"URL"},{"location":"jobs/#parameters_13","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_14","text":"the node has acquired the job","title":"Permissions"},{"location":"jobs/#response_13","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#abort-job","text":"Allows a job to be reset to its initial state in case it is locked by a node that has gone offline.","title":"Abort Job"},{"location":"jobs/#method_15","text":"DELETE","title":"Method"},{"location":"jobs/#url_15","text":"/v1/jobs/{PK}/abort","title":"URL"},{"location":"jobs/#parameters_14","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_15","text":"user is an admin","title":"Permissions"},{"location":"jobs/#response_14","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#cancel-job","text":"Allows a user to cancel a job, if they no longer require the results of that job.","title":"Cancel Job"},{"location":"jobs/#method_16","text":"DELETE","title":"Method"},{"location":"jobs/#url_16","text":"/v1/jobs/{PK}/cancel","title":"URL"},{"location":"jobs/#parameters_15","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_16","text":"user is an admin","title":"Permissions"},{"location":"jobs/#response_15","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#hard-delete","text":"Permanently deletes the job. For soft-deletion, see Destroy .","title":"Hard Delete"},{"location":"jobs/#method_17","text":"DELETE","title":"METHOD"},{"location":"jobs/#url_17","text":"/v1/jobs/{PK}/hard","title":"URL"},{"location":"jobs/#parameters_16","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_17","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_16","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"jobs/#reinstate","text":"Undeletes a previously soft-deleted job.","title":"Reinstate"},{"location":"jobs/#method_18","text":"DELETE","title":"Method"},{"location":"jobs/#url_18","text":"/v1/jobs/{PK}/reinstate","title":"URL"},{"location":"jobs/#parameters_17","text":"PK : int (primary key of job)","title":"Parameters"},{"location":"jobs/#permissions_18","text":"user is admin","title":"Permissions"},{"location":"jobs/#response_17","text":"pk: int (primary key of job) description: str template: object pk: job template ID name: str version: int input_values: object (input name) -> { value: str, type: str } parameter_values: object or null (parameter name) -> string outputs: array of objects pk: job output ID name: str type: str node: node ID or null error_reason: str or null creator: user ID or null creation_time: timestamp deletion_time: timestamp or null start_time: timestamp or null end_time: timestamp or null parent: int (primary key of parent job) or null is_cancelled: bool","title":"Response"},{"location":"licenses/","text":"Gives access to the available licenses on the server. Fields Available fields: name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Actions List POST: /v1/licences/list Body (optional): filter specification Response: array of pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Load GET: /v1/licences/{PK} Parameters: PK: int (primary key of license) Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Add POST: /v1/licences/create Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Update PUT: /v1/licences/{PK} Parameters: PK: int (primary key of license) Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Partial update PATCH: /v1/licences/{PK} Parameters: PK: int (primary key of license) Any of the following fields in the body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str Modify domains/permissions/limitations/conditions PATCH: /v1/licences/{PK}/subdescriptors Parameters: PK: int (primary key of license) Body: method: str (add/remove) type: str (domains/permissions/limitations/conditions) names: array of str Delete DELETE: /v1/licences/{PK} Parameters: PK: int (primary key of license)","title":"Licenses"},{"location":"licenses/#fields","text":"Available fields: name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Fields"},{"location":"licenses/#actions","text":"","title":"Actions"},{"location":"licenses/#list","text":"POST: /v1/licences/list Body (optional): filter specification Response: array of pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"List"},{"location":"licenses/#load","text":"GET: /v1/licences/{PK} Parameters: PK: int (primary key of license) Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Load"},{"location":"licenses/#add","text":"POST: /v1/licences/create Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Add"},{"location":"licenses/#update","text":"PUT: /v1/licences/{PK} Parameters: PK: int (primary key of license) Body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Update"},{"location":"licenses/#partial-update","text":"PATCH: /v1/licences/{PK} Parameters: PK: int (primary key of license) Any of the following fields in the body: name: str url: str Response: pk: int (primary key of license) name: str url: str domains: str (Software/Models/Data) permissions: array of str limitations: array of str conditions: array of str","title":"Partial update"},{"location":"licenses/#modify-domainspermissionslimitationsconditions","text":"PATCH: /v1/licences/{PK}/subdescriptors Parameters: PK: int (primary key of license) Body: method: str (add/remove) type: str (domains/permissions/limitations/conditions) names: array of str","title":"Modify domains/permissions/limitations/conditions"},{"location":"licenses/#delete","text":"DELETE: /v1/licences/{PK} Parameters: PK: int (primary key of license)","title":"Delete"},{"location":"meta_template_child_relations/","text":"Manages the relationship between a meta-template and its child templates. Fields pk: int (primary key of the relation) parent: meta-template child: job template name: str dependents: set of meta-template dependencies dependencies: set of meta-template dependencies Actions None","title":"Meta template child relations"},{"location":"meta_template_child_relations/#fields","text":"pk: int (primary key of the relation) parent: meta-template child: job template name: str dependents: set of meta-template dependencies dependencies: set of meta-template dependencies","title":"Fields"},{"location":"meta_template_child_relations/#actions","text":"","title":"Actions"},{"location":"meta_template_child_relations/#none","text":"","title":"None"},{"location":"meta_template_dependencies/","text":"Manages the connection between an output and an input of children of a meta-template. Fields pk: int (primary key of the relation) dependency: meta-template child relation output: str dependent: meta-template child relation input: input Actions None","title":"Meta template dependencies"},{"location":"meta_template_dependencies/#fields","text":"pk: int (primary key of the relation) dependency: meta-template child relation output: str dependent: meta-template child relation input: input","title":"Fields"},{"location":"meta_template_dependencies/#actions","text":"","title":"Actions"},{"location":"meta_template_dependencies/#none","text":"","title":"None"},{"location":"meta_templates/","text":"Manages the workable job templates. Fields pk: int (primary key of meta-template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null child_relations: set of meta-template child relations Actions None","title":"Meta templates"},{"location":"meta_templates/#fields","text":"pk: int (primary key of meta-template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null child_relations: set of meta-template child relations","title":"Fields"},{"location":"meta_templates/#actions","text":"","title":"Actions"},{"location":"meta_templates/#none","text":"","title":"None"},{"location":"nodes/","text":"Contains information about the registered worker nodes. Fields Available fields: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Actions List POST: /v1/nodes/list Body (optional): filter specification Response: array of pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Load GET: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Add POST: /v1/nodes/create Body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Update PUT: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Partial update PATCH: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Any of the following fields in the body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int Delete DELETE: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Ping GET: /v1/nodes/ping Response: None Note: Just simple no-op to reestablish connection after long-running tasks.","title":"Nodes"},{"location":"nodes/#fields","text":"Available fields: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Fields"},{"location":"nodes/#actions","text":"","title":"Actions"},{"location":"nodes/#list","text":"POST: /v1/nodes/list Body (optional): filter specification Response: array of pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"List"},{"location":"nodes/#load","text":"GET: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Load"},{"location":"nodes/#add","text":"POST: /v1/nodes/create Body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Add"},{"location":"nodes/#update","text":"PUT: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Update"},{"location":"nodes/#partial-update","text":"PATCH: /v1/nodes/{PK} Parameters: PK: int (primary key of node) Any of the following fields in the body: index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) Response: pk: int (primary key of node) index: int (GPU index, 0 for CPU-only nodes) cpu_mem: int (in bytes) driver_version: str hardware_generation: hardware ID gpu_mem: int (in bytes) last seen: timestamp current_job_id: int","title":"Partial update"},{"location":"nodes/#delete","text":"DELETE: /v1/nodes/{PK} Parameters: PK: int (primary key of node)","title":"Delete"},{"location":"nodes/#ping","text":"GET: /v1/nodes/ping Response: None Note: Just simple no-op to reestablish connection after long-running tasks.","title":"Ping"},{"location":"notifications/","text":"The server currently supports specification of 3 types of notification. Print Notification message: str Email Notification subject: str body: str to: array of str cc: array of str bcc: array of str Websocket Notification To specify a web-socket notification, use an empty object.","title":"Notifications"},{"location":"notifications/#print-notification","text":"message: str","title":"Print Notification"},{"location":"notifications/#email-notification","text":"subject: str body: str to: array of str cc: array of str bcc: array of str","title":"Email Notification"},{"location":"notifications/#websocket-notification","text":"To specify a web-socket notification, use an empty object.","title":"Websocket Notification"},{"location":"object_detection/","text":"Additional object detection dataset operations. For core dataset operations, see here . Fields files: array of file names annotations: for each image name an array of Annotation objects Annotation object fields: x: int y: int width: int height: int label: str polygon: polygon object (optional) Polygon object fields: points: array of array with two int values (x, y) URL Uses /v1/objdet/ instead of /v1/datasets/ , also for the core operations. Actions Add annotations POST: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set annotations for) Body: annotations: array of Annotation objects Get annotations GET: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to get annotations for) Response: array of Annotation objects Delete annotations DELETE: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to remove the annotations for) Get labels GET: /v1/objdet/{PK}/labels Parameters: PK: int (primary key of dataset) Response: array of string labels present in dataset","title":"Object Detection"},{"location":"object_detection/#fields","text":"files: array of file names annotations: for each image name an array of Annotation objects Annotation object fields: x: int y: int width: int height: int label: str polygon: polygon object (optional) Polygon object fields: points: array of array with two int values (x, y)","title":"Fields"},{"location":"object_detection/#url","text":"Uses /v1/objdet/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"object_detection/#actions","text":"","title":"Actions"},{"location":"object_detection/#add-annotations","text":"POST: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set annotations for) Body: annotations: array of Annotation objects","title":"Add annotations"},{"location":"object_detection/#get-annotations","text":"GET: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to get annotations for) Response: array of Annotation objects","title":"Get annotations"},{"location":"object_detection/#delete-annotations","text":"DELETE: /v1/objdet/{PK}/annotations/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to remove the annotations for)","title":"Delete annotations"},{"location":"object_detection/#get-labels","text":"GET: /v1/objdet/{PK}/labels Parameters: PK: int (primary key of dataset) Response: array of string labels present in dataset","title":"Get labels"},{"location":"parameters/","text":"Manages the parameters of a job-template. Fields pk: int (primary key of parameter) template: job template ID name: str type: str default: str help: str Actions None","title":"Parameters"},{"location":"parameters/#fields","text":"pk: int (primary key of parameter) template: job template ID name: str type: str default: str help: str","title":"Fields"},{"location":"parameters/#actions","text":"","title":"Actions"},{"location":"parameters/#none","text":"","title":"None"},{"location":"permissions/","text":"The types of permissions required to perform actions on the server. Each request to the server contains the user making the request, as well as a node ID that the user is acting on behalf of. Based on the state of the user/node and the action being performed, access to the action may be permitted/denied based on any of the following criteria. AllowNone Access to this action is never permitted under any circumstance. IsAdminUser Can only perform the action if the user has the is_staff flag. IsAuthenticated Can only perform the action if a registered user is making the request. IsMember For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team. IsNode Can only perform the action if acting on behalf of a registered node. IsOwnMembership Only the user to which a team membership pertains can perform the action against that membership. IsPublic For objects on the server which can be flagged as publicly available, actions against those objects which are flagged as such can be performed by anyone. IsSelf Users can retrieve their own user records. JobIsWorkable The action can only be performed against a job if it is not a meta-job. MemberHasAdminPermission For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold admin-level permissions. MemberHasExecutePermission For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold execute-level permissions. MemberHasWritePermission For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold write-level permissions. NodeIsSelf Actions on a node can be performed by a user acting on behalf of that node. NodeOwnsJob Actions on a job can be performed by nodes that have acquired a lock on the job. NodeWorkingJob Actions on a job can be performed by nodes that are/were executing a job. This is for the case where a node goes offline while performing a job, and while it is offline the job is wrested away from it. When the node comes back, it can perform clean-up actions (that hold this permission) around the job it was working on.","title":"Permissions"},{"location":"permissions/#allownone","text":"Access to this action is never permitted under any circumstance.","title":"AllowNone"},{"location":"permissions/#isadminuser","text":"Can only perform the action if the user has the is_staff flag.","title":"IsAdminUser"},{"location":"permissions/#isauthenticated","text":"Can only perform the action if a registered user is making the request.","title":"IsAuthenticated"},{"location":"permissions/#ismember","text":"For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team.","title":"IsMember"},{"location":"permissions/#isnode","text":"Can only perform the action if acting on behalf of a registered node.","title":"IsNode"},{"location":"permissions/#isownmembership","text":"Only the user to which a team membership pertains can perform the action against that membership.","title":"IsOwnMembership"},{"location":"permissions/#ispublic","text":"For objects on the server which can be flagged as publicly available, actions against those objects which are flagged as such can be performed by anyone.","title":"IsPublic"},{"location":"permissions/#isself","text":"Users can retrieve their own user records.","title":"IsSelf"},{"location":"permissions/#jobisworkable","text":"The action can only be performed against a job if it is not a meta-job.","title":"JobIsWorkable"},{"location":"permissions/#memberhasadminpermission","text":"For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold admin-level permissions.","title":"MemberHasAdminPermission"},{"location":"permissions/#memberhasexecutepermission","text":"For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold execute-level permissions.","title":"MemberHasExecutePermission"},{"location":"permissions/#memberhaswritepermission","text":"For objects on the server that are owned by a particular team, actions against those objects can only be performed by members of the team who hold write-level permissions.","title":"MemberHasWritePermission"},{"location":"permissions/#nodeisself","text":"Actions on a node can be performed by a user acting on behalf of that node.","title":"NodeIsSelf"},{"location":"permissions/#nodeownsjob","text":"Actions on a job can be performed by nodes that have acquired a lock on the job.","title":"NodeOwnsJob"},{"location":"permissions/#nodeworkingjob","text":"Actions on a job can be performed by nodes that are/were executing a job. This is for the case where a node goes offline while performing a job, and while it is offline the job is wrested away from it. When the node comes back, it can perform clean-up actions (that hold this permission) around the job it was working on.","title":"NodeWorkingJob"},{"location":"pretrained_models/","text":"Manages the pre-trained models, centralizing downloads to decrease network congestion. Fields Available fields: name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp Actions List POST: /v1/pretrained-models/list Body (optional): filter specification Response: array of pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp Load GET: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp Add POST: /v1/pretrained-models/create Body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp Update PUT: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp Partial update PATCH: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Any of the following fields in the body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp Delete DELETE: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model)","title":"Pretrained models"},{"location":"pretrained_models/#fields","text":"Available fields: name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Fields"},{"location":"pretrained_models/#actions","text":"","title":"Actions"},{"location":"pretrained_models/#list","text":"POST: /v1/pretrained-models/list Body (optional): filter specification Response: array of pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"pretrained_models/#load","text":"GET: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"pretrained_models/#add","text":"POST: /v1/pretrained-models/create Body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"pretrained_models/#update","text":"PUT: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"pretrained_models/#partial-update","text":"PATCH: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model) Any of the following fields in the body: name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str Response: pk: int (primary key of pretrained-model) name: str framework: framework ID domain: domain name licence: license ID url: str description: str metadata: str creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Partial update"},{"location":"pretrained_models/#delete","text":"DELETE: /v1/pretrained-models/{PK} Parameters: PK: int (primary key of pretrained-model)","title":"Delete"},{"location":"projects/","text":"Projects link datasets and projects. Fields Available fields: name: str project: project ID creator: user ID creation_time: timestamp deletion_time: timestamp Actions List POST: /v1/projects/list Body (optional): filter specification Response: array of pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Load GET: /v1/projects/{PK} Parameters: PK: int (primary key of project) Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Add POST: /v1/project/create Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Update PUT: /v1/project/{PK} Parameters: PK: int (primary key of project) Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Partial update PATCH: /v1/project/{PK} Parameters: PK: int (primary key of project) Any of the following fields in the body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp Delete DELETE: /v1/project/{PK}[/hard] Parameters: PK: int (primary key of project) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate DELETE: /v1/project/{PK}/reinstate Parameters: PK: int (primary key of project) Notes: Undeletes a previously soft-deleted project","title":"Projects"},{"location":"projects/#fields","text":"Available fields: name: str project: project ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Fields"},{"location":"projects/#actions","text":"","title":"Actions"},{"location":"projects/#list","text":"POST: /v1/projects/list Body (optional): filter specification Response: array of pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"projects/#load","text":"GET: /v1/projects/{PK} Parameters: PK: int (primary key of project) Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"projects/#add","text":"POST: /v1/project/create Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"projects/#update","text":"PUT: /v1/project/{PK} Parameters: PK: int (primary key of project) Body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"projects/#partial-update","text":"PATCH: /v1/project/{PK} Parameters: PK: int (primary key of project) Any of the following fields in the body: name: str team: team ID Response: pk: int (primary key of project) name: str team: team ID creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Partial update"},{"location":"projects/#delete","text":"DELETE: /v1/project/{PK}[/hard] Parameters: PK: int (primary key of project) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"projects/#reinstate","text":"DELETE: /v1/project/{PK}/reinstate Parameters: PK: int (primary key of project) Notes: Undeletes a previously soft-deleted project","title":"Reinstate"},{"location":"speech/","text":"Additional speech dataset operations. For core dataset operations, see here . Fields files: array of file names transcriptions: for each image name a transcription (nested object, transcription field) URL Uses /v1/speech/ instead of /v1/datasets/ , also for the core operations. Actions Add transcript POST: /v1/speech/{PK}/transcriptions/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set the transcript for) Body: transcription: str Get transcripts GET: /v1/speech/{PK}/transcriptions Parameters: PK: int (primary key of dataset) Response: for each image name the corresponding transcript (nested object, transcription field)","title":"Speech"},{"location":"speech/#fields","text":"files: array of file names transcriptions: for each image name a transcription (nested object, transcription field)","title":"Fields"},{"location":"speech/#url","text":"Uses /v1/speech/ instead of /v1/datasets/ , also for the core operations.","title":"URL"},{"location":"speech/#actions","text":"","title":"Actions"},{"location":"speech/#add-transcript","text":"POST: /v1/speech/{PK}/transcriptions/{NAME} Parameters: PK: int (primary key of dataset) NAME: str (name of file to set the transcript for) Body: transcription: str","title":"Add transcript"},{"location":"speech/#get-transcripts","text":"GET: /v1/speech/{PK}/transcriptions Parameters: PK: int (primary key of dataset) Response: for each image name the corresponding transcript (nested object, transcription field)","title":"Get transcripts"},{"location":"teams/","text":"Teams combine users and their permissions. Fields Available fields: name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Permissions: R - read W - write X - job execute A - admin Actions List POST: /v1/teams/list Body (optional): filter specification Response: array of pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Load GET: /v1/teams/{PK} Parameters: PK: int (primary key of team) Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Add POST: /v1/team/create Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Update PUT: /v1/team/{PK} Parameters: PK: int (primary key of team) Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Modify membership PATCH: /v1/team/{PK}/memberships Parameters: PK: int (primary key of team) Body: method: str (add/remove/remove) username: str permissions: str (R/W/X/A, only add/update) Delete DELETE: /v1/team/{PK}[/hard] Parameters: PK: int (primary key of team) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated Reinstate DELETE: /v1/team/{PK}/reinstate Parameters: PK: int (primary key of team) Notes: Undeletes a previously soft-deleted team","title":"Teams"},{"location":"teams/#fields","text":"Available fields: name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp Permissions: R - read W - write X - job execute A - admin","title":"Fields"},{"location":"teams/#actions","text":"","title":"Actions"},{"location":"teams/#list","text":"POST: /v1/teams/list Body (optional): filter specification Response: array of pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"List"},{"location":"teams/#load","text":"GET: /v1/teams/{PK} Parameters: PK: int (primary key of team) Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Load"},{"location":"teams/#add","text":"POST: /v1/team/create Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Add"},{"location":"teams/#update","text":"PUT: /v1/team/{PK} Parameters: PK: int (primary key of team) Body: name: str Response: pk: int (primary key of team) name: str members: array of (pk: int, username: str) creator: user ID creation_time: timestamp deletion_time: timestamp","title":"Update"},{"location":"teams/#modify-membership","text":"PATCH: /v1/team/{PK}/memberships Parameters: PK: int (primary key of team) Body: method: str (add/remove/remove) username: str permissions: str (R/W/X/A, only add/update)","title":"Modify membership"},{"location":"teams/#delete","text":"DELETE: /v1/team/{PK}[/hard] Parameters: PK: int (primary key of team) Notes: Omitting /hard from URL only flags it as deleted, it can be reinstated","title":"Delete"},{"location":"teams/#reinstate","text":"DELETE: /v1/team/{PK}/reinstate Parameters: PK: int (primary key of team) Notes: Undeletes a previously soft-deleted team","title":"Reinstate"},{"location":"users/","text":"Manages the users of the server. Fields Available fields: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Actions List POST: /v1/users/list Body (optional): filter specification Response: array of pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Load GET: /v1/users/{PK} Parameters: PK: int (primary key of user) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool Add POST: /v1/users/create Body: username: str password: str first_name: str last_name: str email: str Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Update PUT: /v1/users/{PK} Parameters: PK: int (primary key of user) Body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Partial update PATCH: /v1/users/{PK} Parameters: PK: int (primary key of user) Any of the following fields in the body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp Delete DELETE: /v1/users/{PK} Parameters: PK: int (primary key of user)","title":"Users"},{"location":"users/#fields","text":"Available fields: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Fields"},{"location":"users/#actions","text":"","title":"Actions"},{"location":"users/#list","text":"POST: /v1/users/list Body (optional): filter specification Response: array of pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"List"},{"location":"users/#load","text":"GET: /v1/users/{PK} Parameters: PK: int (primary key of user) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool","title":"Load"},{"location":"users/#add","text":"POST: /v1/users/create Body: username: str password: str first_name: str last_name: str email: str Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Add"},{"location":"users/#update","text":"PUT: /v1/users/{PK} Parameters: PK: int (primary key of user) Body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Update"},{"location":"users/#partial-update","text":"PATCH: /v1/users/{PK} Parameters: PK: int (primary key of user) Any of the following fields in the body: username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) Response: pk: int (primary key of user) username: str password: str first_name: str last_name: str email: str is_active: bool (active or deleted) is_staff: bool is_superuser: bool date_joined: timestamp last_login: timestamp","title":"Partial update"},{"location":"users/#delete","text":"DELETE: /v1/users/{PK} Parameters: PK: int (primary key of user)","title":"Delete"},{"location":"workable_templates/","text":"Manages the workable job templates. Fields pk: int (primary key of workable job template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null framework: framework type: job type executor_class: str required_packages: str body: str Actions None","title":"Workable templates"},{"location":"workable_templates/#fields","text":"pk: int (primary key of workable job template) name: str version: int description: str scope: str (public/project/user) licence: licence domain: domain inputs: set of inputs parameters: set of parameters creator: user or null creation_time: timestamp deletion_time: timestamp or null framework: framework type: job type executor_class: str required_packages: str body: str","title":"Fields"},{"location":"workable_templates/#actions","text":"","title":"Actions"},{"location":"workable_templates/#none","text":"","title":"None"}]}